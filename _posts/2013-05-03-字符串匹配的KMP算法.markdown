---
layout: post
title:  "字符串匹配的KMP算法"
date:   2013-05-03 00:18:08
author: 刘志成
categories: program
---

## 字符串匹配的KMP算法
### by 刘志成
### at 2013-05-03 00:18:08
### original <http://blog.jobbole.com/39066/?utm_source=rss&utm_medium=rss&utm_campaign=%25e5%25ad%2597%25e7%25ac%25a6%25e4%25b8%25b2%25e5%258c%25b9%25e9%2585%258d%25e7%259a%2584kmp%25e7%25ae%2597%25e6%25b3%2595>

<p>来源：<a href="http://www.ruanyifeng.com/blog/2013/05/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm.html" rel="nofollow">阮一峰</a></p>
<p><a href="http://en.wikipedia.org/wiki/String_searching_algorithm">字符串匹配</a>是计算机的基本任务之一。</p>
<p>举例来说，有一个字符串”BBC ABCDAB ABCDABCDABDE”，我想知道，里面是否包含另一个字符串”ABCDABD”？</p>
<p><a href="http://blog.jobbole.com/wp-content/uploads/2013/05/kmp-01.jpg" rel="lightbox[39066]" title="字符串匹配的KMP算法"><img title="字符串匹配的KMP算法" src="http://blog.jobbole.com/wp-content/uploads/2013/05/kmp-01.jpg" alt="字符串匹配的KMP算法"></a></p>
<p>许多算法可以完成这个任务，<a href="http://en.wikipedia.org/wiki/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm">Knuth-Morris-Pratt算法</a>（简称KMP）是最常用的之一。它以三个发明者命名，起头的那个K就是著名科学家Donald Knuth。</p>
<p><a href="http://blog.jobbole.com/wp-content/uploads/2013/05/kmp-02.jpg" rel="lightbox[39066]" title="字符串匹配的KMP算法"><img title="字符串匹配的KMP算法" src="http://blog.jobbole.com/wp-content/uploads/2013/05/kmp-02.jpg" alt="字符串匹配的KMP算法"></a></p>
<p>这种算法不太容易理解，网上有很多<a href="http://www.google.com/search?q=Knuth-Morris-Pratt+algorithm">解释</a>，但读起来都很费劲。直到读到<a href="http://jakeboxer.com/blog/2009/12/13/the-knuth-morris-pratt-algorithm-in-my-own-words/">Jake Boxer</a>的文章，我才真正理解这种算法。下面，我用自己的语言，试图写一篇比较好懂的KMP算法解释。</p>
<p>1.</p>
<p><a href="http://blog.jobbole.com/wp-content/uploads/2013/05/kmp-03.png" rel="lightbox[39066]" title="字符串匹配的KMP算法"><img title="字符串匹配的KMP算法" src="http://blog.jobbole.com/wp-content/uploads/2013/05/kmp-03.png" alt="字符串匹配的KMP算法"></a></p>
<p>首先，字符串”BBC ABCDAB ABCDABCDABDE”的第一个字符与搜索词”ABCDABD”的第一个字符，进行比较。因为B与A不匹配，所以搜索词后移一位。</p>
<p>2.</p>
<p><a href="http://blog.jobbole.com/wp-content/uploads/2013/05/kmp-04.png" rel="lightbox[39066]" title="字符串匹配的KMP算法"><img title="字符串匹配的KMP算法" src="http://blog.jobbole.com/wp-content/uploads/2013/05/kmp-04.png" alt="字符串匹配的KMP算法"></a></p>
<p>因为B与A不匹配，搜索词再往后移。</p>
<p>3.</p>
<p><a href="http://blog.jobbole.com/wp-content/uploads/2013/05/kmp-05.png" rel="lightbox[39066]" title="字符串匹配的KMP算法"><img title="字符串匹配的KMP算法" src="http://blog.jobbole.com/wp-content/uploads/2013/05/kmp-05.png" alt="字符串匹配的KMP算法"></a></p>
<p>就这样，直到字符串有一个字符，与搜索词的第一个字符相同为止。</p>
<p>4.</p>
<p><a href="http://blog.jobbole.com/wp-content/uploads/2013/05/kmp-06.png" rel="lightbox[39066]" title="字符串匹配的KMP算法"><img title="字符串匹配的KMP算法" src="http://blog.jobbole.com/wp-content/uploads/2013/05/kmp-06.png" alt="字符串匹配的KMP算法"></a></p>
<p>接着比较字符串和搜索词的下一个字符，还是相同。</p>
<p>5.</p>
<p><a href="http://blog.jobbole.com/wp-content/uploads/2013/05/kmp-07.png" rel="lightbox[39066]" title="字符串匹配的KMP算法"><img title="字符串匹配的KMP算法" src="http://blog.jobbole.com/wp-content/uploads/2013/05/kmp-07.png" alt="字符串匹配的KMP算法"></a></p>
<p>直到字符串有一个字符，与搜索词对应的字符不相同为止。</p>
<p>6.</p>
<p><a href="http://blog.jobbole.com/wp-content/uploads/2013/05/kmp-08.png" rel="lightbox[39066]" title="字符串匹配的KMP算法"><img title="字符串匹配的KMP算法" src="http://blog.jobbole.com/wp-content/uploads/2013/05/kmp-08.png" alt="字符串匹配的KMP算法"></a></p>
<p>这时，最自然的反应是，将搜索词整个后移一位，再从头逐个比较。这样做虽然可行，但是效率很差，因为你要把”搜索位置”移到已经比较过的位置，重比一遍。</p>
<p>7.</p>
<p><a href="http://blog.jobbole.com/wp-content/uploads/2013/05/kmp-09.png" rel="lightbox[39066]" title="字符串匹配的KMP算法"><img title="字符串匹配的KMP算法" src="http://blog.jobbole.com/wp-content/uploads/2013/05/kmp-09.png" alt="字符串匹配的KMP算法"></a></p>
<p>一个基本事实是，当空格与D不匹配时，你其实知道前面六个字符是”ABCDAB”。KMP算法的想法是，设法利用这个已知信息，不要把”搜索位置”移回已经比较过的位置，继续把它向后移，这样就提高了效率。</p>
<p>8.</p>
<p><a href="http://blog.jobbole.com/wp-content/uploads/2013/05/kmp-10.png" rel="lightbox[39066]" title="字符串匹配的KMP算法"><img title="字符串匹配的KMP算法" src="http://blog.jobbole.com/wp-content/uploads/2013/05/kmp-10.png" alt="字符串匹配的KMP算法"></a></p>
<p>怎么做到这一点呢？可以针对搜索词，算出一张《部分匹配表》（Partial Match Table）。这张表是如何产生的，后面再介绍，这里只要会用就可以了。</p>
<p>9.</p>
<p><a href="http://blog.jobbole.com/wp-content/uploads/2013/05/kmp-11.png" rel="lightbox[39066]" title="字符串匹配的KMP算法"><img title="字符串匹配的KMP算法" src="http://blog.jobbole.com/wp-content/uploads/2013/05/kmp-11.png" alt="字符串匹配的KMP算法"></a></p>
<p>已知空格与D不匹配时，前面六个字符”ABCDAB”是匹配的。查表可知，最后一个匹配字符B对应的”部分匹配值”为2，因此按照下面的公式算出向后移动的位数：</p>
<blockquote><p>　　移动位数 = 已匹配的字符数 – 对应的部分匹配值</p></blockquote>
<p>因为 6 – 2 等于4，所以将搜索词向后移动4位。</p>
<p>10.</p>
<p><a href="http://blog.jobbole.com/wp-content/uploads/2013/05/kmp-12.png" rel="lightbox[39066]" title="字符串匹配的KMP算法"><img title="字符串匹配的KMP算法" src="http://blog.jobbole.com/wp-content/uploads/2013/05/kmp-12.png" alt="字符串匹配的KMP算法"></a></p>
<p>因为空格与Ｃ不匹配，搜索词还要继续往后移。这时，已匹配的字符数为2（”AB”），对应的”部分匹配值”为0。所以，移动位数 = 2 – 0，结果为 2，于是将搜索词向后移2位。</p>
<p>11.</p>
<p><a href="http://blog.jobbole.com/wp-content/uploads/2013/05/kmp-13.png" rel="lightbox[39066]" title="字符串匹配的KMP算法"><img title="字符串匹配的KMP算法" src="http://blog.jobbole.com/wp-content/uploads/2013/05/kmp-13.png" alt="字符串匹配的KMP算法"></a></p>
<p>因为空格与A不匹配，继续后移一位。</p>
<p>12.</p>
<p><a href="http://blog.jobbole.com/wp-content/uploads/2013/05/kmp-14.png" rel="lightbox[39066]" title="字符串匹配的KMP算法"><img title="字符串匹配的KMP算法" src="http://blog.jobbole.com/wp-content/uploads/2013/05/kmp-14.png" alt="字符串匹配的KMP算法"></a></p>
<p>逐位比较，直到发现C与D不匹配。于是，移动位数 = 6 – 2，继续将搜索词向后移动4位。</p>
<p>13.</p>
<p><a href="http://blog.jobbole.com/wp-content/uploads/2013/05/kmp-15.png" rel="lightbox[39066]" title="字符串匹配的KMP算法"><img title="字符串匹配的KMP算法" src="http://blog.jobbole.com/wp-content/uploads/2013/05/kmp-15.png" alt="字符串匹配的KMP算法"></a></p>
<p>逐位比较，直到搜索词的最后一位，发现完全匹配，于是搜索完成。如果还要继续搜索（即找出全部匹配），移动位数 = 7 – 0，再将搜索词向后移动7位，这里就不再重复了。</p>
<p>14.</p>
<p><a href="http://blog.jobbole.com/wp-content/uploads/2013/05/kmp-16.png" rel="lightbox[39066]" title="字符串匹配的KMP算法"><img title="字符串匹配的KMP算法" src="http://blog.jobbole.com/wp-content/uploads/2013/05/kmp-16.png" alt="字符串匹配的KMP算法"></a></p>
<p>下面介绍《部分匹配表》是如何产生的。</p>
<p>首先，要了解两个概念：”前缀”和”后缀”。 “前缀”指除了最后一个字符以外，一个字符串的全部头部组合；”后缀”指除了第一个字符以外，一个字符串的全部尾部组合。</p>
<p>15.</p>
<p style="text-align:center"><a href="http://blog.jobbole.com/wp-content/uploads/2013/05/kmp-17.png" rel="lightbox[39066]" title="字符串匹配的KMP算法"><img title="字符串匹配的KMP算法" src="http://blog.jobbole.com/wp-content/uploads/2013/05/kmp-17.png" alt="字符串匹配的KMP算法" width="581" height="170"></a></p>
<p>“部分匹配值”就是”前缀”和”后缀”的最长的共有元素的长度。以”ABCDABD”为例，</p>
<blockquote><p>　　－　”A”的前缀和后缀都为空集，共有元素的长度为0；</p>
<p>－　”AB”的前缀为[A]，后缀为[B]，共有元素的长度为0；</p>
<p>－　”ABC”的前缀为[A, AB]，后缀为[BC, C]，共有元素的长度0；</p>
<p>－　”ABCD”的前缀为[A, AB, ABC]，后缀为[BCD, CD, D]，共有元素的长度为0；</p>
<p>－　”ABCDA”的前缀为[A, AB, ABC, ABCD]，后缀为[BCDA, CDA, DA, A]，共有元素为”A”，长度为1；</p>
<p>－　”ABCDAB”的前缀为[A, AB, ABC, ABCD, ABCDA]，后缀为[BCDAB, CDAB, DAB, AB, B]，共有元素为”AB”，长度为2；</p>
<p>－　”ABCDABD”的前缀为[A, AB, ABC, ABCD, ABCDA, ABCDAB]，后缀为[BCDABD, CDABD, DABD, ABD, BD, D]，共有元素的长度为0。</p></blockquote>
<p>16.</p>
<p><a href="http://blog.jobbole.com/wp-content/uploads/2013/05/kmp-18.png" rel="lightbox[39066]" title="字符串匹配的KMP算法"><img title="字符串匹配的KMP算法" src="http://blog.jobbole.com/wp-content/uploads/2013/05/kmp-18.png" alt="字符串匹配的KMP算法"></a></p>
<p>“部分匹配”的实质是，有时候，字符串头部和尾部会有重复。比如，”ABCDAB”之中有两个”AB”，那么它的”部分匹配值”就是2（”AB”的长度）。搜索词移动的时候，第一个”AB”向后移动4位（字符串长度-部分匹配值），就可以来到第二个”AB”的位置。</p>
<p>（完）</p>
<h4>相关文章</h4>
<ul>
<li><a href="http://blog.jobbole.com/11745/"><img width="150" height="150" src="http://blog.jobbole.com/wp-content/uploads/2012/01/Visual-and-intuitive-feel-of-7-common-sorting-algorithms-150x150.gif" alt="视觉直观感受7种常用排序算法"></a><a href="http://blog.jobbole.com/11745/">视觉直观感受7种常用的排序算法</a></li>
<li><a href="http://blog.jobbole.com/39132/"><img width="150" height="140" src="http://blog.jobbole.com/wp-content/uploads/2013/05/15-150x140.png" alt="字符串匹配的Boyer-Moore算法"></a><a href="http://blog.jobbole.com/39132/">字符串匹配的Boyer-Moore算法</a></li>
<li><a href="http://blog.jobbole.com/16048/"><img src="http://www.jobbole.net/wp-content/uploads/2013/02/kmeans_thumb2-150x150.gifimgmax800" alt="K-均值聚类分析"></a><a href="http://blog.jobbole.com/16048/">K-均值聚类分析</a></li>
<li><a href="http://blog.jobbole.com/15713/"><img width="150" height="150" src="http://blog.jobbole.com/wp-content/uploads/2012/03/ranking-algorithm-based-on-users-vote01-150x150.jpg" alt="基于用户投票的排名算法（一）：Delicious和Hacker News"></a><a href="http://blog.jobbole.com/15713/">基于用户投票的排名算法：Delicious和Hacker News</a></li>
<li><a href="http://blog.jobbole.com/1310/"><img src="http://blog.jobbole.com/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/29.jpg" alt="八皇后问题算什么，来看看无穷皇后问题吧"></a><a href="http://blog.jobbole.com/1310/">八皇后问题算什么，来看看无穷皇后问题吧</a></li>
<li><a href="http://blog.jobbole.com/8563/"><img width="150" height="150" src="http://blog.jobbole.com/wp-content/uploads/2011/11/Dice-Portrait-algorith6-150x150.jpg" alt="骰子作画的算法"></a><a href="http://blog.jobbole.com/8563/">骰子作画的算法 </a></li>
<li><a href="http://blog.jobbole.com/15727/"><img width="150" height="150" src="http://blog.jobbole.com/wp-content/uploads/2012/03/ranking-algorithm-based-on-users-vote201-150x150.jpg" alt="基于用户投票的排名算法（二）：Reddit"></a><a href="http://blog.jobbole.com/15727/">基于用户投票的排名算法：Reddit</a></li>
<li><a href="http://blog.jobbole.com/20091/"><img width="150" height="150" src="http://blog.jobbole.com/wp-content/uploads/2012/05/Huffman-encoding-compression-algorithm1-150x150.png" alt="霍夫曼编码压缩算法"></a><a href="http://blog.jobbole.com/20091/">霍夫曼编码压缩算法</a></li>
<li><a href="http://blog.jobbole.com/16146/"><img width="150" height="60" src="http://blog.jobbole.com/wp-content/uploads/2012/03/Stack-Overflow11-150x60.png" alt="基于用户投票的排名算法：Stack Overflow"></a><a href="http://blog.jobbole.com/16146/">基于用户投票的排名算法：Stack Overflow</a></li>
<li><a href="http://blog.jobbole.com/23157/"><img width="111" height="45" src="http://blog.jobbole.com/wp-content/uploads/2012/07/CityBlockDistance_clip_image002.gif" alt="K-均值算法"></a><a href="http://blog.jobbole.com/23157/">K-均值算法</a></li>
</ul>
<p><a href="http://blog.jobbole.com/39066/">字符串匹配的KMP算法</a>，首发于<a href="http://blog.jobbole.com">博客 - 伯乐在线</a>。</p>