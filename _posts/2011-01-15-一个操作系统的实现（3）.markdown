---
layout: post
title:  "一个操作系统的实现（3）"
date:   2011-01-15 09:48:00
author: sylar_xj
categories: program
---

## 一个操作系统的实现（3）
### by sylar_xj
### at 2011-01-15 09:48:00
### original <http://www.cnblogs.com/SuperXJ/archive/2011/01/15/1936104.html>

<p><p align="center" style="text-align:center"><span> </span><b><span style="font-size:14.0pt;font-family:宋体;color:red">文件系统</span></b><b><span lang="EN-US" style="font-size:14.0pt;color:red"></span></b></p>
<p><span style="font-size:14.0pt;font-family:宋体">文件系统是建立在硬盘上的一个程序，所以由</span><span lang="EN-US" style="font-size:14.0pt">2</span><span style="font-size:14.0pt;font-family:宋体">部分组成：驱动和管理文件系统的进程</span><span lang="EN-US" style="font-size:14.0pt">FS</span><span style="font-size:14.0pt;font-family:宋体">。</span><span lang="EN-US" style="font-size:14.0pt"></span></p>
<p><b><span style="font-size:14.0pt;font-family:宋体;color:red">首先看一下驱动是如何工作的：</span></b><b><span lang="EN-US" style="font-size:14.0pt;color:red"></span></b></p>
<p><span style="font-family:宋体">通常，主板上面有</span><span lang="EN-US">2</span><span style="font-family:宋体">个</span><span lang="EN-US">IDE</span><span style="font-family:宋体">插槽，分别叫做</span><span lang="EN-US">IDE0/IDE1</span><span style="font-family:宋体">。每个</span><span lang="EN-US">IDE</span><span style="font-family:宋体">通道又可以接</span><span lang="EN-US">2</span><span style="font-family:宋体">个设备。<b><span style="background:lime">驱动进程的目的就是要隐藏硬件细节，向</span></b></span><b><span lang="EN-US" style="background:lime">FS</span></b><b><span style="font-family:宋体;background:lime">进程提供统一的接口</span></b><b><span style="font-family:宋体">，</span></b><span style="font-family:宋体">具体到这里，驱动为</span><span lang="EN-US">FS</span><span style="font-family:宋体">提供的接口就是打开，读取，写入，关闭等接口。下面是硬盘驱动程序：</span></p>
<p><span lang="EN-US">Task_hd()</span></p>
<p><span lang="EN-US">{</span></p>
<p><span lang="EN-US"><span>       </span>Recv(any,
msg) //</span><span style="font-family:宋体">接受任何进程传来的消息</span></p>
<p><span lang="EN-US"><span>       </span>If(msg
== DEV_OPEN) <span> </span>//</span><span style="font-family:宋体">如果是打开设备消息，则对硬盘寄存器做一些操作，比如获取硬盘信息等。</span></p>
<p><span lang="EN-US"><span>       </span>{</span></p>
<p><span lang="EN-US"><span>              </span>Out_byte(***)<span>   </span>//</span><span style="font-family:宋体">向硬盘寄存器写入数据</span></p>
<p><span lang="EN-US"><span>              </span>Recv(interrupt,
msg) //</span><span style="font-family:宋体">阻塞等待硬盘中断发生（表示需要的数据已经得到）</span></p>
<p><span lang="EN-US"><span>       </span>}</span></p>
<p><span lang="EN-US"><span>       </span>Send(src,
msg) //</span><span style="font-family:宋体">将获取的硬盘信息返回给发送者进程</span></p>
<p><span lang="EN-US">}</span></p>
<p><span style="font-family:宋体">上面的程序之添加了一个读取硬盘信息的消息，其他比如读取写入数据的消息和这个都是类似的。</span></p>
<p><span style="font-family:宋体">有一点需要注意，驱动程序</span><span lang="EN-US">task_hd</span><span style="font-family:宋体">在读取硬盘信息或者写入数据到硬盘时候的操作其实比上面的情况略微复杂，下面来看一个完成的调用过程：</span></p>
<p><span lang="EN-US">1 task_fs </span><span style="font-family:宋体">文件系统进程</span>
<span style="font-family:宋体">需要操作硬盘，给硬盘驱动进程</span><span lang="EN-US">task_hd</span><span style="font-family:宋体">（）</span> <span style="font-family:宋体">发送一个</span><span lang="EN-US">msg</span><span style="font-family:宋体">。</span></p>
<p><span lang="EN-US">2 </span><span style="font-family:宋体">假设这时，</span><span lang="EN-US">task_hd()</span><span style="font-family:宋体">处于空闲状态，即等待在</span><span lang="EN-US">recv(any,msg)</span><span style="font-family:宋体">处，则会接受这个消息，并向硬盘发送命令。</span></p>
<p><span lang="EN-US">3 </span><span style="font-family:宋体">硬盘完成工作后，会触发中断</span><span lang="EN-US">, Recv(interrupt, msg)</span><span style="font-family:宋体">返回，并给</span><span lang="EN-US">task_fs </span><span style="font-family:宋体">文件系统进程发送硬盘数据消息。</span></p>
<p><span lang="EN-US">4 task_fs </span><span style="font-family:宋体">文件系统进程</span>
<span style="font-family:宋体">得到</span><span lang="EN-US">CPU</span><span style="font-family:宋体">时间时，会收到硬盘数据消息。</span></p>
<p><span lang="EN-US"> </span></p>
<p><span lang="EN-US"> </span></p>
<p><span style="font-family:宋体">最简单的硬盘驱动看来是告一段落了。下面就可以在此基础上实现一个文件系统，首先需要明白一个<b><span style="color:red">文件系统的几个基本要素</span></b>：</span></p>
<p style="margin-left:18.0pt"><span lang="EN-US"><span>1）<span style="font:7.0pt &quot;Times New Roman&quot;"> 
</span></span></span><span style="font-family:宋体">有地方存放</span><span lang="EN-US">metadata</span><span style="font-family:宋体">（一般为硬盘第二个扇区，因为第一个扇区为引导分区）</span></p>
<p style="margin-left:18.0pt"><span lang="EN-US"><span>2）<span style="font:7.0pt &quot;Times New Roman&quot;"> 
</span></span></span><span style="font-family:宋体">有地方记录扇区使用情况（位图法）</span></p>
<p style="margin-left:18.0pt"><span lang="EN-US"><span>3）<span style="font:7.0pt &quot;Times New Roman&quot;"> 
</span></span></span><span style="font-family:宋体">有地方记录任一文件信息，包括文件名，修改时间，占用哪些扇区等（一个</span><span lang="EN-US">i-node</span><span style="font-family:宋体">数组，每个元素包含了文件名，属性等信息。同时也需要一个位图来表示</span><span lang="EN-US">i-node</span><span style="font-family:宋体">数组的使用情况）</span></p>
<p style="margin-left:18.0pt"><span lang="EN-US"><span>4）<span style="font:7.0pt &quot;Times New Roman&quot;"> 
</span></span></span><span style="font-family:宋体">文件索引</span></p>
<p><span style="font-family:宋体">以后就按照这个方法来组织硬盘结构，<b><span style="color:red">创建</span></b></span><b><span lang="EN-US" style="color:red">/</span></b><b><span style="font-family:宋体;color:red">删除</span><span lang="EN-US" style="color:red">/</span></b><b><span style="font-family:宋体;color:red">写入</span><span lang="EN-US" style="color:red">/</span></b><b><span style="font-family:宋体;color:red">读取文件不过是按照这种格式来组织硬盘而已</span></b></p>
<p><span lang="EN-US"> </span></p>
<p><span style="font-family:宋体">为了实现多系统在硬盘上共存，必须将硬盘划分为多个分区。每个系统占用一个分区。通过一个硬盘的引导扇区可以设置硬盘分区，硬盘最多可以分为</span><span lang="EN-US">4</span><span style="font-family:宋体">个物理分区。其中每个分区还可以继续划分为多个逻辑分区。</span></p>
<p><span style="font-family:宋体">一般</span><span lang="EN-US">Linux</span><span style="font-family:宋体">的设备分为主设备号和次设备号，主设备号表示不同的物理设备（硬盘，软盘）；次设备号表示物理设备上的分区。归纳一下就是：主设备号告诉</span><span lang="EN-US">OS</span><span style="font-family:宋体">用哪个驱动程序来处理，次设备号告诉驱动程序这是哪个设备。</span></p>
<p><span lang="EN-US"> </span></p>
<p><span style="font-family:宋体">下面看一下硬盘驱动读取和写入数据的过程：</span></p>
<p><span lang="EN-US">1 </span><span style="font-family:宋体">首先还是一样</span><span lang="EN-US">task_fs</span><span style="font-family:宋体">（）</span> <span style="font-family:宋体">文件系统进程通过前面实现的</span><span lang="EN-US">IPC</span><span style="font-family:宋体">机制将读取（写入）硬盘数据消息发送（即复制）给</span><span lang="EN-US">task_hd()</span></p>
<p><span lang="EN-US">2 task_hd()</span></p>
<p><span lang="EN-US">{</span></p>
<p><span lang="EN-US"><span>       </span>…</span></p>
<p><span lang="EN-US"><span>       </span>Case:DEV_OPEN
//</span><span style="font-family:宋体">如果某用户进程需要打开一个文件</span></p>
<p><span lang="EN-US"><span>              </span></span><span style="font-family:宋体">为文件内容分配扇区</span></p>
<p><span lang="EN-US"><span>              </span></span><span style="font-family:宋体">分配一个</span><span lang="EN-US">i-node</span></p>
<p><span lang="EN-US"><span>       </span><span>       </span></span><span style="font-family:宋体">分配</span><span lang="EN-US">inode-map</span></p>
<p><span lang="EN-US"><span>              </span></span><span style="font-family:宋体">分配</span><span lang="EN-US">sector-map</span></p>
<p><span lang="EN-US"><span>              </span></span><span style="font-family:宋体">创建文件索引</span></p>
<p><span lang="EN-US"> </span></p>
<p><span lang="EN-US"><span>       </span>Case:
DEV_READ //</span><span style="font-family:宋体">读文件</span></p>
<p><span lang="EN-US"><span>       </span><span>       </span></span><span style="font-family:宋体">首先找到将要读取的文件的文件描述符和位置</span></p>
<p><span lang="EN-US"><span>              </span></span><span style="font-family:宋体">根据文件描述符通过驱动获取的该文件在硬盘的具体位置（即</span><span lang="EN-US">i-node</span><span style="font-family:宋体">）。</span></p>
<p><span lang="EN-US"><span>              </span></span><span style="font-family:宋体">将硬盘内容复制到缓存</span></p>
<p><span lang="EN-US">}</span></p>
<p><span style="font-family:宋体">这一部分写的不是很清楚，理一下思路，我的理解就是硬盘首先有一个文件系统结构（</span><span lang="EN-US">fat32,ntfs,ext2</span><span style="font-family:宋体">等等），相对于的就有一个硬盘驱动程序用来管理硬盘使用的文件系统并对上层提供文件操作的接口。上层用户需要读取硬盘数据的时候，首先将消息发送给</span><span lang="EN-US">FS</span><span style="font-family:宋体">，然后</span><span lang="EN-US">FS</span><span style="font-family:宋体">会将该消息发送给硬盘驱动程序，硬盘驱动程序根据硬盘所使用的文件格式来找到相应的数据并吧数据复制到</span><span lang="EN-US">OS</span><span style="font-family:宋体">提供的一个缓存中拱用户进程使用。</span></p>
<p><span lang="EN-US"> </span></p>
<p><span lang="EN-US"> </span></p>
<p><span lang="EN-US"><span>                                                        </span></span><b><span style="font-family:宋体;color:red">内存管理</span><span lang="EN-US" style="color:red"></span></b></p>
<p><span style="font-family:宋体">到了现在，还没有完成了就是和内存相关的一些东西，首先看看如何创建一个进程（</span><span lang="EN-US">fork</span><span style="font-family:宋体">），每个</span><span lang="EN-US">shell</span><span style="font-family:宋体">就是一个子进程。</span></p>
<p><span style="font-family:宋体">一个新的进程需要的条件有：</span></p>
<p><span lang="EN-US">1 </span><span style="font-family:宋体">代码，数据，堆栈（从父进程复制过来）</span></p>
<p><span lang="EN-US">2 </span><span style="font-family:宋体">在进程表中占据一个位置</span></p>
<p><span lang="EN-US">3 </span><span style="font-family:宋体">在</span><span lang="EN-US">GDT</span><span style="font-family:宋体">中有一个位置，指向了该进程对应的</span><span lang="EN-US">LTD</span><span style="font-family:宋体">，也就是指向了进程的数据和堆栈等</span></p>
<p><span lang="EN-US"> </span></p>
<p><span style="font-family:宋体">看一下</span><span lang="EN-US">linux</span><span style="font-family:宋体">中</span><span lang="EN-US">fork</span><span style="font-family:宋体">用法：</span></p>
<p><span lang="EN-US">First_proc()</span></p>
<p><span lang="EN-US">{</span></p>
<p><span lang="EN-US"><span>       </span>Int
id = fork();</span></p>
<p><span lang="EN-US"><span>       </span>If(pid
!= 0) //</span><span style="font-family:宋体">这是父进程</span></p>
<p><span lang="EN-US"><span>       </span>Else
</span><span style="font-family:宋体">子进程运行</span></p>
<p><span lang="EN-US">}</span></p>
<p><span style="font-family:宋体">父子进程公用一个代码段</span></p>
<p><span lang="EN-US"> </span></p>
<p><span style="font-family:宋体">可以看到，内存管理主要需要在</span><span lang="EN-US">OS</span><span style="font-family:宋体">中增加</span><span lang="EN-US">2</span><span style="font-family:宋体">个进程，分别为所有用户的祖先进程（</span><span lang="EN-US">INIT0</span><span style="font-family:宋体">）和</span><span lang="EN-US">MM</span><span style="font-family:宋体">进程（</span><span lang="EN-US">memory Management process</span><span style="font-family:宋体">）。</span></p>
<p><span lang="EN-US">Init0</span><span style="font-family:宋体">进程有些特殊，首先一般的进程的虚拟内存空间对用户来说是</span><span lang="EN-US">0-4GB</span><span style="font-family:宋体">，但是</span><span lang="EN-US">init0</span><span style="font-family:宋体">的内存在这里大致等于内核占用内存的大小。</span></p>
<p><span lang="EN-US" style="color:red">Fork</span><span style="font-family:宋体;color:red">的大概步骤如下</span><span style="font-family:宋体">：</span></p>
<p><span lang="EN-US">1 </span><span style="font-family:宋体">用户调用</span><span lang="EN-US">fork</span></p>
<p><span lang="EN-US">2 </span><span style="font-family:宋体">通过消息机制发送</span><span lang="EN-US">FORK</span><span style="font-family:宋体">消息给</span><span lang="EN-US">MM</span></p>
<p><span lang="EN-US">3 MM</span><span style="font-family:宋体">主循环完成创建进程的工作，主要流程为：找一个空闲的进程表项作为新进程的进程表项；读取父进程的表示内存占用的</span><span lang="EN-US">LDT</span><span style="font-family:宋体">，从中取出父进程的代码，数据和堆栈段内存首地址和范围。</span></p>
<p><span lang="EN-US">3 </span><span style="font-family:宋体">根据父进程的内存占用情况，分配相同大小的内存给子进程。（分配内存需要注意的就是内存不要重复使用），然后将父进程的内存中的内容复制给子进程。</span></p>
<p><span lang="EN-US">4 </span><span style="font-family:宋体">如果父进程有打开文件，要给</span><span lang="EN-US">FS</span><span style="font-family:宋体">进程发送一个消息来处理父子进程间的共享文件。（</span><span lang="EN-US">FS</span><span style="font-family:宋体">利用计数器实现）</span></p>
<p><span lang="EN-US"> </span></p>
<p><span style="font-family:宋体">销毁一个进程也差不多，唯一需要注意的就是</span><span lang="EN-US">MM</span><span style="font-family:宋体">在销毁一个进程的时候，需要首先销毁他的所有子进程。</span></p>
<p><span lang="EN-US"> </span></p>
<p><span lang="EN-US"> </span></p>
<p><span lang="EN-US"> </span></p>
<p><span style="font-family:宋体">接下来说明一下几个概念，大多是复制过来的：</span></p>
<p style="text-indent:21.0pt"><b><span lang="EN-US" style="color:red">CRT</span></b><span lang="EN-US">:</span><span style="font-family:宋体">一个应用程序只能调用</span><span lang="EN-US">2</span><span style="font-family:宋体">种东西：属于自己的函数，以及中断（系统调用就是软中断）。但是实际上，</span><span lang="EN-US">OS</span><span style="font-family:宋体">还为普通应用程序提供了一个</span><span lang="EN-US">CRT</span><span style="font-family:宋体">，这个库里面有已经编译好的库函数代码。用户应用程序可以很方便的使用</span><span lang="EN-US">CRT</span><span style="font-family:宋体">，而免去了很多中断调用。</span></p>
<p style="text-indent:21.0pt"><span lang="EN-US"> </span></p>
<p><span lang="EN-US"><span>       </span><b><span style="color:red">OS</span></b></span><b><span style="font-family:宋体;color:red">自带应用程序</span></b><span style="font-family:宋体">：每个</span><span lang="EN-US">OS</span><span style="font-family:宋体">都可以附带和安装很多应用程序，简单来说目的就是为了把应用程序从光盘中安装到</span><span lang="EN-US">OS</span><span style="font-family:宋体">认识的硬盘中并知道位置，这样在需要用时，</span><span lang="EN-US">OS</span><span style="font-family:宋体">可以自己找到该应用程序。例如，一个最简单的应用程序：</span></p>
<p><span lang="EN-US">_start</span></p>
<p><span lang="EN-US">Main(){printf(***);}</span></p>
<p><span style="font-family:宋体">把他安装到</span><span lang="EN-US">OS</span><span style="font-family:宋体">中的步骤大致如下：</span></p>
<p><span lang="EN-US">1 </span><span style="font-family:宋体">编译连接该应用程序并打包（设为</span><span lang="EN-US">inst.tar</span><span style="font-family:宋体">）</span></p>
<p><span lang="EN-US">2 </span><span style="font-family:宋体">将打包的应用程序二进制文件写入</span><span lang="EN-US">OS</span><span style="font-family:宋体">安装盘的某扇区（设该扇区号为</span><span lang="EN-US">X</span><span style="font-family:宋体">）。</span></p>
<p><span lang="EN-US">3 </span><span style="font-family:宋体">启动系统时，在</span><span lang="EN-US">mkfs</span><span style="font-family:宋体">（）创建文件系统时建立一个新的文件</span><span lang="EN-US">cmd.tar</span><span style="font-family:宋体">，他对应的起始文件扇区号为</span><span lang="EN-US">X</span><span style="font-family:宋体">。</span></p>
<p><span lang="EN-US">4 </span><span style="font-family:宋体">在</span><span lang="EN-US">init</span><span style="font-family:宋体">进程中，将</span><span lang="EN-US">cmd.tar</span><span style="font-family:宋体">解压，将其中包含的文件（即为</span><span lang="EN-US">inst.tar</span><span style="font-family:宋体">）存入文件系统。</span></p>
<p><span lang="EN-US"> </span></p>
<p><span lang="EN-US"> </span></p>
<p><span lang="EN-US" style="color:red">Exec</span><span style="font-family:宋体">才等同于</span><span lang="EN-US">windows</span><span style="font-family:宋体">里面的</span><span lang="EN-US">CreartProcess.</span></p>
<p><span lang="EN-US">First_proc()</span></p>
<p><span lang="EN-US">{</span></p>
<p><span lang="EN-US"><span>       </span>Int
id = fork();</span></p>
<p><span lang="EN-US"><span>       </span>If(pid
!= 0) //</span><span style="font-family:宋体">这是父进程</span></p>
<p><span lang="EN-US"><span>       </span>Else
</span><span style="font-family:宋体">子进程运行</span></p>
<p><span lang="EN-US"><span>       </span>{</span></p>
<p><span lang="EN-US"><span>              </span>Exec()<span>   </span>//</span><span style="font-family:宋体">参数即为新的代码段</span></p>
<p><span lang="EN-US"><span>       </span>}</span></p>
<p><span lang="EN-US">}</span></p>
<p><span lang="EN-US"> </span></p>
<p><b><span lang="EN-US" style="color:red">Exec</span></b><b><span style="font-family:宋体;color:red">的执行流程：</span><span lang="EN-US" style="color:red"></span></b></p>
<p><b><span lang="EN-US">1 </span></b><b><span style="font-family:宋体">检查参数个数并将它们依次存放到某连续内存处</span><span lang="EN-US"></span></b></p>
<p><b><span lang="EN-US">2 </span></b><b><span style="font-family:宋体">向</span><span lang="EN-US">MM</span></b><b><span style="font-family:宋体">发送消息，消息体就是上面存放参数的连续内存。</span><span lang="EN-US"></span></b></p>
<p><b><span lang="EN-US">3 MM</span></b><b><span style="font-family:宋体">消息接收到这个消息，将参数取出（由于</span><span lang="EN-US">exec</span></b><b><span style="font-family:宋体">所在进程和</span><span lang="EN-US">MM</span></b><b><span style="font-family:宋体">不是同一个进程，所有他们的虚拟地址不一样，</span><span lang="EN-US">MM</span></b><b><span style="font-family:宋体">需要通过物理地址复制的方式来获取消息）</span> <span lang="EN-US"></span></b></p>
<p><b><span lang="EN-US">4 </span></b><b><span style="font-family:宋体">根据</span><span lang="EN-US">exec</span></b><b><span style="font-family:宋体">传来的参数，</span><span lang="EN-US">MM</span></b><b><span style="font-family:宋体">将要执行文件复制到自己的缓冲区中</span><span lang="EN-US"></span></b></p>
<p><b><span lang="EN-US">5 </span></b><b><span style="font-family:宋体">被执行文件是</span><span lang="EN-US">elf</span></b><b><span style="font-family:宋体">格式，</span><span lang="EN-US">MM</span></b><b><span style="font-family:宋体">根据格式将被执行文件的各个段放置到合适的空闲内存中。</span><span lang="EN-US"></span></b></p>
<p><b><span lang="EN-US">6 </span></b><b><span style="font-family:宋体">建立栈</span><span lang="EN-US"></span></b></p>
<p><b><span style="font-family:宋体"><br></span></b></p>
<p><b><span style="font-family:宋体"><br></span></b></p>
<p><span face="宋体" style="font-family:宋体"><b>OK all done with simplest mode.. </b></span></p>
<p><span face="宋体" style="font-family:宋体"><b>　　　　　　　　　　　　　　2011.1.15 AM8:45  </b></span></p>
<p><span face="宋体" style="font-family:宋体"><b>　　　　　　　　i love joliet - teddy_xiong  in ZNUFE</b></span></p><img src="http://www.cnblogs.com/SuperXJ/aggbug/1936104.html?type=1" width="1" height="1" alt=""><p>作者: <a href="http://www.cnblogs.com/SuperXJ/">sylar_xj</a> 发表于 2011-01-15 09:48 <a href="http://www.cnblogs.com/SuperXJ/archive/2011/01/15/1936104.html">原文链接</a></p><p>评论: 3　<a href="http://www.cnblogs.com/SuperXJ/archive/2011/01/15/1936104.html#pagedcomment">查看评论</a>　<a href="http://www.cnblogs.com/SuperXJ/archive/2011/01/15/1936104.html#commentform">发表评论</a></p><hr><p>最新新闻：<br>· <a href="http://news.cnblogs.com/n/88418/">周鸿祎：中国互联网未老先衰</a><span style="color:gray">(2011-01-15 20:17)</span><br>· <a href="http://news.cnblogs.com/n/88416/">业内人士热议Groupon腾讯合作：利弊兼具</a><span style="color:gray">(2011-01-15 18:41)</span><br>· <a href="http://news.cnblogs.com/n/88415/">李开复证实豌豆荚获二轮融资 已搬离创新工场</a><span style="color:gray">(2011-01-15 18:38)</span><br>· <a href="http://news.cnblogs.com/n/88414/">谷歌禁止伪原创内容网站参与AdSense计划</a><span style="color:gray">(2011-01-15 18:34)</span><br>· <a href="http://news.cnblogs.com/n/88413/">研究称电子书因“太容易”而读过即忘</a><span style="color:gray">(2011-01-15 17:46)</span><br></p><p>编辑推荐：<a href="http://www.cnblogs.com/JeffreyZhao/archive/2011/01/14/be-clear-with-language-spec-and-platform-implementation-dotnet-cross-platform.html">分清“语言/规范”以及“平台/实现”，以及跨平台.NET开发</a><br></p><p>网站导航：<a href="http://www.cnblogs.com">博客园首页</a>  <a href="http://home.cnblogs.com/">我的园子</a>  <a href="http://news.cnblogs.com">新闻</a>  <a href="http://home.cnblogs.com/ing/">闪存</a>  <a href="http://home.cnblogs.com/group/">小组</a>  <a href="http://space.cnblogs.com/q/">博问</a>  <a href="http://kb.cnblogs.com">知识库</a></p></p>