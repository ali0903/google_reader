---
layout: post
title:  "C语言趣味题目"
date:   2010-05-31 22:15:48
author: admin
categories: program
---

## C语言趣味题目
### by admin
### at 2010-05-31 22:15:48
### original <http://sunxiunan.com/?p=1647>

<p><a title="http://stevenkobes.com/ctest.html" href="http://stevenkobes.com/ctest.html">http://stevenkobes.com/ctest.html</a></p>
<p>在这个网站上发现一套很有趣的C语言测试题，如果你招聘C语言相关开发人员，或者正在学习C语言，很值得做一做。</p>
<p>如果没有做，下面内容暂时不要看，最好自己先完成一遍。</p>
<p>—————————————–</p>
<p><a href="http://sunxiunan.com/wp-content/uploads/2010/05/image1.png"><img style="display:inline;border-width:0px" title="image" src="http://sunxiunan.com/wp-content/uploads/2010/05/image_thumb1.png" border="0" alt="image" width="372" height="488"></a></p>
<p>——————————————–</p>
<p>OK，假设你做的答案没有完全正确，那你可以继续看下去了，否则，后面内容对你来说就是小菜一碟，不值得看。</p>
<p>——————————————–</p>
<p>第一题：</p>
<p>#include &lt;setjmp.h&gt;<br>
static jmp_buf buf;<br>
int main(void)<br>
{<br>
volatile int b = 3;<br>
if (setjmp(buf) != 0)<br>
{<br>
printf(“%d\n”, b);<br>
exit(0);<br>
}<br>
b = 5;<br>
longjmp(buf, 1);<br>
}</p>
<p>输出结果为A）3      B）5     C）0      D）都不是</p>
<p>答案为B，也就是输出5。</p>
<p>关键点在于理解setjmp以及longjmp，（<a title="http://en.wikipedia.org/wiki/Setjmp.h" href="http://en.wikipedia.org/wiki/Setjmp.h">http://en.wikipedia.org/wiki/Setjmp.h</a> ）第一次运行到setjmp，会设置jmp_buf，然后返回0。当调用longjmp时，会把longjmp里面的非0值作为setjmp的返回值返回（如果longjmp的value参数为0，setjmp恢复后返回1，也就是当恢复到setjmp存储点的时候，setjmp一定不会返回0）。</p>
<p>setjmp-longjmp组合的用处类似于游戏中的存盘读盘功能，经常被用于类似C++的异常恢复操作。</p>
<p>第二题：</p>
<p>struct node<br>
{<br>
int a;      int b;      int c;<br>
};<br>
struct node s = { 3, 5, 6 };<br>
struct node *pt = &amp;s;<br>
printf(“%d\n”, *(int*)pt);<br>
返回结果为3，这个算是比较简单，pt为指向结构s的指针，然后将pt转换为int指针，进行dereference，取出一个int值，那就是结构中第一个数。</p>
<p>我们将题目改动一下，如下代码</p>
<p>struct node<br>
{<br>
char a;   char b;  short c;   int d;<br>
};<br>
struct node s = { 3, 5, 6, 99 };<br>
struct node *pt = &amp;s;</p>
<p>printf(“%X\n”, *(int*)pt);<br>
需要注意的是一般32位C编译器都认为char是8bit，short是16bit，int为32bit，所以node在内存中应该正好是对齐的，也就是abc这几个成员之间没有空隙。最终结果应该为60503，如果不是，欢迎你告诉我你具体的编译环境以及硬件配置。</p>
<p>第三题：</p>
<p>int foo(int x, int n){<br>
int val = 1;<br>
if (n &gt; 0)<br>
{<br>
if (n % 2 == 1) val *= x;<br>
val *= foo(x * x, n / 2);<br>
}<br>
return val;<br>
}</p>
<p>这道题其实最简单的办法就是在纸上做一个推演计算，一步一步跑一下，就能得到答案了，这里面没有任何复杂的C语言概念。</p>
<p>第四题：</p>
<p>int a[5] = { 1, 2, 3, 4, 5 };<br>
int *ptr = (int*)(&amp;a + 1);<br>
printf(“%d %d\n”, *(a + 1), *(ptr – 1));<br>
这道题考的其实是指向数组的指针，&amp;a是一个隐式的指向int [5]数组的指针，它和int* ptr是不一样的，如果真要定义这个指针，应该是int (*ptoa)[5]。所以ptoa每一次加一操作都相当于跨越int a[5]的内存步长（也就是5个int长度），也就是说&amp;a + 1其实就是指向了a[5]这个位置，实际上内存里面这个位置是非法的，但是对ptr的强制转换导致了后面ptr-1的内存步长改为了1个int长度，所以ptr-1实际指向了a[4]。至于*(a+1)没什么好说的，值就是2。</p>
<p>第五题：</p>
<p>void foo(int[][3]);<br>
int main(void)<br>
{<br>
int a[3][3] = { {1, 2, 3}, {4, 5, 6}, {7, 8, 9} };<br>
foo(a);<br>
printf(“%d\n”, a[2][1]);<br>
return 0;<br>
}</p>
<p>void foo(int b[][3])<br>
{<br>
++b;<br>
b[1][1] = 9;<br>
}</p>
<p>其实和前一题有异曲同工之妙，++b的步长实际上是3个int，也就是++b运算以后，b指向{4,5,6}这个数组的开始，而b[1]就是{7,8,9}, b[1][1]实际上就是8这个值也就是main函数中的a[2][1].</p>
<p>第六题：</p>
<p>int a, b, c, d;<br>
a = 3;<br>
b = 5;<br>
c = a, b;<br>
d = (a, b);</p>
<p>printf(“c=%d  “, c);<br>
printf(“d=%d\n”, d);</p>
<p>这个其实有两个C语言知识点，一个是等号操作符优先级高于逗号操作符，另一个是逗号操作符相当于运算逗号前半部后半部的表达式，然后返回后半部表达式的值。所以c等于a（先计算等号），而d等于b（逗号表达式返回b）。</p>
<p>第七题：</p>
<p>int a[][3] = {1, 2, 3, 4, 5, 6};<br>
int (*ptr)[3] = a;</p>
<p>printf(“%d %d “, (*ptr)[1], (*ptr)[2]);</p>
<p>++ptr;<br>
printf(“%d %d\n”, (*ptr)[1], (*ptr)[2]);</p>
<p>依然是2维数组相关题目，ptr为指向int [3]数组的指针，首先指向a[0]，所以(*ptr)[1], (*ptr)[2]就是a[0][1], a[0][2].然后++ptr，相当于ptr指向了a[1]，这时得到的是a[1][1]，a[1][2]，所以结果就是2，3, 5, 6。</p>
<p>第八题：</p>
<p>int *f1(void)<br>
{<br>
int x = 10;   return &amp;x;<br>
}<br>
int *f2(void)<br>
{<br>
int *ptr;   *ptr = 10;   return ptr;<br>
}<br>
int *f3(void)<br>
{<br>
int *ptr;   ptr = malloc(sizeof *ptr);   return ptr;<br>
}</p>
<p>这里考的是返回一个指针的问题，一般来说返回指针的函数，里面一定有malloc之类的内存申请操作，传入指针类型，则是对指针指向的内容做修改。如果想修改指针本身，那就要传入指针的指针。</p>
<p>第九题：</p>
<p>int i = 3;   int j;<br>
j = sizeof(++i + ++i);<br>
printf(“i=%d j=%d\n”, i, j);<br>
这道题考的内容其实就是sizeof，我在这篇文章里提到过<a title="http://sunxiunan.com/?p=1637" href="http://sunxiunan.com/?p=1637">http://sunxiunan.com/?p=1637</a> sizeof如果计算表达式，那么表达式是不会做计算的，也就是不管加加减减，sizeof就是针对i计算大小。在32位机器上，这个j应该为4。</p>
<p>我将代码扩展了一下，看看大家能不能想到结果：</p>
<p>short m;    int n;     double dn;<br>
int j = sizeof ( m + n);<br>
int k = sizeof ( n + n);<br>
int l = sizeof ( m);<br>
int l2 = sizeof (m * m);<br>
int l3 = sizeof (m + dn);<br>
int l4 = sizeof (m + m);</p>
<p>第十题：</p>
<p>void f1(int*, int);<br>
void (*p[2])(int*, int);<br>
int main(void)<br>
{<br>
int a = 3;<br>
int b = 5;<br>
p[0] = f1;<br>
p[1] = f1;<br>
p[0](&amp;a, b);<br>
printf(“%d %d “, a, b);<br>
p[1](&amp;a, b);<br>
printf(“%d %d\n”, a, b);<br>
return 0;<br>
}</p>
<p>void f1(int *p, int q)<br>
{<br>
int tmp = *p;   *p = q;   q = tmp;<br>
}</p>
<p>函数指针的数组p勉强算是一个知识点，另外一个知识点就是第八题提到的，对于int q这样的参数，是不会修改其内容的。而*p则可修改p指向的内容。</p>
<p>第十一题：</p>
<p>void e(int);<br>
int main(void)<br>
{<br>
int a = 3;<br>
e(a);</p>
<p>putchar(‘\n’);<br>
return 0;<br>
}</p>
<p>void e(int n)<br>
{<br>
if (n &gt; 0)<br>
{<br>
e(–n);<br>
printf(“%d “, n);<br>
e(–n);<br>
}<br>
}</p>
<p>这道题自己debug一下就完全明白了，主要知识点就是递归调用，另外前置后置自减操作的返回值问题。</p>
<p>第十二题：</p>
<p>typedef int (*test)(float*, float*);<br>
test tmp;</p>
<p>也是经常出现的一类题，对复杂的指针定义做解析，实际上K&amp;R里面（5.12）也有介绍该如何解读。不熟悉的朋友可以试着练习练习标准库中的bsearch，qsort以及signal函数。</p>
<p>第十三题：</p>
<p>char p;<br>
char buf[10] = {1, 2, 3, 4, 5, 6, 9, 8};<br>
p = (buf + 1)[5];<br>
printf(“%d\n”, p);</p>
<p>这道题我在<a title="http://sunxiunan.com/?p=1637" href="http://sunxiunan.com/?p=1637">http://sunxiunan.com/?p=1637</a> 也提到过相关知识点，也就是p实际指向*(buf + 1 + 5)，写的更诡异一些就是p=5[buf +1];也是同样结果。</p>
<p>第十四题：</p>
<p>类似十三题，也是把数组弄得有些诡异，(p += sizeof(int))[-1];相当于*(p + sizeof(int) + (-1))。</p>
<p>第十五题：</p>
<p>int ripple(int n, …)<br>
{<br>
int i, j, k;<br>
va_list p;<br>
k = 0;<br>
j = 1;<br>
va_start(p, n);<br>
for (; j &lt; n; ++j)<br>
{<br>
i = va_arg(p, int);<br>
for (; i; i &amp;= i – 1)<br>
++k;<br>
}<br>
return k;<br>
}</p>
<p>int main(void)<br>
{<br>
printf(“%d\n”, ripple(3, 5, 7));<br>
return 0;<br>
}</p>
<p>这道题也是两个知识点，一个是可变参数函数定义以及如何实现，va_arg会把5，7依次取出来。另一个知识点是i &amp;= i-1，实际上是计算了i二进制形式中1的个数，每次计算都会消减掉最低有效位上的1。比如7二进制表示为111。i &amp;= i –1的计算结果依次为110，100, 000 （也就是0）。在hacker’s Delights这本书里介绍了很多类似技巧。</p>
<p>第十六题：</p>
<p>int counter(int i)<br>
{<br>
static int count = 0;<br>
count = count + i;<br>
return count;<br>
}</p>
<p>int main(void)<br>
{<br>
int i, j;<br>
for (i = 0; i &lt;= 5; i++)  j = counter(i);<br>
printf(“%d\n”, j);<br>
return 0;<br>
}</p>
<p>只要了解静态局部变量的真正内涵，这道题就是小菜一碟碟碟碟碟碟。。。。。。</p>