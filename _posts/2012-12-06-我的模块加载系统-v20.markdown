---
layout: post
title:  "我的模块加载系统 v20"
date:   2012-12-06 10:02:00
author: 司徒正美
categories: program
---

## 我的模块加载系统 v20
### by 司徒正美
### at 2012-12-06 10:02:00
### original <http://www.cnblogs.com/rubylouvre/archive/2012/12/06/2803395.html>

<p>mass Framework的加载器v20发布，本版本的更新如下：</p><ul>   <li>参考requireJS的实现，去掉iframe的加载机制</li>   <li>内部install方法改名更语义的fireFactory</li>   <li>最后回调的临时模块名的前缀由"@cb"改成"cb"，防止在旧式IE使用userData时出错</li></ul><p>从v19起，define与require已经完全独立成全局函数，不再依赖于$了，成为一个纯粹的加载器。</p><p>示例，加载一个UI组件的模块：</p><br>        &lt;script src=&quot;mass.js&quot;&gt;  &lt;/script&gt;<br>        &lt;script &gt;<br>            require("menu,ready",function($){<br>                $('ul.sf-menu').menu();<br>            });<br>        &lt;/script&gt;<br><p>它在firebug中打印调试信息如下：</p><div><img src="http://images.cnblogs.com/cnblogs_com/rubylouvre/199042/o_massv20ff.jpg"></div><p>可以看到它是非常易于调试的。如果想屏蔽它们，将$.config.level = 8就行了。</p><p>它的加载请求图如下，可以看到它是货真价实的并行加载器。如果一个模块的直接依赖不超过浏览器的最大请求数，它会同时发出请求进行处理。</p><div><img src="http://images.cnblogs.com/cnblogs_com/rubylouvre/199042/o_massv20net.jpg"></div><p>IE10的情况</p><div><img src="http://images.cnblogs.com/cnblogs_com/rubylouvre/199042/r_massv20ie10.jpg"></div><br>void function( global, DOC ){<br>    var $$ = global.$//保存已有同名变量<br>    var rmakeid = /(#.+|\W)/g;<br>    var NsKey = DOC.URL.replace( rmakeid,"")<br>    var NsVal = global[ NsKey ];//公共命名空间<br>    var W3C   = DOC.dispatchEvent //w3c事件模型<br>    var HTML  = DOC.documentElement;<br>    var HEAD  = DOC.head || DOC.getElementsByTagName( "head" )[0]<br>    var loadings = [];//正在加载中的模块列表<br>    var stack = []; //储存需要绑定ID与factory对应关系的模块（标准浏览器下，先parse的script节点会先onload）<br>    var mass = 1;//当前框架的版本号<br>    var postfix = "";//用于强制别名<br>    var cbi = 1e5 ; //用于生成回调函数的名字<br>    var all = "lang_fix,lang,support,class,flow,query,data,node,attr,css_fix,css,event_fix,event,ajax,fx"<br>    var class2type = {<br>        "[object HTMLDocument]"   : "Document",<br>        "[object HTMLCollection]" : "NodeList",<br>        "[object StaticNodeList]" : "NodeList",<br>        "[object IXMLDOMNodeList]": "NodeList",<br>        "[object DOMWindow]"      : "Window"  ,<br>        "[object global]"         : "Window"  ,<br>        "null"                    : "Null"    ,<br>        "NaN"                     : "NaN"     ,<br>        "undefined"               : "Undefined"<br>    }<br>    var toString = class2type.toString, basepath<br>    function $( expr, context ){//新版本的基石<br>        if( $.type( expr,"Function" ) ){ //注意在safari下,typeof nodeList的类型为function,因此必须使用$.type<br>            return  $.require( all+",ready", expr );<br>        }else{<br>            if( !$.fn )<br>                throw "node module is required!"<br>            return new $.fn.init( expr, context );<br>        }<br>    }<br>    //多版本共存<br>    if( typeof NsVal !== "function"){<br>        NsVal = $;//公用命名空间对象<br>        NsVal.uuid = 1;<br>    }<br>    if(NsVal.mass !== mass  ){<br>        NsVal[ mass ] = $;//保存当前版本的命名空间对象到公用命名空间对象上<br>        if(NsVal.mass || ($$ &amp;&amp; $$.mass == null)) {<br>            postfix = ( mass + "" ).replace(/\D/g, "" ) ;//是否强制使用多库共存<br>        }<br>    }else{<br>        return;<br>    }<br>    /**<br>     * 糅杂，为一个对象添加更多成员<br>     * @param {Object} receiver 接受者<br>     * @param {Object} supplier 提供者<br>     * @return  {Object} 目标对象<br>     */<br>    var has = Object.prototype.hasOwnProperty<br>    function mix( receiver, supplier ){<br>        var args = Array.apply([], arguments ),i = 1, key,//如果最后参数是布尔，判定是否覆写同名属性<br>        ride = typeof args[args.length - 1] == "boolean" ? args.pop() : true;<br>        if(args.length === 1){//处理$.mix(hash)的情形<br>            receiver = !this.window ? this : {} ;<br>            i = 0;<br>        }<br>        while((supplier = args[i++])){<br>            for ( key in supplier ) {//允许对象糅杂，用户保证都是对象<br>                if ( has.call(supplier,key) &amp;&amp; (ride || !(key in receiver))) {<br>                    receiver[ key ] = supplier[ key ];<br>                }<br>            }<br>        }<br>        return receiver;<br>    }<br><br>    mix( $, {//为此版本的命名空间对象添加成员<br>        html:  HTML,<br>        head:  HEAD,<br>        mix:   mix,<br>        rword: /[^, ]+/g,<br>        mass:  mass,//大家都爱用类库的名字储存版本号，我也跟风了<br>        "@bind": W3C ? "addEventListener" : "attachEvent",<br>        //将内部对象挂到window下，此时可重命名，实现多库共存  name String 新的命名空间<br>        exports: function( name ) {<br>            $$ &amp;&amp; ( global.$ = $$ );//多库共存<br>            name = name || $.config.nick;//取得当前简短的命名空间<br>            $.config.nick = name;<br>            global[ NsKey ] = NsVal;<br>            return global[ name ]  = this;<br>        },<br>        /**<br>         * 数组化<br>         * @param {ArrayLike} nodes 要处理的类数组对象<br>         * @param {Number} start 可选。要抽取的片断的起始下标。如果是负数，从后面取起<br>         * @param {Number} end  可选。规定从何处结束选取<br>         * @return {Array}<br>         */<br>        slice: function ( nodes, start, end ) {<br>            var ret = [], n = nodes.length;<br>            if(end === void 0 || typeof end == &quot;number&quot; &amp;&amp; isFinite(end)){<br>                start = parseInt(start,10) || 0;<br>                end = end == void 0 ? n : parseInt(end, 10);<br>                if(start &lt; 0){<br>                    start += n;<br>                }<br>                if(end &gt; n){<br>                    end = n;<br>                }<br>                if(end &lt; 0){<br>                    end += n;<br>                }<br>                for (var i = start; i &lt; end; ++i) {<br>                    ret[i - start] = nodes[i];<br>                }<br>            }<br>            return ret;<br>        },<br>        /**<br>         * 用于取得数据的类型（一个参数的情况下）或判定数据的类型（两个参数的情况下）<br>         * @param {Any} obj 要检测的东西<br>         * @param {String} str 可选，要比较的类型<br>         * @return {String|Boolean}<br>         */<br>        type: function ( obj, str ){<br>            var result = class2type[ (obj == null || obj !== obj ) ? obj :  toString.call( obj ) ] || obj.nodeName || "#";<br>            if( result.charAt(0) === "#" ){//兼容旧式浏览器与处理个别情况,如window.opera<br>                //利用IE678 window == document为true,document == window竟然为false的神奇特性<br>                if( obj == obj.document &amp;&amp; obj.document != obj ){<br>                    result = "Window"; //返回构造器名字<br>                }else if( obj.nodeType === 9 ) {<br>                    result = "Document";//返回构造器名字<br>                }else if( obj.callee ){<br>                    result = "Arguments";//返回构造器名字<br>                }else if( isFinite( obj.length ) &amp;&amp; obj.item ){<br>                    result = "NodeList"; //处理节点集合<br>                }else{<br>                    result = toString.call( obj ).slice( 8, -1 );<br>                }<br>            }<br>            if( str ){<br>                return str === result;<br>            }<br>            return result;<br>        },<br>        //$.log(str, showInPage=true, 5 )<br>        //level Number，通过它来过滤显示到控制台的日志数量。0为最少，只显示最致命的错误，<br>        //7则连普通的调试消息也打印出来。 显示算法为 level &lt;= $.config.level。<br>        //这个$.colre.level默认为9。下面是level各代表的含义。<br>        //0 EMERGENCY 致命错误,框架崩溃<br>        //1 ALERT 需要立即采取措施进行修复<br>        //2 CRITICAL 危急错误<br>        //3 ERROR 异常<br>        //4 WARNING 警告<br>        //5 NOTICE 通知用户已经进行到方法<br>        //6 INFO 更一般化的通知<br>        //7 DEBUG 调试消息<br>        log: function (str){<br>            var show = true, page = false<br>            for(var i = 1 ; i &lt; arguments.length; i++){<br>                var el = arguments[i]<br>                if(typeof el == "number"){<br>                    show = el &lt;=  $.config.level<br>                }else if(el === true){<br>                    page = true;<br>                }<br>            }<br>            if(show){<br>                if( page === true ){<br>                    $.require( "ready", function(){<br>                        var div =  DOC.createElement( "pre" );<br>                        div.className = "mass_sys_log";<br>                        div.innerHTML = str +"";//确保为字符串<br>                        DOC.body.appendChild(div);<br>                    });<br>                }else if( global.console ){<br>                    global.console.log( str );<br>                }<br>            }<br>            return str<br>        },<br>        //主要用于建立一个从元素到数据的引用，具体用于数据缓存，事件绑定，元素去重<br>        getUid: global.getComputedStyle ? function( obj ){//IE9+,标准浏览器<br>            return obj.uniqueNumber || ( obj.uniqueNumber = NsVal.uuid++ );<br>        }: function( obj ){<br>            if(obj.nodeType !== 1){//如果是普通对象，文档对象，window对象<br>                return obj.uniqueNumber || ( obj.uniqueNumber = NsVal.uuid++ );<br>            }//注：旧式IE的XML元素不能通过el.xxx = yyy 设置自定义属性<br>            var uid = obj.getAttribute("uniqueNumber");<br>            if ( !uid ){<br>                uid = NsVal.uuid++;<br>                obj.setAttribute( "uniqueNumber", uid );<br>            }<br>            return +uid;//确保返回数字<br>        },<br>        /**<br>         * 生成键值统一的对象，用于高速化判定<br>         * @param {Array|String} array 如果是字符串，请用","或空格分开<br>         * @param {Number} val 可选，默认为1<br>         * @return {Object}<br>         */<br>        oneObject : function( array, val ){<br>            if( typeof array == "string" ){<br>                array = array.match( $.rword ) || [];<br>            }<br>            var result = {}, value = val !== void 0 ? val :1;<br>            for(var i = 0, n = array.length; i &lt; n; i++){<br>                result[ array[i] ] = value;<br>            }<br>            return result;<br>        },<br>        config: function( settings ) {<br>            var kernel  = $.config;<br>            for ( var p in settings ) {<br>                if (!settings.hasOwnProperty( p ))<br>                    continue<br>                var prev = kernel[ p ];<br>                var curr = settings[ p ];<br>                if (prev &amp;&amp; p === &quot;alias&quot;) {<br>                    for (var c in curr) {<br>                        if (curr.hasOwnProperty( c )) {<br>                            var prevValue = prev[ c ];<br>                            var currValue = curr[ c ];<br>                            if( prevValue &amp;&amp; prev !== curr ){<br>                                throw new Error(c + "不能重命名")<br>                            }<br>                            prev[ c ] = currValue;<br>                        }<br>                    }<br>                } else {<br>                    kernel[ p ] = curr;<br>                }<br>            }<br>            return this<br>        }<br>    });<br>    (function(scripts, cur){<br>        cur = scripts[ scripts.length - 1 ];<br>        var url = cur.hasAttribute ?  cur.src : cur.getAttribute( "src", 4 );<br>        url = url.replace(/[?#].*/, "");<br>        var a = cur.getAttribute("debug");<br>        var b = cur.getAttribute("storage");<br>        var kernel = $.config;<br>        kernel.debug = a == "true" || a == "1";<br>        kernel.storage = b == "true"|| b == "1";<br>        basepath =  kernel.base = url.substr( 0, url.lastIndexOf("/") ) +"/";<br>        kernel.nick = cur.getAttribute("nick") || "$";<br>        kernel.erase = cur.getAttribute("erase") || "erase";<br>        kernel.alias = {};<br>        kernel.level = 9;<br><br>    })(DOC.getElementsByTagName( "script" ));<br>    $.noop = $.error = function(){};<br><br>    "Boolean,Number,String,Function,Array,Date,RegExp,Window,Document,Arguments,NodeList".replace( $.rword, function( name ){<br>        class2type[ "[object " + name + "]" ] = name;<br>    });<br><br>    function parseURL(url, parent, ret){<br>        //[]里面，不是开头的-要转义，因此要用/^[-a-z0-9_$]{2,}$/i而不是/^[a-z0-9_-$]{2,}<br>        //别名至少两个字符；不用汉字是避开字符集的问题<br>        if( /^(mass|ready)$/.test(url)){//特别处理ready标识符<br>            return [url, "js"];<br>        }<br>        if(/^[-a-z0-9_$]{2,}$/i.test(url) &amp;&amp; $.config.alias[url] ){<br>            ret = $.config.alias[url];<br>        }else{<br>            parent = parent.substr( 0, parent.lastIndexOf('/') )<br>            if(/^(\w+)(\d)?:.*/.test(url)){  //如果用户路径包含协议<br>                ret = url<br>            }else {<br>                var tmp = url.charAt(0);<br>                if( tmp !== &quot;.&quot; &amp;&amp; tmp != &quot;/&quot;){  //相对于根路径<br>                    ret = basepath + url;<br>                }else if(url.slice(0,2) == "./"){ //相对于兄弟路径<br>                    ret = parent + url.substr(1);<br>                }else if( url.slice(0,2) == ".."){ //相对于父路径<br>                    var arr = parent.replace(/\/$/,"").split("/");<br>                    tmp = url.replace(/\.\.\//g,function(){<br>                        arr.pop();<br>                        return "";<br>                    });<br>                    ret = arr.join("/")+"/"+tmp;<br>                }else if(tmp == "/"){<br>                    ret = parent  + url<br>                }else{<br>                    throw new Error("不符合模块标识规则")<br>                }<br>            }<br>        }<br>        var ext = "js";<br>        tmp = ret.replace(/[?#].*/, "");<br>        if(/\.(\w+)$/.test( tmp )){<br>            ext = RegExp.$1;<br>        }<br>        if( ext!=&quot;css&quot; &amp;&amp;tmp == ret &amp;&amp; !/\.js$/.test(ret)){//如果没有后缀名会补上.js<br>            ret += ".js";<br>        }<br>        return [ret, ext];<br>    }<br>  <br>    $.mix({<br>        //绑定事件(简化版)<br>        bind: W3C ? function( el, type, fn, phase ){<br>            el.addEventListener( type, fn, !!phase );<br>            return fn;<br>        } : function( el, type, fn ){<br>            el.attachEvent &amp;&amp; el.attachEvent( &quot;on&quot;+type, fn );<br>            return fn;<br>        },<br>        unbind: W3C ? function( el, type, fn, phase ){<br>            el.removeEventListener( type, fn || $.noop, !!phase );<br>        } : function( el, type, fn ){<br>            if ( el.detachEvent ) {<br>                el.detachEvent( "on" + type, fn || $.noop );<br>            }<br>        },<br>        //移除指定或所有本地储存中的模块<br>        erase : function( id, v ){<br>            if(id == void 0){<br>                Storage.clear();<br>            }else{<br>                var old = Storage.getItem( id+"_version" );<br>                if(old &amp;&amp; (!v || v &gt; Number(old)) ){<br>                    Storage.removeItem( id );<br>                    Storage.removeItem( id+"_deps" );<br>                    Storage.removeItem( id+"_parent" );<br>                    Storage.removeItem( id+"_version" );<br>                }<br>            }<br>        }<br>    });<br>    //================================localStorage===============================<br>    var Storage = $.oneObject("setItem,getItem,removeItem,clear",$.noop);<br>    if( global.localStorage){<br>        Storage = localStorage; <br>    }else  if( HTML.addBehavior){<br>        HTML.addBehavior('#default#userData');<br>        HTML.save("massdata");<br>        //https://github.com/marcuswestin/store.js/issues/40#issuecomment-4617842<br>        //在IE67它对键名非常严格,不能有特殊字符,否则抛throwed an This name may not contain the &#39;~&#39; character: _key--&gt;~&lt;--<br>        var rstoragekey = new RegExp(&quot;[!\&quot;#$%&amp;&#39;()*+,/\\\\:;&lt;=&gt;?@[\\]^`{|}~]&quot;, &quot;g&quot;);<br>        function curry(fn) {<br>            return function(a, b) {<br>                HTML.load("massdata");<br>                a = String(a).replace(rstoragekey, function(w){<br>                    return w.charCodeAt(0);<br>                });<br>                var result = fn( a, b );<br>                HTML.save("massdata");<br>                return result<br>            }<br>        }<br>        Storage = {<br>            setItem : curry(function(key, val){<br>                HTML.setAttribute(key, val);<br>            }),<br>            getItem: curry(function(key){<br>                return HTML.getAttribute(key);<br>            }),<br>            removeItem: curry(function(key){<br>                HTML.removeAttribute(key);<br>            }),<br>            clear: function(){<br>                var attributes = HTML.XMLDocument.documentElement.attributes<br>                for (var i=0, attr; attr=attributes[i]; i++) {<br>                    HTML.removeAttribute(attr.name)<br>                }<br>            }<br>        }<br>    }<br>    var rerase = new RegExp("(?:^| )" + $.config.erase + "(?:(?:=([^;]*))|;|$)")<br>    var match = String(DOC.cookie).match( rerase );<br>    //读取从后端过来的cookie指令，转换成一个对象，键名为模块的URL，值为版本号（这是一个时间戮）<br>    if(match &amp;&amp; match[1]){<br>        try{<br>            var obj = eval("0,"+match[1]);<br>            for(var i in obj){//$.erase会版本号比现在小的模块从本地储存中删掉<br>                $.erase(i, obj[i])<br>            }<br>        }catch(e){}<br>    }<br><br>    //============================加载系统===========================<br>    var modules = $.modules =  {<br>        ready:{ },<br>        mass: {<br>            state: 2,<br>            exports: $<br>        }<br>    };<br>    function getCurrentScript(){<br>        if(DOC.currentScript){<br>            return DOC.currentScript.src<br>        }<br>        var nodes = DOC.getElementsByTagName("script")<br>        for (var i = 0, node; node = nodes[i++];) {<br>            if (!node.pass &amp;&amp; node.readyState === &quot;interactive&quot;) {<br>                return  node.pass = node.src;<br>            }<br>        }<br>    }<br>    //检测是否存在循环依赖<br>    function checkCycle( deps, nick ){<br>        for(var id in deps){<br>            if( deps[id] == &quot;司徒正美&quot; &amp;&amp;( id == nick || checkCycle(modules[id].deps, nick))){<br>                return true;<br>            }<br>        }<br>    }<br>    //检测此JS模块的依赖是否都已安装完毕,是则安装自身<br>    function checkDeps(){<br>        loop:<br>        for ( var i = loadings.length, id; id = loadings[ --i ]; ) {<br>            var obj = modules[ id ], deps = obj.deps;<br>            for( var key in deps ){<br>                if( deps.hasOwnProperty( key ) &amp;&amp; modules[ key ].state != 2 ){<br>                    continue loop;<br>                }<br>            }<br>            //如果deps是空对象或者其依赖的模块的状态都是2<br>            if( obj.state != 2){<br>                loadings.splice( i, 1 );//必须先移除再安装，防止在IE下DOM树建完后手动刷新页面，会多次执行它<br>                fireFactory( obj.id, obj.args, obj.factory );<br>                checkDeps();<br>            }<br>        }<br>    }<br>    function checkFail( node, error ){<br>        var id = node.src;<br>        node.onload = node.onreadystatechange = node.onerror = null;<br>        if( error || !modules[ id ].state ){<br>            if(error){//注意，在标准浏览器下通过!modules[ id ].state检测可能不精确，这时移出节点会出错<br>                HEAD.removeChild(node)<br>            }<br>            $.log("加载 "+ id +" 失败", 7);<br>        }else{<br>            return true;<br>        }<br>    }<br>    function loadJS( url ){<br>        var node = DOC.createElement("script")<br>        node.onload = node.onreadystatechange = function(){<br>            if(/loaded|complete|undefined/i.test(node.readyState) ){<br>                //mass Framework会在_checkFail把它上面的回调清掉<br>                //因为在IE9-10, opera中，它们同时支持onload，onreadystatechange，以防重复执行factory.delay<br>                var factory = stack.pop() ;<br>                factory &amp;&amp;  factory.delay(node.src)<br>                if( checkFail(node) ){<br>                    $.log("已成功加载 "+node.src, 7);<br>                }<br>            }<br>        }<br>        node.onerror = function(){<br>            checkFail(node, true)<br>        }<br>        node.src = url <br>        $.log("正准备加载 "+node.src, 7)<br>        HEAD.insertBefore(node, HEAD.firstChild)<br>    }<br> <br>    //请求模块（依赖列表,模块工厂,加载失败时触发的回调）<br>    window.require = $.require = function( list, factory, parent ){<br>        var deps = {},  // 用于检测它的依赖是否都为2<br>        args = [],      // 用于依赖列表中的模块的返回值<br>        dn = 0,         // 需要安装的模块数<br>        cn = 0,         // 已安装完的模块数<br>        id = parent || "cb"+ ( cbi++ ).toString(32);<br>        parent = parent || basepath<br>        String(list).replace( $.rword, function(el){<br>            var array = parseURL(el, parent ),  url = array[0];<br>            if(array[1] == "js"){<br>                dn++<br>                loadStorage( id )<br>                if( !modules[ url ]  ){<br>                    modules[ url ] = {<br>                        id: url,<br>                        parent: parent,<br>                        exports: {}<br>                    };<br>                    loadJS( url );<br>                }else if( modules[ url ].state === 2 ){<br>                    cn++;<br>                }<br>                if( !deps[ url ] ){<br>                    args.push( url );<br>                    deps[ url ] = "司徒正美";//去重<br>                }<br>            }else if(array[1] === "css"){<br>                loadCSS( url );<br>            }<br>        });<br>        //创建或更新模块的状态<br>        modules[id] = {<br>            id: id,<br>            factory: factory,<br>            deps: deps,<br>            args: args,<br>            state: 1<br>        }<br>        if( dn === cn ){//如果需要安装的等于已安装好的<br>            fireFactory( id, args, factory );//装配到框架中<br>            checkDeps();<br>            return<br>        }<br>        //在正常情况下模块只能通过_checkDeps执行<br>        loadings.unshift( id );<br>    }<br>    //定义模块<br>    var rcomment =  /\/\*(?:[^*]|\*+[^\/*])*\*+\/|\/\/.*/g<br>    window.define = $.define = function( id, deps, factory ){//模块名,依赖列表,模块本身<br>        var args = Array.apply([],arguments), _id<br>        if(typeof id == "string"){<br>            _id = args.shift();<br>        }<br>        if( typeof args[0] === "boolean" ){//用于文件合并, 在标准浏览器中跳过补丁模块<br>            if( args[0] ){<br>                return;<br>            }<br>            args.shift()<br>        }<br>        if(typeof args[0] == "function"){<br>            args.unshift([]);<br>        }<br>        id = modules[id] &amp;&amp; modules[id].state == 2 ? _id : getCurrentScript();<br>        factory = args[1];<br>        factory.id = _id;//用于调试<br>        factory.delay = function( id ){<br>            args.push( id );<br>            if( checkCycle(modules[id].deps, id)){<br>                throw new Error( id +"模块与之前的某些模块存在循环依赖")<br>            }<br>            if( $.config.storage &amp;&amp; !Storage.getItem( id ) ){<br>                Storage.setItem( id, factory.toString().replace(rcomment,""));<br>                Storage.setItem( id+"_deps", args[0]+"");<br>                Storage.setItem( id+"_parent",  id);<br>                Storage.setItem( id+"_version", new Date - 0);<br>            }<br>            delete factory.delay;//释放内存<br>            require.apply(null, args); //0,1,2 --&gt; 1,2,0<br>        }<br>        if(id ){<br>            factory.delay(id,args)<br>        }else{//先进先出<br>            stack.push( factory )<br>        }<br>    }<br>    $.require.amd = modules<br>    function loadStorage( id ){<br>        var factory =  Storage.getItem( id );<br>        if( $.config.storage &amp;&amp; factory &amp;&amp; !modules[id]){<br>            var parent = Storage.getItem(id+"_parent");<br>            var deps = Storage.getItem(id+"_deps");<br>            deps = deps ?  deps.match( $.rword ) : "";<br>            modules[ id ] ={<br>                id: id,<br>                parent: parent,<br>                exports: {},<br>                state: 1<br>            };<br>            require(deps, Function(&quot;return &quot;+ factory )(), id) //0,1,2 --&gt; 1,2,0<br>        }<br>    }<br>    function loadCSS(url){<br>        var id = url.replace(rmakeid,"");<br>        if (DOC.getElementById(id))<br>            return<br>        var link     =  DOC.createElement("link");<br>        link.charset = "utf-8";<br>        link.rel     = "stylesheet";<br>        link.href    = url;<br>        link.type    = "text/css";<br>        link.id      = id;<br>        HEAD.insertBefore( link, HEAD.firstChild );<br>    }<br>    //从returns对象取得依赖列表中的各模块的返回值，执行factory, 完成模块的安装<br>    function fireFactory( id, deps, factory ){<br>        for ( var i = 0, array = [], d; d = deps[i++]; ) {<br>            array.push( modules[ d ].exports );<br>        }<br>        var module = Object( modules[id] ), ret;<br>        ret =  factory.apply(global, array);<br>        module.state = 2;<br>        if( ret !== void 0 ){<br>            modules[ id ].exports = ret<br>        }<br>        return ret;<br>    }<br>    all.replace($.rword,function(a){<br>        $.config.alias[ "$"+a ] = basepath + a + ".js";<br>    });<br>    //domReady机制<br>    var readyFn, ready =  W3C ? "DOMContentLoaded" : "readystatechange" ;<br>    function fireReady(){<br>        modules.ready.state = 2;<br>        checkDeps();<br>        if( readyFn ){<br>            $.unbind( DOC, ready, readyFn );<br>        }<br>        fireReady = $.noop;//隋性函数，防止IE9二次调用_checkDeps<br>    };<br>    function doScrollCheck() {<br>        try {<br>            HTML.doScroll( "left" ) ;<br>            fireReady();<br>        } catch(e) {<br>            setTimeout( doScrollCheck, 31 );<br>        }<br>    };<br><br>    if ( DOC.readyState === "complete" ) {<br>        fireReady();//如果在domReady之外加载<br>    }else {<br>        $.bind( DOC, ready, readyFn = function(){<br>            if ( W3C || DOC.readyState === "complete" ){<br>                fireReady();<br>            }<br>        });<br>        if( HTML.doScroll &amp;&amp; self.eval === parent.eval)<br>            doScrollCheck();<br>    }<br><br>    global.VBArray &amp;&amp; (&quot;abbr,article,aside,audio,bdi,canvas,data,datalist,details,figcaption,figure,footer,&quot; +<br>        "header,hgroup,mark,meter,nav,output,progress,section,summary,time,video").replace( $.rword, function( tag ){<br>        DOC.createElement(tag);<br>    });<br><br>    //https://developer.mozilla.org/en/DOM/window.onpopstate<br>    $.bind( global, "popstate", function(){<br>        NsKey = DOC.URL.replace(rmakeid,"");<br>        $.exports();<br>    });<br>    $.exports( $.config.nick +  postfix );//防止不同版本的命名空间冲突<br>/*combine modules*/<br><br>}( self, self.document );//为了方便在VS系列实现智能提示,把这里的this改成self或window<br><img src="http://www.cnblogs.com/rubylouvre/aggbug/2803395.html?type=1" width="1" height="1" alt=""><p><a href="http://www.cnblogs.com/rubylouvre/archive/2012/12/06/2803395.html">本文链接</a></p>