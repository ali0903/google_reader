---
layout: post
title:  "[译]JavaScript中的数组"
date:   2012-12-05 16:27:00
author: 紫云飞
categories: program
---

## [译]JavaScript中的数组
### by 紫云飞
### at 2012-12-05 16:27:00
### original <http://www.cnblogs.com/ziyunfei/archive/2012/12/05/2802393.html>

<div>原文:<a href="http://www.2ality.com/2012/12/arrays.html">http://www.2ality.com/2012/12/arrays.html</a></div><div><hr></div><div><p>本文要解释一下Javascript中的数组是如何工作的,你将会知道,它们比你想的更像普通对象. </p><h3>1.概述<p>在Javascript中,对象是一个从字符串到值的映射.数组也是对象,只是包含有一些特殊的属性:</p><ol><li><p>数组索引(下标):如果一个数组对象的属性的数字值(实际上是字符串值)是一个小于2<sup>32</sup>-1的非负整数,则该属性就会被看成是一个数组索引.</p></li><li><tt>"length"属性</tt>:该属性的值是一个非负整数,表示了数组的长度.这个长度的值通常是数组的最大索引转换成数字后,再加1.</li></ol><p>下面要说的这个表现有时候会让人感到震惊,尤其对于那些刚刚从其他语言转来的人,就是:JavaScript中的数组索引实际上是字符串.(在引擎内部,为了获得更快的访问速度,数组索引通常是用数字来实现的.但是规范就是这么规定的,程序员们看到的表现也是这样的).例如:</p><div style="background-color:#f5f5f5;border:1px solid #cccccc;padding:10px">&gt; <span style="color:#0000ff">var</span> arr = ['a', 'b', 'c'<span style="color:#000000">];<br></span>&gt; arr[&#39;0&#39;<span style="color:#000000">]<br></span>'a'<br>&gt; arr[0<span style="color:#000000">]<br></span>'a'</div><tt>因为</tt><tt>0不是一个合法的标识符(</tt>identifier),所以点符号(<tt>arr.0</tt>)会产生一个语法错误.因此,你必须使用方括号.方括号运算符会将它的操作数转换成字符串,这就是上面的<tt>arr[0]为什么能正常工作的原因</tt>.数组索引被限制在32比特的范围内.类似于方括号运算符,<tt>in运算符也会将它的第一个操作数转换成字符串</tt>.这就是为什么能用数字来检查给定索引的数组元素是否存在:<div style="background-color:#f5f5f5;border:1px solid #cccccc;padding:10px">&gt; 2 <span style="color:#0000ff">in</span> [ 'a', 'b', 'c'<span style="color:#000000"> ]<br></span><span style="color:#0000ff">true</span><br>&gt; 3 <span style="color:#0000ff">in</span> [ 'a', 'b', 'c'<span style="color:#000000"> ]<br></span><span style="color:#0000ff">false</span></div>文章下面的几小节将更加深入的讲解数组是如何工作的.<p><strong>2.稀疏数组</strong></p>正如我们看到的,数组也是从字符串到值的映射.这就意味着数组可以有孔(hole),<tt>一个有孔的数组称之为稀疏数组(</tt>sparse array).稀疏数组中索引的个数小于length属性的值.在使用数组字面量定义数组时,你可以通过在逗号前面不写任何值来创建一个孔(最尾部的逗号会被忽略).数组的遍历方法比如<tt>forEach和</tt><tt>map</tt>会忽略掉数组中的孔<tt>.下面,</tt>让我们比较一下稀疏数组和密集数组(dense array):<div style="background-color:#f5f5f5;border:1px solid #cccccc;padding:10px">&gt; <span style="color:#0000ff">var</span> sparse = [ , , 'c'<span style="color:#000000"> ];<br></span>&gt; <span style="color:#0000ff">var</span> dense  = [ undefined, undefined, 'c'<span style="color:#000000"> ];<br><br></span>&gt; 0 <span style="color:#0000ff">in</span><span style="color:#000000"> sparse<br></span><span style="color:#0000ff">false</span><br>&gt; 0 <span style="color:#0000ff">in</span><span style="color:#000000"> dense<br></span><span style="color:#0000ff">true</span><br><br>&gt; <span style="color:#0000ff">for</span>(<span style="color:#0000ff">var</span> i=0; i&lt;sparse.length; i++<span style="color:#000000">) console.log(sparse[i]);<br>undefined<br>undefined<br>c<br></span>&gt; <span style="color:#0000ff">for</span>(<span style="color:#0000ff">var</span> i=0; i&lt;dense.length; i++<span style="color:#000000">) console.log(dense[i]);<br>undefined<br>undefined<br>c<br><br></span>&gt; sparse.forEach(<span style="color:#0000ff">function</span><span style="color:#000000"> (x) { console.log(x) });<br>c<br></span>&gt; dense.forEach(<span style="color:#0000ff">function</span><span style="color:#000000"> (x) { console.log(x) });<br>undefined<br>undefined<br>c<br><br></span>&gt; sparse.map(<span style="color:#0000ff">function</span> (x,i) { <span style="color:#0000ff">return</span><span style="color:#000000"> i });<br>[ , , </span>2<span style="color:#000000"> ]<br></span>&gt; dense.map(<span style="color:#0000ff">function</span> (x,i) { <span style="color:#0000ff">return</span><span style="color:#000000"> i });<br>[ </span>0, 1, 2<span style="color:#000000"> ]<br><br></span>&gt; sparse.filter(<span style="color:#0000ff">function</span> () { <span style="color:#0000ff">return</span> <span style="color:#0000ff">true</span><span style="color:#000000"> })<br>[ </span>'c'<span style="color:#000000"> ]<br></span>&gt; dense.filter(<span style="color:#0000ff">function</span> () { <span style="color:#0000ff">return</span> <span style="color:#0000ff">true</span><span style="color:#000000"> })<br>[ undefined, undefined, </span>'c' ]</div><p><strong>3.数组索引</strong></p>关于什么样的属性才能称之为数组索引,ECMAScript规范有这样的定义.一个字符串s必须满足下面两个要求,才能成为数组的索引:</h3></div><div> </div><div>   要求1: 字符串s 解析成为一个无符号32位整数之后,再转换成字符串的值必须要和s相同.<br>   要求2: 字符串s 解析成为整数之后的值必须小于232−1 (数组的最大长度).</div><div> </div><div>因此,如果按照数值大小比较,一个数组的索引s必须满足下面的范围表达式:<blockquote>0 ≤ <tt>s</tt> &lt; 2<sup>32</sup>−1</blockquote><tt>ToUint32</tt>是一个规范内部的方法,它可以将其他的值转换成无符号32位整数.你也可以使用JavaScript代码来实现这个内部方法<sup> <a href="http://www.cnblogs.com/ziyunfei/#%5B1%5D">[1]</a></sup>:<div style="background-color:#f5f5f5;border:1px solid #cccccc;padding:10px"><span style="color:#0000ff">function</span><span style="color:#000000"> ToUint32(x) {<br>    </span><span style="color:#0000ff">return</span> x &gt;&gt;&gt; 0<span style="color:#000000">;<br>}</span></div>上面的要求1表明了:虽然很多字符串都可以被转换成一个无符号32位整数,但只有其中的少数可以作为合法的数组索引.比如:<div style="background-color:#f5f5f5;border:1px solid #cccccc;padding:10px">&gt; ToUint32(&#39;0&#39;<span style="color:#000000">)<br></span>0<br>&gt; ToUint32(&#39;00&#39;<span style="color:#000000">)<br></span>0<br>&gt; ToUint32(&#39;03&#39;<span style="color:#000000">)<br></span>3<br>&gt; ToUint32(&#39;abc&#39;<span style="color:#000000">)<br></span>0<br>&gt; ToUint32(Math.pow(2,32)+3<span style="color:#000000">)<br></span>3</div>上例中只有第一条语句中参数"0"满足了要求1,是个有效的数组索引.</div><div><p>所有不满足数组索引要求的字符串都会被看成普通属性:</p><div style="background-color:#f5f5f5;border:1px solid #cccccc;padding:10px">&gt; <span style="color:#0000ff">var</span> arr = ['a', 'b', 'c'<span style="color:#000000">];<br></span>&gt; arr[&#39;0&#39;<span style="color:#000000">]<br></span>'a'<br>&gt; arr[&#39;00&#39;<span style="color:#000000">]<br>undefined</span></div><p><strong>4.length</strong></p></div><blockquote><div>译者注:很巧,上周我刚刚写过一篇文章:<a href="http://www.cnblogs.com/ziyunfei/archive/2012/11/30/2795744.html">JavaScript:数组的length属性</a></div></blockquote><div>数组length属性的值的范围是:<blockquote>0 ≤ <tt>l</tt> ≤ 2<sup>32</sup>−1 (32位)</blockquote></div><h4>4.1 索引属性的影响<div>在有新的元素添加时,数组的length属性会自动增大:<div style="background-color:#f5f5f5;border:1px solid #cccccc;padding:10px">&gt; <span style="color:#0000ff">var</span> arr =<span style="color:#000000"> [];<br></span>&gt;<span style="color:#000000"> arr.length<br></span>0<br>&gt; arr[0] = &#39;a&#39;<span style="color:#000000">;<br></span>&gt;<span style="color:#000000"> arr.length<br></span>1</div><p><strong>4.2 减小length属性</strong></p>如果length属性当前的值为<tt>l,被赋一个新的值</tt><tt>l',且</tt><tt>l'</tt><tt>比原值l小</tt>,那么在下面范围内的索引都会被删除.<blockquote><tt>l'</tt> ≤ <tt>i</tt> &lt; <tt>l</tt></blockquote>例如:<div style="background-color:#f5f5f5;border:1px solid #cccccc;padding:10px">&gt; <span style="color:#0000ff">var</span> arr = [ 'a', 'b', 'c'<span style="color:#000000"> ];<br></span>&gt;<span style="color:#000000"> arr.length<br></span>3<br>&gt; 2 <span style="color:#0000ff">in</span><span style="color:#000000"> arr<br></span><span style="color:#0000ff">true</span><br>&gt; arr.length = 2<span style="color:#000000">;<br></span>2<br>&gt; 2 <span style="color:#0000ff">in</span><span style="color:#000000"> arr<br></span><span style="color:#0000ff">false</span></div><p><strong>4.3 增大length属性</strong></p>增大length属性的值会创建一个稀疏数组:<div style="background-color:#f5f5f5;border:1px solid #cccccc;padding:10px">&gt; <span style="color:#0000ff">var</span> arr = ['a'<span style="color:#000000">];<br></span>&gt; arr.length = 3<span style="color:#000000">;<br></span>&gt;<span style="color:#000000"> arr<br>[ </span>'a', , ,]</div><p><strong><tt>4.4 length属性的有效值</tt></strong></p>你可以给length属性赋任何值,引擎内部会使用<tt>ToUint32方法将所赋的值转换成数字,转换成的数字</tt>必须满足length属性值的合法范围.例如:<div style="background-color:#f5f5f5;border:1px solid #cccccc;padding:10px">&gt; ToUint32(&#39;0&#39;)  <span style="color:#008000">//</span><span style="color:#008000">*</span><br>0<br>&gt; ToUint32(&#39;000&#39;)  <span style="color:#008000">//</span><span style="color:#008000">*</span><br>0<br>&gt; ToUint32(&#39;-1&#39;<span style="color:#000000">)<br></span>4294967295<br>&gt; ToUint32(Math.pow(2,32)-1)  <span style="color:#008000">//</span><span style="color:#008000">*</span><br>4294967295<br>&gt; ToUint32(Math.pow(2,32<span style="color:#000000">))<br></span>0<br>&gt; ToUint32(&#39;abc&#39;<span style="color:#000000">)<br></span>0</div>上面所有带星号的length赋值是有效的,其他的都是无效的:<div style="background-color:#f5f5f5;border:1px solid #cccccc;padding:10px">&gt; Number(&#39;0&#39;<span style="color:#000000">)<br></span>0<br>&gt; Number(&#39;000&#39;<span style="color:#000000">)<br></span>0<br>&gt; Number(&#39;-1&#39;<span style="color:#000000">)<br></span>-1<br>&gt; Number(Math.pow(2,32)-1<span style="color:#000000">)<br></span>4294967295<br>&gt; Number(Math.pow(2,32<span style="color:#000000">))<br></span>4294967296<br>&gt; Number(&#39;abc&#39;<span style="color:#000000">)<br>NaN</span></div>你可以测试一下:<div style="background-color:#f5f5f5;border:1px solid #cccccc;padding:10px">&gt; [].length = -1<span style="color:#000000"><br>RangeError: Invalid array length<br></span>&gt; [].length = Math.pow(2,32<span style="color:#000000">)<br>RangeError: Invalid array length<br></span>&gt; [].length = &#39;abc&#39;<span style="color:#000000"><br>RangeError: Invalid array length</span></div><p><strong>5.数组实例</strong></p>数组的对象实例和普通对象非常类似,只是在定义下面两种属性时会有一些额外的操作:<ul><li>数组索引:可能会增大<tt>length属性的值</tt>.</li><li><tt>"length"属性</tt>:过大的话会抛出异常,如果新值小于旧值的话会删除超出的元素.</li></ul>所有其他属性的处理都和普通对象完全相同.<p><strong>6.超出限制</strong></p>如果你使用了一个不在索引范围内的索引的话,会发生什么?答案就是该索引会被看成一个普通属性.比如我们设置一个过大的索引值.<div style="background-color:#f5f5f5;border:1px solid #cccccc;padding:10px">&gt; <span style="color:#0000ff">var</span> arr = ['a', 'b'<span style="color:#000000">];<br></span>&gt; arr[Math.pow(2,32)-1] = &#39;c&#39;<span style="color:#000000">;<br></span>&gt;<span style="color:#000000"> arr<br>[ </span>'a', 'b'<span style="color:#000000"> ]<br></span>&gt;<span style="color:#000000"> arr.length<br></span>2<br>&gt; arr[Math.pow(2,32)-1<span style="color:#000000">]<br></span>'c'</div>如果你设置一个超大的length属性,也会抛出异常:<div style="background-color:#f5f5f5;border:1px solid #cccccc;padding:10px">&gt; <span style="color:#0000ff">var</span> arr = <span style="color:#0000ff">new</span> Array(Math.pow(2,32)-1)  <span style="color:#008000">//</span><span style="color:#008000"> max length</span><br>&gt; arr.push(&#39;x&#39;<span style="color:#000000">)<br>RangeError: Invalid array length</span></div><blockquote><p>译者注:这个地方有个让人吃惊的表现,我刚好刚讲过:<a href="http://www.cnblogs.com/ziyunfei/archive/2012/11/28/2793435.html">JavaScript:数组能越界?</a></p></blockquote><p><strong>7.建议</strong></p>使用数组时的两个建议:<ul><li>假装数组索引就是数字.这正是引擎内部的实现方式,而且这也是ECMAScript未来的大方向.</li><li>在对待数组时不要太过聪明.只需要遵循标准的处理模式,引擎通常会知道你想干什么,从而进行对应的优化.不需要你特殊处理.文章“<a href="http://www.html5rocks.com/en/tutorials/speed/v8/">Performance Tips for JavaScript in V8</a>” (作者是Chris Wilson)就讲了几个数组操作相关的建议.</li></ul><p><strong>8.相关文章</strong></p><ol><li><a href="http://www.2ality.com/2012/02/js-integers.html">Integers and shift operators in JavaScript</a></li><li><a href="http://www.cnblogs.com/ziyunfei/archive/2012/09/16/2687165.html">[译]JavaScript中的稀疏数组与密集数组</a></li></ol></div><img src="http://www.cnblogs.com/ziyunfei/aggbug/2802393.html?type=1" width="1" height="1" alt=""><p><a href="http://www.cnblogs.com/ziyunfei/archive/2012/12/05/2802393.html">本文链接</a></p></h4>