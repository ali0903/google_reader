---
layout: post
title:  "API 设计：让牛懂琴"
date:   2012-08-25 17:53:26
author: sofish
categories: program
---

## API 设计：让牛懂琴
### by sofish
### at 2012-08-25 17:53:26
### original <http://sofish.de/2100>

<p>对于 API 设计，这个演示稿讲得实存是太赞了，等不及的同学马上了解一下《RESTful API Design, Second Edition》的这 107 页吧。如果希望先听我讲讲 10 分钟收获的同学，可以先看下面的描述。</p>
<p></p>
<div style="text-align:center"><strong> <a title="RESTful API Design, Second Edition" href="http://www.slideshare.net/apigee/restful-api-design-second-edition">RESTful API Design, Second Edition</a> </strong> from <strong><a href="http://www.slideshare.net/apigee">Apigee</a></strong></div>
<p><span></span><br>
以为需要买本书，看完整本才能明白什么是好的接口。没想到，利用 HTTP Verbs 和 URL，可以这样做非常简洁的 API。“对牛弹琴”被用以描述做无效劳动，可见弹琴者几乎做的都是无用功，而作者以深入浅出的方式让牛听懂琴变成了 — 甚至像我这样的牛 — 在 10 分钟之内立马理解。其主要需要注意的点可以归纳为以下几句：</p>
<blockquote><p>保持 RESTful。只需 2 种 URL。不使用动词。使用复数名词。具体优于抽象。提供 JSON 的原则是支持 JS 调用。把复杂的参数放于 ? 号后面。借鉴优秀的 API。提供异常描述。提供库或者 SDK。</p></blockquote>
<p>这里面值得强调，或者说可能需要一点解析的是这几点：</p>
<h3>一、只需 2 种 URL</h3>
<p>结合 HTTP Verbs，我们通常只需要 2 种 URL，一种用于集合的调用，一种用于单个实例的调用：</p>
<ul>
<li>/dogs ：用于调用狗狗列表</li>
<li>/dogs/1234 用于调用 dogs 这个列表中 ID 为 1234 的小狗</li>
</ul>
<p>所有 API 都一样。其实我想你想到的可能是这样的形式，因为毕竟会需要有四种动作：创建 / 查看 / 修改 / 删除</p>
<ul>
<li>/dogs [GET] 查看狗狗列表</li>
<li>/dogs/edit [PUT] 批量修改</li>
<li>/dogs/delete [DELETE] 批量删除</li>
<li>/dogs/1234 [GET] 查看 ID 为 1234 的小狗</li>
<li>/dogs/1234/edit [PUT] 对小狗做点什么</li>
<li>/dogs/1234/delete [DELETE] 删除小狗的存在</li>
</ul>
<p>看起来不错。或者还可以变成 /dogCreate 之类的来减少一层，但还是不能实质上减少数目。这时太多接口总是导致记错，并且还需要记得 HTTP Verbs 与 URL 的对应。代码层面上也比较难做（或者应该对比下后面的实现）。何不考虑与 HTTP Verbs 结合：</p>
<ul>
<li>POST –&gt; Create 创新</li>
<li>GET –&gt; Read 查看</li>
<li>PUT –&gt; Update 修改</li>
<li>DELETE –&gt; Delete 删除</li>
</ul>
<p>这个时候我们只需要 2 种 URL，与 HTTP Verbs 充分结合：</p>
<table>
<tbody>
<tr>
<th></th>
<th>POST</th>
<th>GET</th>
<th>PUT</th>
<th>DELETE</th>
</tr>
<tr>
<th>/dogs</th>
<td>创建</td>
<td>查看列表</td>
<td>批量修改</td>
<td>删除所有</td>
</tr>
<tr>
<th>/dogs/1234</th>
<td>error</td>
<td>查看单个实例</td>
<td>修改单个实例</td>
<td>删除单个实例</td>
</tr>
</tbody>
</table>
<h3> 二、提供 JSON 的原则是支持 JS 调用</h3>
<p>这点似乎一点难理解，先让我们来看一下几个设计吧：</p>
<pre>// twitter
"created_at": "Thu Nov 03 05:19:38 +0000 2011"

//bing
"DateTime": "2011-10-29T09:35:00Z"

//Foursquare
"createdAt": 1320296464</pre>
<p>这里假设我们有两种需要，一种是直接放入页面显示，一种是做计时器用，那么当我们拥有的两个变量，在 bing 和 4sq 上是这样的：</p>
<pre>var obj = JSON.parse(response);

// bing
var stamp = obj.DateTime; // 返回 2011-10-29T09:35:00Z
// 显示出来也看得出是一个日期
// 但不能做计数器用，需要转换，这种格式 JS 还不好转

// 4sq
var stamp = obj.createdAt; // 返回 
// 显示出来需要用 JS 转 1320296464，因为是秒数，可以方便转成各种格式
// 可直接用于计数</pre>
<p>显然，这种方式更灵活。API 最好支持 JS 直接调用/使用。</p>
<h3>三、把复杂的变量放在 URL 参数上</h3>
<p>这个如上面第一点所提到的，层级导致代码的难度增大，不如放成参数；这样还可以保证 API 接口的简洁和少量，而实现同样多的功能。</p>
<p>然后，或者你会像我一样，再一次阅读。然后去迭代/优化你的 API。</p>