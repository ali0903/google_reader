---
layout: post
title:  "什么是反向代理，如何利用反向代理提高网站性能"
date:   2009-09-20 13:17:43
author: None
categories: program
---

## 什么是反向代理，如何利用反向代理提高网站性能
### by None
### at 2009-09-20 13:17:43
### original <http://www.houkai.com/2009/09/20/reversed-proxy.html>

<p>这几天常看到kangzj在博客里谈论代理，<a title="Micolog博客主题终极优化篇" href="http://www.houkai.com/2009/09/18/micolog-optimization.html">上篇博文</a>也提到过反向代理，有同学对利用绝对路径绕过ghs起到加速作用不是很理解，那就总结一下反向代理的知识。谈到google ghs时，说绕过ghs反向代理服务器直接使用*.appspot.com起到加速的目的，好像本文标题“利用反向代理提高网站速度”有点矛盾，其实不然，我们域名下的资源文件绕过一个反向代理服务器，得到的appspot反向代理服务器更直接而且它有负载均衡机制。</p>  <p><strong>1.什么是正向代理和正向代理服务器？</strong></p>  <p>正向代理就是通常所说的代理，是某台电脑通过一台服务器来上Internet网的这种方式，其中这台电脑就叫客户机，这台服务器就叫正向代理服务器也就是通常所说的代理服务器。在这种方式中，你是主动的，网站是被动的，网站那里不能得到你的真实ip地址。（通俗讲法）</p>  <p>正向代理服务器。它只用于代理内部网络对Internet的连接请求，客户机必须指定代理服务器（一般在IE-Internet选项-连接-局域网设置），并将本来要直接发送到Web服务器上的http请求发送到代理服务器中。</p>  <p><strong>2.什么是反向代理和反向代理服务器?</strong></p>  <p>反向代理就是网站通过一台服务器发布到公网，供用户访问。用户直接访问那台反向代理服务器，然后通过那台服务器访问到网站。用户无法得到网站的真实IP地址。这样就保护了网站服务器，如果您有台服务器在国内又不想让人找到IP，就可以在国外搭建一台反向代理服务器。一个反向代理服务器将很多网站解析到同一ip地址上。（通俗讲法）</p>  <p>技术讲法，普通的Web代理服务器是不支持外部对内部网络的访问请求的。当一个代理服务器能够代理外部网络上的主机，访问内部网络时，这种代理服务的方式称为<strong>反向代理服务</strong>。此时的代理服务器称为<strong>反向代理服务器</strong>，对外表现为一个Web服务器，外部网络就可以简单把它当作一个标准的Web服务器而不需要特定的配置。不同之处在于，这个服务器没有保存任何网页的真实数据，所有的静态网页或者CGI程序，都保存在内部的Web服务器上。因此对反向代理服务器的攻击并不会使得网页信息遭到破坏，这样就增强了Web服务器的安全性。 </p>  <p><strong>反向代理用于外部网络访问内部网络时使用，正向代理用于提供内部网络对外部网络的访问能力，并可以使用包过滤拒绝其他方式访问外部网络。</strong></p>  <p><strong>3.现在看一个实例。利用 squid 反向代理提高网站性能 [参考<a href="http://www.bitscn.com/os/linux/200904/158866.html">www.bitscn.com</a>]</strong></p>  <p>反向代理技术在提高网站访问速度，增强网站可用性、安全性方面有很好的用途。可以利用 DNS 轮询和 Squid 反向代理技术，实现了网站的负载均衡，从而提高了网站的可用性和可靠性。</p>  <p><strong>反向代理服务器也称为WEB加速服务器</strong>，它位于WEB 服务器的前端，充当WEB 服务器的内容缓存器。来降低实际的WEB服务器的负载。系统结构如下图 </p>  <p><img src="http://laiba.tianya.cn/laiba/images/837164/12534262251929950470/A/1/m.jpg"></p>  <p>现在有许多大型的门户网站如SINA 都采用squid 反向代理技术来加速网站的访问速度，可将不同的 URL 请求分发到后台不同的WEB 服务器上，同时互联网用户只能看到反向代理服务器的地址，加强了网站的访问安全。</p>  <p>反向代理服务器是针对 WEB 服务器设置的，后台 WEB 服务器对互联网用户是透明的，用户只能看到反向代理服务器的地址，不清楚后台 WEB 服务器是如何组织架构的。当互联网用户请求 WEB 服务时，DNS 将请求的域名解析为反向代理服务器的 IP 地址，这样 URL 请求将被发送到反向代理服务器，由反向代理服务器负责处理用户的请求与应答、与后台 WEB 服务器交互。利用反向代理服务器减轻了后台 WEB 服务器的负载，提高了访问速度，同时避免了因用户直接与 WEB 服务器通信带来的安全隐患。</p>  <p><strong>Squid 反向代理的实现原理</strong> </p>  <p>目前有许多反向代理软件，比较有名的有 <strong>Nginx </strong>和 <strong>Squid </strong>。其他还包括Socks、Apache、Jigsaw、Delegate等。</p>  <p>Nginx 是由 Igor Sysoev 为俄罗斯访问量第二的 Rambler.ru 站点开发的，是一个高性能的 HTTP 和反向代理服务器，也是一个 IMAP/POP3/SMTP 代理服务器。 </p>  <p>Squid 是由美国政府大力资助的一项研究计划，其目的为解决网络带宽不足的问题，支持HTTP，HTTPS，FTP 等多种协议，是现在 Unix 系统上使用、最多功能也最完整的一套软体。下面将重点介绍 Squid 反向代理的实现原理和在提高网站性能方面的应用。 </p>  <p>Squid反向代理服务器位于本地 WEB 服务器和 Internet 之间 , 组织架构如下图</p>  <p><img src="http://laiba.tianya.cn/laiba/images/837164/12534262251929950471/A/1/m.jpg"> </p>  <p>客户端请求访问 WEB 服务时，DNS 将访问的域名解析为 Squid 反向代理服务器的 IP 地址，这样客户端的 URL 请求将被发送到反向代理服务器。如果 Squid 反向代理服务器中缓存了该请求的资源，则将该请求的资源直接返回给客户端，否则反向代理服务器将向后台的 WEB 服务器请求资源，然后将请求的应答返回给客户端，同时也将该应答缓存在本地，供下一个请求者使用。 </p>  <p>Squid 反向代理一般只缓存可缓冲的数据（比如 html 网页和图片等），而一些 CGI 脚本程序或者 ASP、JSP 之类的动态程序默认不缓存。它根据从 WEB 服务器返回的 HTTP 头标记来缓冲静态页面。有四个最重要 HTTP 头标记： </p>  <p>    ●Last-Modified: 告诉反向代理页面什么时间被修改    <br>    ●Expires: 告诉反向代理页面什么时间应该从缓冲区中删除     <br>    ●Cache-Control: 告诉反向代理页面是否应该被缓冲     <br>    ●Pragma: 用来包含实现特定的指令，最常用的是 Pragma:no-cache </p>  <p>配置 Squid1 服务器 ，<font color="#800000"><strong>以下为实战，可跳过直接看测试和总结</strong>（已用红色标出）</font>。</p>  <p>    下载 squid-3.0.STABLE8.tar.gz 源码包，将其放在 /home 目录下    <br>    1.解压缩tar – zxvf squid-3.0.STABLE8.tar.gz     <br>    2.设置配置参数：cd squid-3.0.STABLE10 </p>  <blockquote>   <p>    ./configure – prefix=/usr/local/squid  </p> </blockquote>  <p>    将 squid 安装在 /usr/local 目录下    <br>    3.编译安装：make&amp;make install安装完以后会在 /usr/local 目录下看见 squid 目录。     <br>    4.配置 squid 配置文件     <br>    编辑 squid.conf 文件，vi /usr/local/squid/etc/squid.conf  </p>  <blockquote>   <p>cache_effective_user squid      <br>cache_effective_group squid       <br>######### 设定 squid 的主机名 , 如无此项 squid 将无法启动       <br>visible_hostname squid1.nlc.gov.cn       <br>############# 配置 squid 为加速模式 #################       <br>http_port 80 accel vhost vport       <br>icp_port 3130       <br>##### 配置 squid2、squid3 为其邻居，当 squid1 在其缓存中没有找到请求的资源时，通过 ICP 查询去其邻居中取得缓存       <br>cache_peer squid2.ibm.com.cn sibling 80 3130       <br>cache_peer squid3.ibm.com.cn sibling 80 3130       <br>##### squid1 的三个父节点，originserver 参数指明是源服务器，       <br>round-robin  参数指明 squid 通过轮询方式将请求分发到其中一台父节点；       <br>squid 同时会对这些父节点的健康状态进行检查，如果父节点 down 了，       <br>那么 squid 会从剩余的 origin 服务器中抓取数据       <br>cache_peer 210.82.118.195 parent 8080 0 no-query originserver round-robin \       <br>                                              name=webServer1       <br>cache_peer 192.168.76.226 parent 8080 0 no-query originserver round-robin \       <br>                                              name=webServer2       <br>cache_peer 192.168.76.227 parent 8080 0 no-query originserver round-robin \       <br>                                            name=webServer3       <br>#### 将 wenjin.cache.ibm.com.cn 域的请求通过 RR 轮询方式转发到三个父节点中的一个       <br>cache_peer_domain webServer1 webServer2 webServer3 wenjin.cache.ibm.com.cn       <br>##### 下面是一些访问控制、日志和缓存目录的设置       <br>acl localnet src 192.168.76.223 192.168.76.224 192.168.76.225       <br>acl all src 0.0.0.0/0.0.0.0       <br>http_access allow all       <br>icp_access allow localnet       <br>cache_log /usr/local/squid/var/logs/cache.log       <br>access_log /usr/local/squid/var/logs/access.log squid       <br>cache_dir ufs /usr/local/squid/var/cache/ 1000 16 256       <br>####### 对 squid 的一些优化 ###############       <br>maximum_object_size 10240 KB  ### 能缓存的最大对象为 10M       <br>maximum_object_size_in_memory 512 KB ### 内存中缓存的最大对象 512K       <br>cache_mem 256 MB  ###squid 用于缓存的内存量</p> </blockquote>  <p>    保存后 :wq 退出。 feedom.net </p>  <p>    在 /etc/hosts 文件中添加 </p>  <blockquote>   <p>192.168.76.223  squid1.ibm.com.cn      <br>192.168.76.224  squid2.ibm.com.cn       <br>192.168.76.225  squid3.ibm.com.cn </p> </blockquote>  <p>    保存后 : wq 退出。</p>  <p>    检查 squid 配置文件正确与否：/usr/local/squid/bin/squid – k parse </p>  <p>    生成缓存目录/usr/local/squid/bin/squid – z 54ne.com </p>  <p>    启动squid：/usr/local/squid/bin/squid </p>  <p>    配置 squid2 和 squid3 服务器</p>  <p>    squid2 和 squid3 服务器的配置方法和配置参数和 squid1 一样，配置完成后，分别启动这两个服务器上的 squid 服务。 </p>  <p>    在 squid 的日志文件 cache.log 中，出现如下日志信息则说明三台 squid 之间成功配置为 sibling，且配置了三个父代理。 </p>  <blockquote>   <p>2008/11/17 10:08:47| Configuring Sibling squid1.ibm.com.cn/80/3130      <br>2008/11/17 10:08:47| Configuring Sibling squid3.ibm.com.cn/80/3130       <br>2008/11/17 10:08:47| Configuring Parent 210.82.118.195/8080/0       <br>2008/11/17 10:08:47| Configuring Parent 192.168.76.226/8080/0       <br>2008/11/17 10:08:47| Configuring Parent 192.168.76.227/8080/0       <br>2008/11/17 10:08:47| Ready to serve requests. </p> </blockquote>  <p>    <font color="#800000"><strong>测试</strong></font> </p>  <p>    测试之前，保证 DNS 服务、三台 squid 服务和三台 web 服务都正常起来。在客户端输入http://wenjin.cache.ibm.com.cn，则正确的显示该网页。服务器端的响应对客户端是透明的，客户端不知道请求是由哪台 WEB 服务器处理的；而且其中某台 Squid 服务器或 WEB 服务器发生故障，也不影响服务的正常运行。 </p>  <p>    <strong><font color="#800000">总结</font></strong>  </p>  <p>    Squid 是一个开源的软件，利用它的反向代理技术可以提高网站系统的访问速度。本文在真实的网络环境下，利用三台 squid 反向代理服务器加速了网站的性能，同时结合 DNS 轮询技术实现了网站的负载均衡。经过一段时间的测试和试运行，该网站的访问速度和可用性方面都有很大的提高，从未出现过网站服务中断情况。 </p>
      
                <h4>相关阅读：</h4>
                  <ul>
                
                  <li><a href="http://www.houkai.com/2009/09/1/ipv6-nowall.html">IPV6新用法-翻墙看世界</a></li>
                
                  <li><a href="http://www.houkai.com/2009/07/7/twitter.html">低调地继续使用Twitter的方法</a></li>
                
                </ul>
                
                <p>本文网址:<a href="http://www.houkai.com/2009/09/20/reversed-proxy.html">http://www.houkai.com/2009/09/20/reversed-proxy.html</a></p><img src="http://www1.feedsky.com/t1/282239140/HOUKAI/feedsky/s.gif?r=http://www.houkai.com/2009/09/20/reversed-proxy.html" border="0" height="0" width="0"><p><a href="http://www1.feedsky.com/r/l/feedsky/HOUKAI/282239140/art01.html"><img border="0" ismap src="http://www1.feedsky.com/r/i/feedsky/HOUKAI/282239140/art01.gif"></a></p>