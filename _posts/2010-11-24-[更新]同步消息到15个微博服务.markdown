---
layout: post
title:  "[更新]同步消息到15个微博服务"
date:   2010-11-24 15:46:06
author: GFW BLOG 功夫网
categories: program
---

## [更新]同步消息到15个微博服务
### by GFW BLOG 功夫网
### at 2010-11-24 15:46:06
### original <http://feedproxy.google.com/~r/chinagfwblog/~3/x_E_IaM2o1g/15.html>

来源：<a href="http://isouth.org/archives/277.html">http://isouth.org/archives/277.html</a><br><p>微博多了的人总是在想办法来简化自己的<a href="http://isouth.org/archives/229.html">消息发布流程</a>，在这之前我是使用<a href="http://www.williamlong.info/" rel="external nofollow">月光博客</a>的 一个架设在GAE上的程序来实现部分微博客之间的消息同步。不过稳定性并不是太好，经常性的一天过去了却一条消息都没有同步，而某个时间再一次性全部发到 其他服务上势必造成严重的刷屏效果。加之我还有一些额外的同步需求，此程序无法满足我了，所以最终还是打算自己动手......折腾......</p> <p>目前已经可以较好地实现一次发布消息，并同步地向以下<del>14</del>15个服务发送：<a href="https://twitter.com/qiyi" rel="external nofollow">Twitter</a>、人人、开心、<a href="http://digu.com/bphanzhu" rel="external nofollow">嘀咕</a>、<a href="http://renjian.com/bphanzhu" rel="external nofollow">人间</a>、<a href="http://t.sina.com.cn/bphanzhu" rel="external nofollow">新浪</a>、<a href="http://t.163.com/qiyi" rel="external nofollow">163</a>、<a href="http://m.dii.cn/wap/user/bphanzhu" rel="external nofollow">滴</a>、<a href="http://leihou.com/qiyi" rel="external nofollow">雷猴</a>、<a href="http://bphanzhu.t.sohu.com/" rel="external nofollow">搜狐</a>、<a href="http://zuosa.com/bphanzhu" rel="external nofollow">做啥</a>、<a title="" href="http://www.follow5.com/bphanzhu" rel="external nofollow">Follow5</a>、<a href="http://www.9911.com/bphanzhu" rel="external nofollow">9911</a>、纸飞机（UChome）、叽歪。每个链接都是我的个人页面，没有链接的说明目前不可访问或者由于隐私需要特地而为。</p>  <p>好吧，最主要的还是要讲讲主要的实现方法，着重的分享要点，而不会直接给出我的程序-.-</p> <p>准备工具：给各个 API 发送数据的最佳命令行工具 <strong>Curl</strong>，可以从<a href="http://curl.haxx.se/" rel="external nofollow">这里</a>下载到 for windows 的版本，当然要支持 SSL 的。Ubuntu 等 Linux 用户直接 sudo aptitude install curl 即可。另外我为了更加稳定地向人人网发送信息而用了 <strong>Python</strong>。</p>  <p><span></span> </p><p>我想这些服务主要地分为两类，即开放 API 的和不开放 API 的，<strong>对于开放API的服务</strong>，一般情况下直接使用如下命令：</p> <p><code>curl -u <span style="font-style:italic">user</span>:<span style="font-style:italic">password</span> -d &quot;status=<span style="font-style:italic">message</span>&quot; &quot;API Address&quot;</code></p> <p>最具代表性的 Twitter API 示例</p> <p><code>curl -k -u <span style="font-style:italic">user</span>:<span style="font-style:italic">password</span> -d &quot;status=<span style="font-style:italic">message</span>&quot; <a href="https://api.twitter.com/statuses/update.json">https://api.twitter.com/statuses/update.json</a></code></p>  <p>而<strong>对于不开放 API 的或者 API 使用要求严格</strong>的，则可能需要使用 curl 来模拟登录并发布消息了，这个过程通常需要分析网页源代码，举两个例子，第一个是新浪微博的消息发布（新浪微博虽然开放 API 不过其使用过程中需要 appkey，我申请不到）</p> <div> <ol><li>curl -k -c sina.txt &quot;<a href="https://login.sina.com.cn/sso/login.php?username=">https://login.sina.com.cn/sso/login.php?username=</a><span style="font-style:italic">user_sina</span>&amp;password=<span style="font-style:italic">psw_sina</span>&amp;returntype=TEXT&quot; </li> <li>curl -e &quot;<a href="http://t.sina.com.cn/">http://t.sina.com.cn/</a>&quot; -b sina.txt -d &quot;content=<span style="font-style:italic">message</span>&quot; &quot;<a href="http://t.sina.com.cn/mblog/publish.php">http://t.sina.com.cn/mblog/publish.php</a>&quot; </li> </ol> </div> <p>第一句模拟登录新浪微博，并将cookie文件保存为 sina.txt，第二步是带上 cookie 发布消息，参数中 -k 避免因 https 连接时证书不匹配导致的错误，-c 指定保存 cookie 文件，-e 指定 referer，-b 带上 cookie 文件，-d 以 post 方式提交数据，最后则为目的地址了。</p> <p>再附向163发布消息的代码，这里的 -L 参数可以应对一些页面重定向的情况</p> <div> <ol><li>curl -k -L -e &quot;<a href="http://t.163.com">http://t.163.com</a>&quot; -c 163.txt &quot;<a href="https://reg.163.com/logins.jsp?username=">https://reg.163.com/logins.jsp?username=</a><span style="font-style:italic">user_163</span>&amp;password=<span style="font-style:italic">psw_163</span>&amp;product=t&amp;type=1&quot; </li> <li>curl -b 163.txt -e &quot;<a href="http://t.163.com">http://t.163.com</a>&quot; -d &quot;status=<span style="font-style:italic">message</span>&quot; &quot;<a href="http://t.163.com/statuses/update.do">http://t.163.com/statuses/update.do</a>&quot; </li> </ol> </div> <p>第二个例子为向<strong>开心001</strong>或者<strong>纸飞机</strong>这类 UChome社区发布状态，主要为登录问题，因为他们在登录的时候需要带上一串验证数字verify或者formhash。如果打算用批处理的话可能会稍微烦一点，因为获取该字符串要几个步骤，先以登录纸飞机社区为例</p> <div> <ol><li>curl &quot;<a href="http://my.nuaa.edu.cn/home/do.php?ac=a4d30c424df67e23cdefc40e489f82c2&amp;&amp;ref">http://my.nuaa.edu.cn/home/do.php?ac=a4d30c424df67e23cdefc40e489f82c2&amp;&amp;ref</a>&quot; &gt;home_enuaa.txt</li> <li>findstr formhash home_enuaa.txt &gt; home_enua.txt</li><li>for /f &quot;tokens=4 delims==/&quot; %%i in (&#39;type home_enua.txt&#39;) do (</li><li>set formha=%%i</li><li>set formha=!formha:~1,8!</li><li>)</li><li>curl -c enuaa.txt -d &quot;username=<span style="font-style:italic">user_enuaa</span>&amp;password=<span style="font-style:italic">psw_enuaa</span>&amp;cookietime=315360000&amp; amp;refer=space.php?do\=home&amp;loginsubmit=登录&amp;formhash=!formha!&quot; &quot;<a href="http://my.nuaa.edu.cn/home/do.php?ac=a4d30c424df67e23cdefc40e489f82c2&amp;&amp;ref">http://my.nuaa.edu.cn/home/do.php?ac=a4d30c424df67e23cdefc40e489f82c2&amp;&amp;ref</a>&quot;</li><li>curl -b enuaa.txt -c enuaa.txt &quot;<a href="http://my.nuaa.edu.cn/home/space.php?do=home">http://my.nuaa.edu.cn/home/space.php?do=home</a>&quot; &gt;home_enuaa.txt</li> <li>findstr formhash home_enuaa.txt &gt; home_enua.txt</li><li>for /f &quot;tokens=4 delims==/&quot; %%i in (&#39;type home_enua.txt&#39;) do (</li><li>set formhash=%%i</li><li>set formhash=!formhash:~1,8!</li><li>)</li><li> curl -L -b enuaa.txt -d &quot;message=<span style="font-style:italic">message</span>&quot; -d &quot;addsubmit=true&amp;spacenote=true&amp;formhash=!formhash!&amp;add=更新&quot; &quot;<a href="http://my.nuaa.edu.cn/home/cp.php?ac=doing">http://my.nuaa.edu.cn/home/cp.php?ac=doing</a>&quot; </li> </ol> </div> <p>原则上就是首先访问一遍网页，然后查找字符串，得到相应的验证值之后再登录，发送，并且可能登录的 formhash 和发送时的 formhash 值并不相同。这么复杂的事情交给 Python 来办就好多了，向 开心001 发送消息的例子（片段）</p> <div> <ol><li>import os,re,urllib</li><li>from BeautifulSoup import BeautifulSoup</li><li>curl = r&#39;g:\curl\curl.exe&#39;</li><li>def    UpdateKaixin( user , password , message ):</li><li>    print u&#39;更新开心消息...&#39;</li> <li>    os.system(curl+&#39; -L -c kaixin_cookie.txt -d \&quot;email=&#39;+ user +&#39;&amp;password=&#39;+ password +&#39;&amp;remember=1&amp;from=&amp;refuid=0&amp;refcode=&amp;bind=&amp;gotourl=&amp;submit=true\&quot; \&quot;<a href="http://wml.kaixin001.com/login/login.php%5C">http://wml.kaixin001.com/login/login.php\</a>&quot; &gt;kaixin_temp.txt 2&gt;nul&#39;)</li><li>    kaixin_web=BeautifulSoup(file(r&#39;kaixin_temp.txt&#39;).read())</li><li>    verify = kaixin_web.find(&#39;postfield&#39;,attrs={&#39;name&#39;:&#39;verify&#39;})[&#39;value&#39;]</li><li>    os.system(curl +&#39; -b kaixin_cookie.txt -d \&quot;state=&#39;+ message + &#39;&amp;verify=&#39;+ verify +&#39;\&quot; \&quot;<a href="http://wml.kaixin001.com/home/state_submit.php%5C">http://wml.kaixin001.com/home/state_submit.php\</a>&quot; &gt;nul&#39; )</li><li>    os.system(&#39;del /q kaixin_temp.txt&#39;)</li><li>    os.system(&#39;del /q kaixin_cookie.txt&#39;)</li> </ol> </div> <p>其中的 verify 就是要获取的字符串，我使用了 BeautifulSoup 这个模块来提取网页数据，并且用 os.system 命令来调用 curl，为了简单，这里是模拟登录开心的手机版页面发送消息，因此在消息后会出现手机的标志。这里又有个问题，人人网的登录验证字符串长度可能变化，使 用批处理时不好弄，并且<strong>人人网</strong>模拟登录时可能不大稳定，<a href="http://blog.liancheng.info/?p=280" rel="external nofollow">liancheng</a> 给出了利用 PyXMPP 的方法</p> <div> <ol><li>from pyxmpp import streamtls</li><li>from pyxmpp.jabber.client import JabberClient</li><li>from pyxmpp.jid import JID</li><li>from pyxmpp.presence import Presence</li><li>from sys import argv</li><li>def UpdateR2( user, password, message ):</li> <li>    class R2Client( JabberClient ):</li><li>        def __init__( self, jid, password ):</li><li>            tls = streamtls.TLSSettings( require=True, verify_peer=False )</li><li>            auth = [&#39;sasl:PLAIN&#39;]</li> <li>            JabberClient.__init__( self, jid, password, tls_settings=tls,</li><li>                                   auth_methods=auth )</li><li> </li><li>        def session_started( self ):</li><li>            self.stream.send( Presence( status=message ) )</li> <li>            self.stream.disconnect()</li><li>            self.stream = None</li><li> </li><li>    client = R2Client( JID( <span style="font-style:italic">user</span> + &#39;@<a href="http://talk.xiaonei.com/r2">talk.xiaonei.com/r2</a>&#39; ), <span style="font-style:italic">password</span> )</li> <li>    client.connect()</li><li>    client.loop( 1 )</li></ol> </div> <p>很好很强大，需要注意的是这里的 user 是在自己个人主页地址中的那一串数字。</p> <p>发送消息中还需要注意的是可能需要使用 UTF-8 字符并 URLEncode 编码，而 <a href="http://isouth.org/tag/windows" rel="tag">Windows</a> 中文默认使用 GBK 进行编码，这就需要转换一下了，如果使用 Python，那么可以在 <strong>import urllib</strong> 后使用类似如下语句转换为 UTF-8 编码并 URLEncode</p>  <div> <ol><li>message_ut=message_gb.decode(&#39;gbk&#39;).encode(&#39;utf-8&#39;)</li><li>message=urllib.quote(message_ut)</li></ol> </div> <p>若是为了简便只用批处理，可以访问 “<a href="http://m.isouth.org/ded/urlencode.php?zh=">http://m.isouth.org/ded/urlencode.php?zh=</a>中文字符” 这个地址获得转换后的结果，但是我不保证这个地址长期有效。</p> <p>归类起来也就这么几种情况，稍微熟悉一下就可以组织起来自己编写脚本，只是因为批处理不好处理空格和特殊字符的问题，所以我又转向了 Python 。除了腾讯微博现在不知该怎么处理为好，目前我使用自己编写的脚本来同时给<del>14</del>15个服务更新状态感觉很好，虽然简陋，限制较多，但是安全，快速。</p><br> <div>发一封标题为GFW的邮件到fanqiang70ma@gmail.com，就可获取翻墙利器赛风新地址。附《数字时代》赠阅版。被墙网站收集：http://delicious.com/GFWbookmark，请使用GFWlist为标签，帮助我们收集被墙网站的信息。敬请订阅GFW Blog：http://feeds2.feedburner.com/chinagfwblog，邮件订阅：https://groups.google.com/group/gfw-blog。更多翻墙工具介绍和下载：
推客浏览器（http://twitbrowser.net/blog/，墙内镜像：http://tm005.nl.am/)，Sesawe（http://www.sesawwe.net/）。翻墙互助小组邮件列表: http://groups.google.com/group/bypassgfw。<img width="1" height="1" src="https://blogger.googleusercontent.com/tracker/5500297126185736776-2534404163760751213?l=www.chinagfw.org" alt=""></div><img src="http://feeds.feedburner.com/~r/chinagfwblog/~4/x_E_IaM2o1g" height="1" width="1">