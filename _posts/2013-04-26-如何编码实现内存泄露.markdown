---
layout: post
title:  "如何编码实现内存泄露"
date:   2013-04-26 09:10:54
author: 童海波
categories: program
---

## 如何编码实现内存泄露
### by 童海波
### at 2013-04-26 09:10:54
### original <http://blog.jobbole.com/38718/?utm_source=rss&utm_medium=rss&utm_campaign=%25e5%25a6%2582%25e4%25bd%2595%25e7%25bc%2596%25e7%25a0%2581%25e5%25ae%259e%25e7%258e%25b0%25e5%2586%2585%25e5%25ad%2598%25e6%25ba%25a2%25e5%2587%25ba>

<p>英文原文：<a href="http://plumbr.eu/blog/how-to-create-a-memory-leak">How to create a memory leak</a>，编译：<a href="http://www.oschina.net/translate/how-to-create-a-memory-leak">oschina</a></p>
<p>这将会是一篇比较邪恶的文章，当你想在某个人的生活中制造悲剧时你可能会去google搜索它。在Java的世界里，内存泄露仅仅只是你在这种情况下可能会引入的一种bug。你的受害者会在办公室里度过几天甚至是几周的不眠之夜。</p>
<p>在这篇文章中我将会介绍两种方式，它们都是比较容易理解和重现的。并且它们都是来源现实项目的案例研究，但是为了让你清晰地掌握，我把它们简化了。</p>
<p>不过放心，在我们遇到和解决了很过泄露bug之后，类似的案例将会比你想象得更加普遍。</p>
<p>先来一个进入状态的，在使用<a href="http://docs.oracle.com/javase/7/docs/api/java/util/HashSet.html" rel="nofollow">HashSet</a>/<a href="http://docs.oracle.com/javase/7/docs/api/java/util/HashMap.html" rel="nofollow">HashMap</a>时，所用键值没有或者其equals()/hashCode()方法不正确，这会导致一个臭名昭著的错误。</p>
<pre>class KeylessEntry {

   static class Key {
      Integer id;

      Key(Integer id) {
         this.id = id;
      }

      @Override
      public int hashCode() {
         return id.hashCode();
      }
   }

   public static void main(String[] args) {
      Map m = new HashMap();
      while (true)
         for (int i = 0; i &lt; 10000; i++)
            if (!m.containsKey(i))
               m.put(new Key(i), &quot;Number:&quot; + i);
   }
}</pre>
<p>当你运行上面的代码时，你可能会期望它运行起来永远不会出问题，毕竟内置的缓存方案只会增加到10,000个元素，然后就不会再增加了，所有的key都已经出现在?<a href="http://docs.oracle.com/javase/7/docs/api/java/util/HashMap.html" rel="nofollow">HashMap</a>中。然而，事情并非如此。元素将会一直增长，<a href="http://www.javapractices.com/topic/TopicAction.do?Id=17" rel="nofollow">因为Key这个类没有在hashCode()后实现一个合适的equals()方法。</a></p>
<p>解决方法很简单，只要和下面的示例一样添加一个equals方法就可以了。但是在找到问题所在之前，你肯定已经花费了不少宝贵的脑细胞。</p>
<pre>@Override
public boolean equals(Object o) {
   boolean response = false;
   if (o instanceof Key) {
      response = (((Key)o).id).equals(this.id);
   }
   return response;
}</pre>
<p>下一个你得提醒朋友的是和String处理相关的操作。它的表现会很诡异，特别是结合JVM版本差异的时候。String的内部工作机制在?<a href="http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4513622" rel="nofollow">JDK 7u6</a>中被改变了，所以如果你发现产品环境只是小版本号的区别，那么你已经准备好条件了。把类似下面的代码给你的朋友调试，然后问他为什么这个bug只会在产品中出现。</p>
<pre>class Stringer {
   static final int MB = 1024*512;

   static String createLongString(int length){
      StringBuilder sb = new StringBuilder(length);
      for(int i=0; i &lt; length; i++)
         sb.append(&#39;a&#39;);
      sb.append(System.nanoTime());
      return sb.toString();
   }

   public static void main(String[] args){
      List substrings = new ArrayList();
      for(int i=0; i&lt; 100; i++){
         String longStr = createLongString(MB);
         String subStr = longStr.substring(1,10);
         substrings.add(subStr);
      }
   }
}</pre>
<p>上面的代码出了什么问题呢？当它在JDK 7u6之前的版本上运行的时候，返回的字符串将会保存一个对那个1M左右大小的字符串的引用，如果你运行的时候设置为-Xmx100m，你会得到一个意想不到的oom错误。结合你实验环境中平台和版本的差异，伤脑经的事情就产生了。</p>
<p>现在如果你想掩盖你的足迹，我们可以引进一些更加高级的概念。比如</p>
<ul>
<li>在不同的类加载器中载入有破坏性的代码，在加载的类被原始类加载器删除后保持对它的引用，可以模拟一个<a href="http://plumbr.eu/blog/what-is-a-permgen-leak" rel="nofollow">类加载器泄露</a></li>
<li>把攻击性的代码隐藏在finalize方法中，使得程序表现变得不可预测</li>
<li>在一个长期运行的线程中加入棘手的组合，它可能在ThreadLocals中保存了一些可以被线程池访问的东西，以便管理应用线程。</li>
</ul>
<p>我希望我们给了你一些思考的原材料以及当你想修理某人时的一些素材。这将带来无穷无尽的调试。除非你的朋友使用?<a href="http://plumbr.eu/" rel="nofollow">Plumbr</a>来查找泄露的所在地。</p>
<p>除了比较直白的营销之外，我希望我们已经证明了在Java中制造内存泄露是很容易的事情。相信大多数人都经历过解决它的困难性。所以如果你喜欢这篇文章，可以<a href="https://twitter.com/intent/follow?region=follow_link&amp;screen_name=javaplumbr" rel="nofollow">订阅我们的twitter</a>，我们会发出我们之后对JVM性能调节的相关内容。</p>
<h4>相关文章</h4>
<ul>
<li><a href="http://blog.jobbole.com/20400/"><img src="http://blog.jobbole.com/wp-content/uploads/2011/11/Java-programming-language-logo.jpg" alt="理解ThreadLocal"></a><a href="http://blog.jobbole.com/20400/">理解ThreadLocal</a></li>
<li><a href="http://blog.jobbole.com/23939/"><img src="http://blog.jobbole.com/wp-content/uploads/2011/11/Java-programming-language-logo.jpg" alt="Java对象初始化详解"></a><a href="http://blog.jobbole.com/23939/">Java对象初始化详解</a></li>
<li><a href="http://blog.jobbole.com/844/"><img src="http://blog.jobbole.com/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/14.jpg" alt="异常的代价"></a><a href="http://blog.jobbole.com/844/">异常的代价</a></li>
<li><a href="http://blog.jobbole.com/28506/"><img src="http://blog.jobbole.com/wp-content/uploads/2012/02/python-logo.png" alt="Python关键字yield详解"></a><a href="http://blog.jobbole.com/28506/">Python关键字yield详解</a></li>
<li><a href="http://blog.jobbole.com/28297/"><img width="150" height="150" src="http://blog.jobbole.com/wp-content/uploads/2012/09/image_thumb10-150x150.png" alt="Java多线程发展简史"></a><a href="http://blog.jobbole.com/28297/">Java多线程发展简史</a></li>
<li><a href="http://blog.jobbole.com/22288/"><img width="150" height="150" src="http://blog.jobbole.com/wp-content/uploads/2012/09/github-404-page-150x150.jpg" alt="github 404 page"></a><a href="http://blog.jobbole.com/22288/">从测试300万个超链接接学到的</a></li>
<li><a href="http://blog.jobbole.com/18571/"><img src="http://blog.jobbole.com/wp-content/uploads/2011/11/Java-programming-language-logo.jpg" alt="Java程序员面试中的多线程问题"></a><a href="http://blog.jobbole.com/18571/">Java程序员面试中的多线程问题</a></li>
<li><a href="http://blog.jobbole.com/1198/"><img src="http://www.jobbole.net/wp-content/uploads/2013/02/fibonacci-recursion-tree-300x174-150x150.png" alt="让C程序更高效的10种方法"></a><a href="http://blog.jobbole.com/1198/">让C程序更高效的10种方法</a></li>
<li><a href="http://blog.jobbole.com/37273/"><img width="150" height="150" src="http://blog.jobbole.com/wp-content/uploads/2013/03/download-150x150.png" alt="Java的内存回收机制"></a><a href="http://blog.jobbole.com/37273/">Java的内存回收机制</a></li>
<li><a href="http://blog.jobbole.com/29764/"><img width="150" height="150" src="http://blog.jobbole.com/wp-content/uploads/2012/11/code-quality-150x150.png" alt="一堂如何提高代码质量的培训课"></a><a href="http://blog.jobbole.com/29764/">范钢：一堂如何提高代码质量的培训课</a></li>
</ul>
<p><a href="http://blog.jobbole.com/38718/">如何编码实现内存泄露</a>，首发于<a href="http://blog.jobbole.com">博客 - 伯乐在线</a>。</p>