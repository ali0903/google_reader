---
layout: post
title:  "2011年最后一篇博客——javascript工厂模式小例"
date:   2012-01-21 11:33:38
author: snoopyxdy
categories: program
---

## 2011年最后一篇博客——javascript工厂模式小例
### by snoopyxdy
### at 2012-01-21 11:33:38
### original <http://snoopyxdy.blog.163.com/blog/static/601174402012021105440833>

<div><div>2011最后一篇博客拉，一年没搞什么东西，酱油了大半年，以前晟丰软件老板圈钱跑了，都上新浪游戏和qq游戏首页了，还好及时跳槽了，不然这个年都不知道怎么过了，下半年在新单位一直没有找到好的定位，也没在团队发挥什么作用了，公司的几个项目也只是在其一搞了个聊天系统，其余时间都在酱油，研究了1年的node.js发现越研究越深奥，web服务器，linux，数据库等等，还好在年底有个node.js框架rrestjs产出，希望明年2012能有所建树吧，也希望cnodejs越办越好、node.js能在2012有所突破。</div><div><br></div><div>年底蛋疼看了下javascript秘密花园，感觉像后花园似的，其中一段挺有道理的，贴上：</div><div><br></div>javascipt的new function()，在某些情况下会有所不同，我们看下面的例子：<div><br></div><div><pre><p> function test(){</p><p>    this.<span style="line-height:22px">value </span>= 1;</p><p>    return this.value;</p><p> }</p><p> test.prototype = {</p><p>     getter:function(){alert(this.value)}</p><p> }</p><p> var x = new test();</p><p> var y = test();</p><p><br></p><p> x.getter();//1</p><p> y.getter();//TypeError: y.getter is not a function</p><p><br></p></pre><div>以上是正常的情况，new test()以后可以实例化test这个类，x的getter方法是执行x的原型链<span style="font-family:monospace;line-height:22px;white-space:pre">prototype上的方法。一切正常，但是当test返回值为非原子类型的时候，比如：数组，对象和function时，同样的代码x是无法将其原型链指向</span><span style="font-family:monospace;line-height:22px;white-space:pre">test.prototype。</span></div><div><span style="font-family:monospace;line-height:22px;white-space:pre">我们看代码</span></div><div><pre><p> function test(){<br>    this.value = 1;<br>    return [];// return {}, 或者return function(){} 都是如此<br> }<br> test.prototype = {<br>     getter:function(){alert(this.value)}<br> }<br> var x = new test();<br> var y = test();<br><br> x.getter();//<span style="line-height:22px">TypeError: x.getter is not a function</span><br> y.getter();//TypeError: y.getter is not a function</p><p><br></p></pre><div><br></div>最后介绍一下javascript秘密花园里的工厂模式：个人觉得就是单例模式</div></div><div><pre><p> function test(){</p><p>    var value = 1;<br>    return {</p><p>      getter:function(){alert(value)}</p><p>     };<br> }<br> var x = new test();<br> var y = test();<br><br> x.getter();//1<br> y.getter();//1</p></pre>所以在new 一个类时要注意，return 返回值不能为非原子类型的值，当然我们也经常这样使用：</div><div><pre><p> function test(){</p><p>    if(!(this instanceof test)) return new test();<br>    this.value = 1;<br> }<br> test.prototype = {<br>     getter:function(){alert(this.value)}<br> }<br> var x = test();<br><br> x.getter();//1<br></p></pre>这样就避免使用了new关键字，同时也可以将x的原型链指向<span style="font-family:monospace;line-height:22px;white-space:pre">test.prototype上了。</span></div></div>