---
layout: post
title:  "策略模式-2"
date:   2010-06-23 21:07:00
author: 云飞龙行
categories: program
---

## 策略模式-2
### by 云飞龙行
### at 2010-06-23 21:07:00
### original <http://www.cnblogs.com/sjms/archive/2010/06/23/1763945.html>

<p>作者: <a href="http://www.cnblogs.com/sjms/">云飞龙行</a> 发表于 2010-06-23 21:07 <a href="http://www.cnblogs.com/sjms/archive/2010/06/23/1763945.html">原文链接</a> 阅读: 529 评论: 5</p><h2 style="text-align:center">2  解决方案</h2>
<h3>2.1  策略模式来解决</h3>
<p>        用来解决上述问题的一个合理的解决方案就是策略模式。那么什么是策略模式呢？</p>
<p><strong>（1）策略模式定义</strong><br><strong>         定义一系列的算法，把它们一个个封装起来，并且使它们可相互替换。本模式使得算法可独立于使用它的客户而变化。</strong></p>
<p><strong>（2）应用策略模式来解决的思路</strong><br>        仔细分析上面的问题，先来把它抽象一下，各种计算报价的计算方式就好比是具体的算法，而使用这些计算方式来计算报价的程序，就相当于是使用算法的客户。<br>        再分析上面的实现方式，为什么会造成那些问题，根本原因，就在于算法和使用算法的客户是耦合的，甚至是密不可分的，在上面实现中，具体的算法和使用算法的客户是同一个类里面的不同方法。<br>        现在要解决那些问题，按照策略模式的方式，应该先把所有的计算方式独立出来，每个计算方式做成一个单独的算法类，从而形成一系列的算法，并且为这一系列算法定义一个公共的接口，这些算法实现是同一接口的不同实现，地位是平等的，可以相互替换。这样一来，要扩展新的算法就变成了增加一个新的算法实现类，要维护某个算法，也只是修改某个具体的算法实现即可，不会对其它代码造成影响。也就是说这样就解决了可维护、可扩展的问题。<br>        为了实现让算法能独立于使用它的客户，策略模式引入了一个上下文的对象，这个对象负责持有算法，但是不负责决定具体选用哪个算法，把选择算法的功能交给了客户，由客户选择好具体的算法后，设置到上下文对象里面，让上下文对象持有客户选择的算法，当客户通知上下文对象执行功能的时候，上下文对象会去转调具体的算法。这样一来，具体的算法和直接使用算法的客户是分离的。<br>        具体的算法和使用它的客户分离过后，使得算法可独立于使用它的客户而变化，并且能够动态的切换需要使用的算法，只要客户端动态的选择使用不同的算法，然后设置到上下文对象中去，实际调用的时候，就可以调用到不同的算法。</p>
<h3><br>2.2  模式结构和说明</h3>
<p>        策略模式的结构示意图如图1所示：<br><img src="http://pic002.cnblogs.com/img/sjms2010/201006/2010062321051411.jpg"><br><br> </p>
<p style="text-align:center">图1  策略模式结构示意图</p>
<p><br><strong>Strategy：<br></strong>        策略接口，用来约束一系列具体的策略算法。Context使用这个接口来调用具体的策略实现定义的算法。<br><strong>ConcreteStrategy：<br></strong>        具体的策略实现，也就是具体的算法实现。<br><strong>Context：<br></strong>        上下文，负责和具体的策略类交互，通常上下文会持有一个真正的策略实现，上下文还可以让具体的策略类来获取上下文的数据，甚至让具体的策略类来回调上下文的方法。</p>
<h3><br>2.3  策略模式示例代码</h3>
<p>（1）首先来看策略，也就是定义算法的接口，示例代码如下： </p>
<table cellpadding="0" cellspacing="0" border="1">
<tbody>
<tr>
<td width="531" valign="top">
<p align="left">/**</p>
<p align="left"> * 策略，定义算法的接口</p>
<p align="left"> */</p>
<p align="left">public interface Strategy {</p>
<p align="left">    /**</p>
<p align="left">     * 某个算法的接口，可以有传入参数，也可以有返回值</p>
<p align="left">     */</p>
<p align="left">    public void algorithmInterface();</p>
<p align="left">}</p>
</td>
</tr>
</tbody>
</table>
<p> </p>
<p>（2）该来看看具体的算法实现了，定义了三个，分别是ConcreteStrategyA、ConcreteStrategyB、ConcreteStrategyC，示例非常简单，由于没有具体算法的实现，三者也就是名称不同，示例代码如下： </p>
<table cellpadding="0" cellspacing="0" border="1">
<tbody>
<tr>
<td width="531" valign="top">
<p align="left">/**</p>
<p align="left"> * 实现具体的算法</p>
<p align="left"> */</p>
<p align="left">public class ConcreteStrategyA implements Strategy {</p>
<p align="left">    public void algorithmInterface() {</p>
<p align="left">       //具体的算法实现    </p>
<p align="left">    }</p>
<p align="left">}</p>
</td>
</tr>
<tr>
<td width="531" valign="top">
<p align="left">/**</p>
<p align="left"> * 实现具体的算法</p>
<p align="left"> */</p>
<p align="left">public class ConcreteStrategyB implements Strategy {</p>
<p align="left">    public void algorithmInterface() {</p>
<p align="left">       //具体的算法实现    </p>
<p align="left">    }</p>
<p align="left">}</p>
</td>
</tr>
<tr>
<td width="531" valign="top">
<p align="left">/**</p>
<p align="left"> * 实现具体的算法</p>
<p align="left"> */</p>
<p align="left">public class ConcreteStrategyC implements Strategy {</p>
<p align="left">    public void algorithmInterface() {</p>
<p align="left">       //具体的算法实现    </p>
<p align="left">    }</p>
<p align="left">}</p>
</td>
</tr>
</tbody>
</table>
<p> </p>
<p>（3）再来看看上下文的实现，示例代码如下： </p>
<table cellpadding="0" cellspacing="0" border="1">
<tbody>
<tr>
<td width="531" valign="top">
<p align="left">/**</p>
<p align="left"> * 上下文对象，通常会持有一个具体的策略对象</p>
<p align="left"> */</p>
<p align="left">public class Context {</p>
<p align="left">    /**</p>
<p align="left">     * 持有一个具体的策略对象</p>
<p align="left">     */</p>
<p align="left">    private Strategy strategy;</p>
<p align="left">    /**</p>
<p align="left">     * 构造方法，传入一个具体的策略对象</p>
<p align="left">     * @param aStrategy 具体的策略对象</p>
<p align="left">     */</p>
<p align="left">    public Context(Strategy aStrategy) {</p>
<p align="left">       this.strategy = aStrategy;</p>
<p align="left">    }</p>
<p align="left">    /**</p>
<p align="left">     * 上下文对客户端提供的操作接口，可以有参数和返回值</p>
<p align="left">     */</p>
<p align="left">    public void contextInterface() {</p>
<p align="left">       //通常会转调具体的策略对象进行算法运算</p>
<p align="left">       strategy.algorithmInterface();</p>
<p align="left">    }</p>
<p align="left">}</p>
</td>
</tr>
</tbody>
</table>
<p> </p>
<h3> 2.4  使用策略模式重写示例</h3>
<p>        要使用策略模式来重写前面报价的示例，大致有如下改变：</p>
<ul>
<li>首先需要定义出算法的接口。</li>
<li>然后把各种报价的计算方式单独出来，形成算法类。</li>
<li>对于Price这个类，把它当做上下文，在计算报价的时候，不再需要判断，直接使用持有的具体算法进行运算即可。选择使用哪一个算法的功能挪出去，放到外部使用的客户端去。</li>
</ul>
<p>        这个时候，程序的结构如图2所示：<br><img src="http://pic002.cnblogs.com/img/sjms2010/201006/2010062321054848.jpg"></p>
<p> 图2  使用策略模式实现示例的结构示意图</p>
<p>（1）先看策略接口，示例代码如下： </p>
<table cellpadding="0" cellspacing="0" border="1">
<tbody>
<tr>
<td width="531" valign="top">
<p align="left">/**</p>
<p align="left"> * 策略，定义计算报价算法的接口</p>
<p align="left"> */</p>
<p align="left">public interface Strategy {</p>
<p align="left">    /**</p>
<p align="left">     * 计算应报的价格</p>
<p align="left">     * @param goodsPrice 商品销售原价</p>
<p align="left">     * @return 计算出来的，应该给客户报的价格</p>
<p align="left">     */</p>
<p align="left">    public double calcPrice(double goodsPrice);</p>
<p align="left">}</p>
</td>
</tr>
</tbody>
</table>
<p> </p>
<p>（2）接下来看看具体的算法实现，不同的算法，实现也不一样，先看为新客户或者是普通客户计算应报的价格的实现，示例代码如下： </p>
<table cellpadding="0" cellspacing="0" border="1">
<tbody>
<tr>
<td width="531" valign="top">
<p align="left">/**</p>
<p align="left"> * 具体算法实现，为新客户或者是普通客户计算应报的价格</p>
<p align="left"> */</p>
<p align="left">public class NormalCustomerStrategy implements Strategy{</p>
<p align="left">    public double calcPrice(double goodsPrice) {</p>
<p align="left">       System.<em>out</em>.println("对于新客户或者是普通客户，没有折扣");</p>
<p align="left">       return goodsPrice;</p>
<p align="left">    }</p>
<p align="left">}</p>
</td>
</tr>
</tbody>
</table>
<p> </p>
<p>再看看为老客户计算应报的价格的实现，示例代码如下： </p>
<table cellpadding="0" cellspacing="0" border="1">
<tbody>
<tr>
<td width="531" valign="top">
<p align="left">/**</p>
<p align="left"> * 具体算法实现，为老客户计算应报的价格</p>
<p align="left"> */</p>
<p align="left">public class OldCustomerStrategy implements Strategy{</p>
<p align="left">    public double calcPrice(double goodsPrice) {</p>
<p align="left">       System.<em>out</em>.println("对于老客户，统一折扣5%");</p>
<p align="left">       return goodsPrice*(1-0.05);</p>
<p align="left">    }</p>
<p align="left">}</p>
</td>
</tr>
</tbody>
</table>
<p>再看看为大客户计算应报的价格的实现，示例代码如下：  </p>
<table cellpadding="0" cellspacing="0" border="1">
<tbody>
<tr>
<td width="531" valign="top">
<p align="left">/**</p>
<p align="left"> * 具体算法实现，为大客户计算应报的价格</p>
<p align="left"> */</p>
<p align="left">public class LargeCustomerStrategy implements Strategy{</p>
<p align="left">    public double calcPrice(double goodsPrice) {</p>
<p align="left">       System.<em>out</em>.println("对于大客户，统一折扣10%");</p>
<p align="left">       return goodsPrice*(1-0.1);</p>
<p align="left">    }</p>
<p align="left">}</p>
</td>
</tr>
</tbody>
</table>
<p> </p>
<p><strong>（3）接下来看看上下文的实现，也就是原来的价格类，它的变化比较大，主要有：</strong></p>
<ul>
<li>原来那些私有的，用来做不同计算的方法，已经去掉了，独立出去做成了算法类</li>
<li>原来报价方法里面，对具体计算方式的判断，去掉了，让客户端来完成选择具体算法的功能</li>
<li>新添加持有一个具体的算法实现，通过构造方法传入</li>
<li>原来报价方法的实现，变化成了转调具体算法来实现</li>
</ul>
<p>示例代码如下： </p>
<table cellpadding="0" cellspacing="0" border="1">
<tbody>
<tr>
<td width="531" valign="top">
<p align="left">/**</p>
<p align="left"> * 价格管理，主要完成计算向客户所报价格的功能</p>
<p align="left"> */</p>
<p align="left">public class Price {</p>
<p align="left">    /**</p>
<p align="left">     * 持有一个具体的策略对象</p>
<p align="left">     */</p>
<p align="left">    private Strategy strategy = null;</p>
<p align="left">    /**</p>
<p align="left">     * 构造方法，传入一个具体的策略对象</p>
<p align="left">     * @param aStrategy 具体的策略对象</p>
<p align="left">     */</p>
<p align="left">    public Price(Strategy aStrategy){</p>
<p align="left">       this.strategy = aStrategy;</p>
<p align="left">    }   </p>
<p align="left">    /**</p>
<p align="left">     * 报价，计算对客户的报价</p>
<p align="left">     * @param goodsPrice 商品销售原价</p>
<p align="left">     * @return 计算出来的，应该给客户报的价格</p>
<p align="left">     */</p>
<p align="left">    <strong>public</strong><strong> double quote(double goodsPrice){</strong></p>
<p align="left"><strong>       return this.strategy.calcPrice(goodsPrice);</strong></p>
<p align="left"><strong>    }</strong></p>
<p align="left">}</p>
</td>
</tr>
</tbody>
</table>
<p>（4）写个客户端来测试运行一下，好加深体会，示例代码如下：  </p>
<table cellpadding="0" cellspacing="0" border="1">
<tbody>
<tr>
<td width="531" valign="top">
<p align="left">public class Client {</p>
<p align="left">    public static void main(String[] args) {</p>
<p align="left">       //1：选择并创建需要使用的策略对象</p>
<p align="left">       Strategy strategy = new LargeCustomerStrategy ();</p>
<p align="left">       //2：创建上下文</p>
<p align="left">       Price ctx = new Price(strategy);</p>
<p align="left">       </p>
<p align="left">       //3：计算报价</p>
<p align="left">       double quote = ctx.quote(1000);</p>
<p align="left">       System.<em>out</em>.println("向客户报价："+quote);</p>
<p align="left">    }</p>
<p align="left">}</p>
</td>
</tr>
</tbody>
</table>
<p>        </p>
<p>        运行一下，看看效果。<br>        你可以修改使用不同的策略算法具体实现，现在用的是LargeCustomerStrategy，你可以尝试修改成其它两种实现，试试看，体会一下切换算法的容易性。</p>
<p> </p>
<p> </p>
<p style="text-align:center"><strong><span style="font-size:18pt">未完待续......</span></strong></p><img src="http://www.cnblogs.com/sjms/aggbug/1763945.html?type=1" width="1" height="1" alt=""><p>评论: 5　<a href="http://www.cnblogs.com/sjms/archive/2010/06/23/1763945.html#pagedcomment">查看评论</a>　<a href="http://www.cnblogs.com/sjms/archive/2010/06/23/1763945.html#commentform">发表评论</a></p><p><a href="http://a4.yeshj.com/rd/35451/">软件研发团队管理年会(上海，7.10-7.11)</a></p><hr><p>最新新闻：<br>· <a href="http://news.cnblogs.com/n/66876/">微软：Windows Live Essentials明日发布</a><span style="color:gray">(2010-06-24 10:38)</span><br>· <a href="http://news.cnblogs.com/n/66875/">HTML5取代不了Flash</a><span style="color:gray">(2010-06-24 10:29)</span><br>· <a href="http://news.cnblogs.com/n/66873/">《时代》杂志评选中国“十大山寨制造”</a><span style="color:gray">(2010-06-24 10:05)</span><br>· <a href="http://news.cnblogs.com/n/66872/">谷歌Gmail又出重大故障 企业用户受到影响</a><span style="color:gray">(2010-06-24 10:02)</span><br>· <a href="http://news.cnblogs.com/n/66871/">陈年回应质疑：不会犯PPG那种“大错”</a><span style="color:gray">(2010-06-24 09:57)</span><br></p><p>编辑推荐：<a href="http://kb.cnblogs.com/page/66804/">苹果编程语言和 API 的未来</a><br></p><p>网站导航：<a href="http://www.cnblogs.com">博客园首页</a>  <a href="http://home.cnblogs.com/">个人主页</a>  <a href="http://news.cnblogs.com">新闻</a>  <a href="http://home.cnblogs.com/ing/">闪存</a>  <a href="http://home.cnblogs.com/group/">小组</a>  <a href="http://space.cnblogs.com/q/">博问</a>  <a href="http://space.cnblogs.com">社区</a>  <a href="http://kb.cnblogs.com">知识库</a></p>