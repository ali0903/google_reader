---
layout: post
title:  "Linux内核分析 TCP三次握手"
date:   2013-02-26 14:52:04
author: xsky
categories: program
---

## Linux内核分析 TCP三次握手
### by xsky
### at 2013-02-26 14:52:04
### original <http://www.udpwork.com/item/9322.html>

<p>内核：2.6.34
<br>
TCP是应用最广泛的传输层协议，其提供了面向连接的、可靠的字节流服务，但也正是因为这些特性，使得TCP较之UDP异常复杂，还是分两部分[创建与使用]来进行分析。这篇主要包括TCP的创建及三次握手的过程。
<br>
编程时一般用如下语句创建TCP Socket：</p>
<div><a href="http://www.ericbess.com/ericblog/2008/03/03/wp-codebox/#examples" title="WP-CodeBox HowTo?">?</a><a href="http://www.0xsky.com//javascript:;">View Code</a>CPP<div></div>
</div>
<div><table><tr><td><pre>1
</pre></td>
<td><pre>socket(AF_INET, SOCK_DGRAM, IPPROTO_TCP)</pre></td>
</tr>
</table>
</div>
<p>由此开始分析，调用接口[net/socket.c]: SYSCALL_DEFINE3(socket)
<br>
其中执行两步关键操作：sock_create()与sock_map_fd()</p>
<div><a href="http://www.ericbess.com/ericblog/2008/03/03/wp-codebox/#examples" title="WP-CodeBox HowTo?">?</a><a href="http://www.0xsky.com//javascript:;">View Code</a>CPP<div></div>
</div>
<div><table><tr><td><pre>1
2
3
4
5
6
</pre></td>
<td><pre>retval = sock_create(family, type, protocol, &amp;amp;sock);
if (retval &amp;lt; 0)
 goto out;
retval = sock_map_fd(sock, flags &amp;amp; (O_CLOEXEC | O_NONBLOCK));
if (retval &amp;lt; 0)
 goto out_release;</pre></td>
</tr>
</table>
</div>
<p>sock_create()用于创建socket，sock_map_fd()将之映射到文件描述符，使socket能通过fd进行访问，着重分析sock_create()的创建过程。
<br>
sock_create() -&gt; __sock_create()
<br>
从__sock_create()代码看到创建包含两步：sock_alloc()和pf-&gt;create()。sock_alloc()分配了sock内存空间并初始化inode；pf-&gt;create()初始化了sk。</p>
<div><a href="http://www.ericbess.com/ericblog/2008/03/03/wp-codebox/#examples" title="WP-CodeBox HowTo?">?</a><a href="http://www.0xsky.com//javascript:;">View Code</a>CPP<div></div>
</div>
<div><table><tr><td><pre>1
2
3
4
5
6
</pre></td>
<td><pre>sock = sock_alloc();
sock-&amp;gt;type = type;
……
pf = rcu_dereference(net_families[family]);
……
pf-&amp;gt;create(net, sock, protocol, kern);</pre></td>
</tr>
</table>
</div>
<p>sock_alloc()
<br>
分配空间，通过new_inode()分配了节点(包括socket)，然后通过SOCKET_I宏获得sock，实际上inode和sock是在new_inode()中一起分配的，结构体叫作sock_alloc。</p>
<div><a href="http://www.ericbess.com/ericblog/2008/03/03/wp-codebox/#examples" title="WP-CodeBox HowTo?">?</a><a href="http://www.0xsky.com//javascript:;">View Code</a>CPP<div></div>
</div>
<div><table><tr><td><pre>1
2
</pre></td>
<td><pre>inode = new_inode(sock_mnt-&amp;gt;mnt_sb);
sock = SOCKET_I(inode);</pre></td>
</tr>
</table>
</div>
<p>设置inode的参数，并返回sock。</p>
<div><a href="http://www.ericbess.com/ericblog/2008/03/03/wp-codebox/#examples" title="WP-CodeBox HowTo?">?</a><a href="http://www.0xsky.com//javascript:;">View Code</a>CPP<div></div>
</div>
<div><table><tr><td><pre>1
2
3
4
</pre></td>
<td><pre>inode-&amp;gt;i_mode = S_IFSOCK | S_IRWXUGO;
inode-&amp;gt;i_uid = current_fsuid();
inode-&amp;gt;i_gid = current_fsgid();
return sock;</pre></td>
</tr>
</table>
</div>
<p>继续往下看具体的创建过程：new_inode()，在分配后，会设置i_ino和i_state的值。</p>
<div><a href="http://www.ericbess.com/ericblog/2008/03/03/wp-codebox/#examples" title="WP-CodeBox HowTo?">?</a><a href="http://www.0xsky.com//javascript:;">View Code</a>CPP<div></div>
</div>
<div><table><tr><td><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td>
<td><pre>struct inode *new_inode(struct super_block *sb)
{
 ……
 inode = alloc_inode(sb);
 if (inode) {
  spin_lock(&amp;amp;inode_lock);
  __inode_add_to_lists(sb, NULL, inode);
  inode-&amp;gt;i_ino = ++last_ino;
  inode-&amp;gt;i_state = 0;
  spin_unlock(&amp;amp;inode_lock);
 }
 return inode;
}</pre></td>
</tr>
</table>
</div>
<p>其中的alloc_inode() -&gt; sb-&gt;s_op-&gt;alloc_inode()，sb是sock_mnt-&gt;mnt_sb，所以alloc_inode()指向的是sockfs的操作函数sock_alloc_inode。</p>
<div><a href="http://www.ericbess.com/ericblog/2008/03/03/wp-codebox/#examples" title="WP-CodeBox HowTo?">?</a><a href="http://www.0xsky.com//javascript:;">View Code</a>CPP<div></div>
</div>
<div><table><tr><td><pre>1
2
3
4
5
</pre></td>
<td><pre>static const struct super_operations sockfs_ops = {
 .alloc_inode = sock_alloc_inode,
 .destroy_inode =sock_destroy_inode,
 .statfs = simple_statfs,
};</pre></td>
</tr>
</table>
</div>
<p>sock_alloc_inode()中通过kmem_cache_alloc()分配了struct socket_alloc结构体大小的空间，而struct socket_alloc结构体定义如下，但只返回了inode，实际上socket和inode都已经分配了空间，在之后就可以通过container_of取到socket。</p>
<div><a href="http://www.ericbess.com/ericblog/2008/03/03/wp-codebox/#examples" title="WP-CodeBox HowTo?">?</a><a href="http://www.0xsky.com//javascript:;">View Code</a>CPP<div></div>
</div>
<div><table><tr><td><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td>
<td><pre>static struct inode *sock_alloc_inode(struct super_block *sb)
{
 struct socket_alloc *ei;
 ei = kmem_cache_alloc(sock_inode_cachep, GFP_KERNEL);
 …..
 return &amp;amp;ei-&amp;gt;vfs_inode;
}
struct socket_alloc {
 struct socket socket;
 struct inode vfs_inode;
};  
 
net_families[AF_INET]:
static const struct net_proto_family inet_family_ops = {
 .family = PF_INET,
 .create = inet_create,
 .owner = THIS_MODULE,
};</pre></td>
</tr>
</table>
</div>
<p>err = pf-&gt;create(net, sock, protocol, kern); ==&gt; inet_create()
<br>
这段代码就是从inetsw[]中取到适合的协议类型answer，sock-&gt;type就是传入socket()函数的type参数SOCK_DGRAM，最终取得结果answer-&gt;ops==inet_stream_ops，从上面这段代码还可以看出以下问题：
<br>
socket(AF_INET, SOCK_RAW, IPPROTO_IP)这样是不合法的，因为SOCK_RAW没有默认的协议类型；同样socket(AF_INET, SOCK_DGRAM, IPPROTO_IP)与socket(AF_INET, SOCK_DGRAM, IPPROTO_TCP)是一样的，因为TCP的默认协议类型是IPPTOTO_TCP；SOCK_STREAM与IPPROTO_UDP同上。</p>
<div><a href="http://www.ericbess.com/ericblog/2008/03/03/wp-codebox/#examples" title="WP-CodeBox HowTo?">?</a><a href="http://www.0xsky.com//javascript:;">View Code</a>CPP<div></div>
</div>
<div><table><tr><td><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td>
<td><pre>sock-&amp;gt;state = SS_UNCONNECTED;
list_for_each_entry_rcu(answer, &amp;amp;inetsw[sock-&amp;gt;type], list) {
 err = 0;
 /* Check the non-wild match. */
 if (protocol == answer-&amp;gt;protocol) {
  if (protocol != IPPROTO_IP)
   break;
 } else {
  /* Check for the two wild cases. */
  if (IPPROTO_IP == protocol) {
   protocol = answer-&amp;gt;protocol;
   break;
  }
  if (IPPROTO_IP == answer-&amp;gt;protocol)
   break;
 }
 err = -EPROTONOSUPPORT;
}</pre></td>
</tr>
</table>
</div>
<p>sock-&gt;ops指向inet_stream_ops，然后创建sk，sk-&gt;proto指向tcp_prot，注意这里分配的大小是struct tcp_sock，而不仅仅是struct sock大小</p>
<div><a href="http://www.ericbess.com/ericblog/2008/03/03/wp-codebox/#examples" title="WP-CodeBox HowTo?">?</a><a href="http://www.0xsky.com//javascript:;">View Code</a>CPP<div></div>
</div>
<div><table><tr><td><pre>1
2
3
4
</pre></td>
<td><pre>sock-&amp;gt;ops = answer-&amp;gt;ops;
answer_prot = answer-&amp;gt;prot;
……
sk = sk_alloc(net, PF_INET, GFP_KERNEL, answer_prot);</pre></td>
</tr>
</table>
</div>
<p>然后设置inet的一些参数，这里直接将sk类型转换为inet，因为在sk_alloc()中分配的是struct tcp_sock结构大小，返回的是struct sock，利用了第一个成员的特性，三者之间的关系如下图：</p>
<div><a href="http://www.ericbess.com/ericblog/2008/03/03/wp-codebox/#examples" title="WP-CodeBox HowTo?">?</a><a href="http://www.0xsky.com//javascript:;">View Code</a>CPP<div></div>
</div>
<div><table><tr><td><pre>1
2
3
4
</pre></td>
<td><pre>inet = inet_sk(sk);
……
inet-&amp;gt;inet_id = 0;
sock_init_data(sock, sk);</pre></td>
</tr>
</table>
</div>
<p><img src="http://my.csdn.net/uploads/201208/19/1345352380_2090.jpg"></p>
<p>其中有些设置是比较重要的，如</p>
<div><a href="http://www.ericbess.com/ericblog/2008/03/03/wp-codebox/#examples" title="WP-CodeBox HowTo?">?</a><a href="http://www.0xsky.com//javascript:;">View Code</a>CPP<div></div>
</div>
<div><table><tr><td><pre>1
2
3
4
</pre></td>
<td><pre>sk-&amp;gt;sk_state = TCP_CLOSE;
sk_set_socket(sk, sock);
sk-&amp;gt;sk_protocol = protocol;
sk-&amp;gt;sk_backlog_rcv = sk-&amp;gt;sk_prot-&amp;gt;backlog_rcv;</pre></td>
</tr>
</table>
</div>
<p>创建socket后，接下来的流程会因为客户端或服务器的不同而有所差异，下面着重于分析建立连接的三次握手过程。典型的客户端流程：
<br>
connect() -&gt; send() -&gt; recv()
<br>
典型的服务器流程：
<br>
bind() -&gt; listen() -&gt; accept() -&gt; recv() -&gt; send()</p>
<p>客户端流程
<br>
*发送SYN报文，向服务器发起tcp连接
<br>
connect(fd, servaddr, addrlen);
<br>
-&gt; SYSCALL＿DEFINE3()
<br>
-&gt; sock-&gt;ops-&gt;connect() == inet_stream_connect (sock-&gt;ops即inet_stream_ops)
<br>
-&gt; tcp_v4_connect()
<br>
查找到达[daddr, dport]的路由项，路由项的查找与更新与”路由表”章节所述一样。要注意的是由于是作为客户端调用，创建socket后调用connect，因而saddr, sport都是0，同样在未查找路由前，要走的出接口oif也是不知道的，因此也是0。在查找完路由表后(注意不是路由缓存)，可以得知出接口，但并未存储到sk中。因此插入的路由缓存是特别要注意的：它的键值与实际值是不相同的，这个不同点就在于oif与saddr，键值是[saddr=0, sport=0, daddr, dport, oif=0]，而缓存项值是[saddr, sport=0, daddr, dport, oif]。</p>
<div><a href="http://www.ericbess.com/ericblog/2008/03/03/wp-codebox/#examples" title="WP-CodeBox HowTo?">?</a><a href="http://www.0xsky.com//javascript:;">View Code</a>CPP<div></div>
</div>
<div><table><tr><td><pre>1
2
3
4
5
6
7
8
9
</pre></td>
<td><pre>tmp = ip_route_connect(&amp;amp;rt, nexthop, inet-&amp;gt;inet_saddr,
      RT_CONN_FLAGS(sk), sk-&amp;gt;sk_bound_dev_if,
      IPPROTO_TCP,
      inet-&amp;gt;inet_sport, usin-&amp;gt;sin_port, sk, 1);
if (tmp &amp;lt; 0) {
 if (tmp == -ENETUNREACH)
  IP_INC_STATS_BH(sock_net(sk), IPSTATS_MIB_OUTNOROUTES);
 return tmp;
}</pre></td>
</tr>
</table>
</div>
<p>通过查找到的路由项，对inet进行赋值，可以看到，除了sport，都赋予了值，sport的选择复杂点，因为它要随机从未使用的本地端口中选择一个。</p>
<div><a href="http://www.ericbess.com/ericblog/2008/03/03/wp-codebox/#examples" title="WP-CodeBox HowTo?">?</a><a href="http://www.0xsky.com//javascript:;">View Code</a>CPP<div></div>
</div>
<div><table><tr><td><pre>1
2
3
4
5
6
</pre></td>
<td><pre>if (!inet-&amp;gt;inet_saddr)
 inet-&amp;gt;inet_saddr = rt_rt_src;
inet-&amp;gt;inet_rcv_addr = inet-&amp;gt;inet_saddr;
……
inet-&amp;gt;inet_dport = usin-&amp;gt;sin_port;
inet-&amp;gt;inet_daddr = daddr;</pre></td>
</tr>
</table>
</div>
<p>状态从CLOSING转到TCP_SYN_SENT，也就是我们熟知的TCP的状态转移图。</p>
<div><a href="http://www.ericbess.com/ericblog/2008/03/03/wp-codebox/#examples" title="WP-CodeBox HowTo?">?</a><a href="http://www.0xsky.com//javascript:;">View Code</a>CPP<div></div>
</div>
<div><table><tr><td><pre>1
</pre></td>
<td><pre>tcp_set_state(sk, TCP_SYN_SENT);</pre></td>
</tr>
</table>
</div>
<p>插入到bind链表中</p>
<div><a href="http://www.ericbess.com/ericblog/2008/03/03/wp-codebox/#examples" title="WP-CodeBox HowTo?">?</a><a href="http://www.0xsky.com//javascript:;">View Code</a>CPP<div></div>
</div>
<div><table><tr><td><pre>1
</pre></td>
<td><pre>err = inet_hash_connect(&amp;amp;tcp_death_row, sk); //== &amp;gt; __inet_hash_connect()</pre></td>
</tr>
</table>
</div>
<p>当snum==0时，表明此时源端口没有指定，此时会随机选择一个空闲端口作为此次连接的源端口。low和high分别表示可用端口的下限和上限，remaining表示可用端口的数，注意这里的可用只是指端口可以用作源端口，其中部分端口可能已经作为其它socket的端口号在使用了，所以要循环1~remaining，直到查找到空闲的源端口。</p>
<div><a href="http://www.ericbess.com/ericblog/2008/03/03/wp-codebox/#examples" title="WP-CodeBox HowTo?">?</a><a href="http://www.0xsky.com//javascript:;">View Code</a>CPP<div></div>
</div>
<div><table><tr><td><pre>1
2
3
4
5
</pre></td>
<td><pre>if (!snum) {
 inet_get_local_port_range(&amp;amp;low, &amp;amp;high);
 remaining = (high - low) + 1;
 ……
 for (i = 1; i</pre></td>
</tr>
</table>
</div>
<p>下面来看下对每个端口的检查，即//choose a valid port部分的代码。这里要先了解下tcp的内核表组成，udp的表内核表udptable只是一张hash表，tcp的表则稍复杂，它的名字是tcp_hashinfo，在tcp_init()中被初始化，这个数据结构定义如下(省略了不相关的数据)：</p>
<div><a href="http://www.ericbess.com/ericblog/2008/03/03/wp-codebox/#examples" title="WP-CodeBox HowTo?">?</a><a href="http://www.0xsky.com//javascript:;">View Code</a>CPP<div></div>
</div>
<div><table><tr><td><pre>1
2
3
4
5
6
7
8
</pre></td>
<td><pre>struct inet_hashinfo {
 struct inet_ehash_bucket *ehash;
 ……
 struct inet_bind_hashbucket *bhash;
 ……
 struct inet_listen_hashbucket  listening_hash[INET_LHTABLE_SIZE]
     ____cacheline_aligned_in_smp;
};</pre></td>
</tr>
</table>
</div>
<p>从定义可以看出，tcp表又分成了三张表ehash, bhash, listening_hash，其中ehash, listening_hash对应于socket处在TCP的ESTABLISHED, LISTEN状态，bhash对应于socket已绑定了本地地址。三者间并不互斥，如一个socket可同时在bhash和ehash中，由于TIME_WAIT是一个比较特殊的状态，所以ehash又分成了chain和twchain，为TIME_WAIT的socket单独形成一张表。
<br>
回到刚才的代码，现在还只是建立socket连接，使用的就应该是tcp表中的bhash。首先取得内核tcp表的bind表 – bhash，查看是否已有socket占用：
<br>
如果没有，则调用inet_bind_bucket_create()创建一个bind表项tb，并插入到bind表中，跳转至goto ok代码段；
<br>
如果有，则跳转至goto ok代码段。
<br>
进入ok代码段表明已找到合适的bind表项(无论是创建的还是查找到的)，调用inet_bind_hash()赋值源端口inet_num。</p>
<div><a href="http://www.ericbess.com/ericblog/2008/03/03/wp-codebox/#examples" title="WP-CodeBox HowTo?">?</a><a href="http://www.0xsky.com//javascript:;">View Code</a>CPP<div></div>
</div>
<div><table><tr><td><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td>
<td><pre>for (i = 1; i bhash[inet_bhashfn(net, port, hinfo-&amp;gt;bhash_size)];
 ……
 inet_bind_bucket_for_each(tb, node, &amp;amp;head-&amp;gt;chain) {
  if (net_eq(ib_net(tb), net) &amp;amp;&amp;amp; tb-&amp;gt;port == port) {
   if (tb-&amp;gt;fastreuse &amp;gt;= 0)
    goto next_port;
   WARN_ON(hlist_empty(&amp;amp;tb-&amp;gt;owners));
   if (!check_established(death_row, sk, port, &amp;amp;tw))
    goto ok;
   goto next_port;
  }
 }  
 
 tb = inet_bind_bucket_create(hinfo-&amp;gt;bind_bucket_cachep, net, head, port);
 ……
 next_port:
  spin_unlock(&amp;amp;head-&amp;gt;lock);
}  
 
ok:
 ……
inet_bind_hash(sk, tb, port);
 ……
 goto out;</pre></td>
</tr>
</table>
</div>
<p>在获取到合适的源端口号后，会重建路由项来进行更新：</p>
<div><a href="http://www.ericbess.com/ericblog/2008/03/03/wp-codebox/#examples" title="WP-CodeBox HowTo?">?</a><a href="http://www.0xsky.com//javascript:;">View Code</a>CPP<div></div>
</div>
<div><table><tr><td><pre>1
</pre></td>
<td><pre>err = ip_route_newports(&amp;amp;rt, IPPROTO_TCP, inet-&amp;gt;inet_sport, inet-&amp;gt;inet_dport, sk);</pre></td>
</tr>
</table>
</div>
<p>函数比较简单，在获取sport前已经查找过一次路由表，并插入了key=[saddr=0, sport=0, daddr, dport, oif=0]的路由缓存项；现在获取到了sport，调用ip_route_output_flow()再次更新路由缓存表，它会添加key=[saddr=0, sport, daddr, dport, oif=0]的路由缓存项。这里可以看出一个策略选择，查询路由表-&gt;获取sport-&gt;查询路由表，为什么不是获取sport-&gt;查询路由表的原因可能是效率的问题。</p>
<div><a href="http://www.ericbess.com/ericblog/2008/03/03/wp-codebox/#examples" title="WP-CodeBox HowTo?">?</a><a href="http://www.0xsky.com//javascript:;">View Code</a>CPP<div></div>
</div>
<div><table><tr><td><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td>
<td><pre>if (sport != (*rp)-&amp;gt;fl.fl_ip_sport ||
    dport != (*rp)-&amp;gt;fl.fl_ip_dport) {
 struct flowi fl;  
 
 memcpy(&amp;amp;fl, &amp;amp;(*rp)-&amp;gt;fl, sizeof(fl));
 fl.fl_ip_sport = sport;
 fl.fl_ip_dport = dport;
 fl.proto = protocol;
 ip_rt_put(*rp);
 *rp = NULL;
 security_sk_classify_flow(sk, &amp;amp;fl);
 return ip_route_output_flow(sock_net(sk), rp, &amp;amp;fl, sk, 0);
}</pre></td>
</tr>
</table>
</div>
<p>write_seq相当于第一次发送TCP报文的ISN，如果为0，则通过计算获取初始值，否则延用上次的值。在获取完源端口号，并查询过路由表后，TCP正式发送SYN报文，注意在这之前TCP状态已经更新成了TCP_SYN_SENT，而在函数最后才调用tcp_connect(sk)发送SYN报文，这中间是有时差的。</p>
<div><a href="http://www.ericbess.com/ericblog/2008/03/03/wp-codebox/#examples" title="WP-CodeBox HowTo?">?</a><a href="http://www.0xsky.com//javascript:;">View Code</a>CPP<div></div>
</div>
<div><table><tr><td><pre>1
2
3
4
5
6
7
</pre></td>
<td><pre>if (!tp-&amp;gt;write_seq)
 tp-&amp;gt;write_seq = secure_tcp_sequence_number(inet-&amp;gt;inet_saddr,
         inet-&amp;gt;inet_daddr,
         inet-&amp;gt;inet_sport,
         usin-&amp;gt;sin_port);
inet-&amp;gt;inet_id = tp-&amp;gt;write_seq ^ jiffies;
err = tcp_connect(sk);</pre></td>
</tr>
</table>
</div>
<p>tcp_connect()　发送SYN报文
<br>
几步重要的代码如下，tcp_connect_init()中设置了tp-&gt;rcv_nxt=0，tcp_transmit_skb()负责发送报文，其中seq=tcb-&gt;seq=tp-&gt;write_seq，ack_seq=tp-&gt;rcv_nxt。</p>
<div><a href="http://www.ericbess.com/ericblog/2008/03/03/wp-codebox/#examples" title="WP-CodeBox HowTo?">?</a><a href="http://www.0xsky.com//javascript:;">View Code</a>CPP<div></div>
</div>
<div><table><tr><td><pre>1
2
3
4
</pre></td>
<td><pre>tcp_connect_init(sk);
tp-&amp;gt;snd_nxt = tp-&amp;gt;write_seq;
……
tcp_transmit_skb(sk, buff, 1, sk-&amp;gt;sk_allocation);</pre></td>
</tr>
</table>
</div>
<p>*收到服务端的SYN+ACK，发送ACK
<br>
tcp_rcv_synsent_state_process()
<br>
此时已接收到对方的ACK，状态变迁到TCP_ESTABLISHED。最后发送对方SYN的ACK报文。</p>
<div><a href="http://www.ericbess.com/ericblog/2008/03/03/wp-codebox/#examples" title="WP-CodeBox HowTo?">?</a><a href="http://www.0xsky.com//javascript:;">View Code</a>CPP<div></div>
</div>
<div><table><tr><td><pre>1
2
</pre></td>
<td><pre>tcp_set_state(sk, TCP_ESTABLISHED);
tcp_send_ack(sk);</pre></td>
</tr>
</table>
</div>
<p>服务端流程
<br>
*bind() -&gt; inet_bind()
<br>
bind操作的主要作用是将创建的socket与给定的地址相绑定，这样创建的服务才能公开的让外部调用。当然对于socket服务器的创建来说，这一步不是必须的，在listen()时如果没有绑定地址，系统会选择一个随机可用地址作为服务器地址。
<br>
一个socket地址分为ip和port，inet-&gt;inet_saddr赋值了传入的ip，snum是传入的port，对于端口，要检查它是否已被占用，这是由sk-&gt;sk_prot-&gt;get_port()完成的(这个函数前面已经分析过，在传入port时它检查是否被占用；传入port=0时它选择未用的端口)。如果没有被占用，inet-&gt;inet_sport被赋值port，因为是服务监听端，不需要远端地址，inet_daddr和inet_dport都置0。
<br>
注意bind操作不会改变socket的状态，仍为创建时的TCP_CLOSE。</p>
<div><a href="http://www.ericbess.com/ericblog/2008/03/03/wp-codebox/#examples" title="WP-CodeBox HowTo?">?</a><a href="http://www.0xsky.com//javascript:;">View Code</a>CPP<div></div>
</div>
<div><table><tr><td><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td>
<td><pre>snum = ntohs(addr-&amp;gt;sin_port);
……
inet-&amp;gt;inet_rcv_saddr = inet-&amp;gt;inet_saddr = addr-&amp;gt;sin_addr.s_addr;
if (sk-&amp;gt;sk_prot-&amp;gt;get_port(sk, snum)) {
 inet-&amp;gt;inet_saddr = inet-&amp;gt;inet_rcv_saddr = 0;
 err = -EADDRINUSE;
 goto out_release_sock;
}
……
inet-&amp;gt;inet_sport = htons(inet-&amp;gt;inet_num);
inet-&amp;gt;inet_daddr = 0;
inet-&amp;gt;inet_dport = 0;</pre></td>
</tr>
</table>
</div>
<p>listen() -&gt; inet_listen()
<br>
listen操作开始服务器的监听，此时服务就可以接受到外部连接了。在开始监听前，要检查状态是否正确，sock-&gt;state==SS_UNCONNECTED确保仍是未连接的socket，sock-&gt;type==SOCK_STREAM确保是TCP协议，old_state确保此时状态是TCP_CLOSE或TCP_LISTEN，在其它状态下进行listen都是错误的。</p>
<div><a href="http://www.ericbess.com/ericblog/2008/03/03/wp-codebox/#examples" title="WP-CodeBox HowTo?">?</a><a href="http://www.0xsky.com//javascript:;">View Code</a>CPP<div></div>
</div>
<div><table><tr><td><pre>1
2
3
4
5
</pre></td>
<td><pre>if (sock-&amp;gt;state != SS_UNCONNECTED || sock-&amp;gt;type != SOCK_STREAM)
 goto out;
old_state = sk-&amp;gt;sk_state;
if (!((1 &amp;lt;&amp;lt; old_state) &amp;amp; (TCPF_CLOSE | TCPF_LISTEN)))
 goto out;</pre></td>
</tr>
</table>
</div>
<p>如果已是TCP_LISTEN态，则直接跳过，不用再执行listen了，而只是重新设置listen队列长度sk_max_ack_backlog，改变listen队列长也是多次执行listen的作用。如果还没有执行listen，则还要调用inet_csk_listen_start()开始监听。
<br>
inet_csk_listen_start()变迁状态至TCP_LISTEN，分配监听队列，如果之前没有调用bind()绑定地址，则这里会分配一个随机地址。</p>
<div><a href="http://www.ericbess.com/ericblog/2008/03/03/wp-codebox/#examples" title="WP-CodeBox HowTo?">?</a><a href="http://www.0xsky.com//javascript:;">View Code</a>CPP<div></div>
</div>
<div><table><tr><td><pre>1
2
3
4
5
6
</pre></td>
<td><pre>if (old_state != TCP_LISTEN) {
 err = inet_csk_listen_start(sk, backlog);
 if (err)
  goto out;
}
sk-&amp;gt;sk_max_ack_backlog = backlog;</pre></td>
</tr>
</table>
</div>
<p>accept()
<br>
accept() -&gt; sys_accept4() -&gt; inet_accept() -&gt; inet_csk_accept()
<br>
accept()实际要做的事件并不多，它的作用是返回一个已经建立连接的socket(即经过了三次握手)，这个过程是异步的，accept()并不亲自去处理三次握手过程，而只是监听icsk_accept_queue队列，当有socket经过了三次握手，它就会被加到icsk_accept_queue中，所以accept要做的就是等待队列中插入socket，然后被唤醒并返回这个socket。而三次握手的过程完全是协议栈本身去完成的。换句话说，协议栈相当于写者，将socket写入队列，accept()相当于读者，将socket从队列读出。这个过程从listen就已开始，所以即使不调用accept()，客户仍可以和服务器建立连接，但由于没有处理，队列很快会被占满。</p>
<div><a href="http://www.ericbess.com/ericblog/2008/03/03/wp-codebox/#examples" title="WP-CodeBox HowTo?">?</a><a href="http://www.0xsky.com//javascript:;">View Code</a>CPP<div></div>
</div>
<div><table><tr><td><pre>1
2
3
4
5
6
</pre></td>
<td><pre>if (reqsk_queue_empty(&amp;amp;icsk-&amp;gt;icsk_accept_queue)) {
 long timeo = sock_rcvtimeo(sk, flags &amp;amp; O_NONBLOCK);
 ……
 error = inet_csk_wait_for_connect(sk, timeo);
 ……
}</pre></td>
</tr>
</table>
</div>
<p>newsk = reqsk_queue_get_child(&amp;icsk-&gt;icsk_accept_queue, sk);
<br>
协议栈向队列中加入socket的过程就是完成三次握手的过程，客户端通过向已知的listen fd发起连接请求，对于到来的每个连接，都会创建一个新的sock，当它经历了TCP_SYN_RCV -&gt; TCP_ESTABLISHED后，就会被添加到icsk_accept_queue中，而监听的socket状态始终为TCP_LISTEN，保证连接的建立不会影响socket的接收。
<br>
*接收客户端发来的SYN，发送SYN+ACK
<br>
tcp_v4_do_rcv()
<br>
tcp_v4_do_rcv()是TCP模块接收的入口函数，客户端发起请求的对象是listen fd，所以sk-&gt;sk_state == TCP_LISTEN，调用tcp_v4_hnd_req()来检查是否处于半连接，只要三次握手没有完成，这样的连接就称为半连接，具体而言就是收到了SYN，但还没有收到ACK的连接，所以对于这个查找函数，如果是SYN报文，则会返回listen的socket(连接尚未创建)；如果是ACK报文，则会返回SYN报文处理中插入的半连接socket。其中存储这些半连接的数据结构是syn_table，它在listen()调用时被创建，大小由sys_ctl_max_syn_backlog和listen()传入的队列长度决定。
<br>
此时是收到SYN报文，tcp_v4_hnd_req()返回的仍是sk，调用tcp_rcv_state_process()来接收SYN报文，并发送SYN+ACK报文，同时向syn_table中插入一项表明此次连接的sk。</p>
<div><a href="http://www.ericbess.com/ericblog/2008/03/03/wp-codebox/#examples" title="WP-CodeBox HowTo?">?</a><a href="http://www.0xsky.com//javascript:;">View Code</a>CPP<div></div>
</div>
<div><table><tr><td><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td>
<td><pre>if (sk-&amp;gt;sk_state == TCP_LISTEN) {
 struct sock *nsk = tcp_v4_hnd_req(sk, skb);
 if (!nsk)
  goto discard;
 if (nsk != sk) {
  if (tcp_child_process(sk, nsk, skb)) {
   rsk = nsk;
   goto reset;
  }
  return 0;
 }
}
TCP_CHECK_TIMER(sk);
if (tcp_rcv_state_process(sk, skb, tcp_hdr(skb), skb-&amp;gt;len)) {
 rsk = sk;
 goto reset;
}</pre></td>
</tr>
</table>
</div>
<p>tcp_rcv_state_process()处理各个状态上socket的情况。下面是处于TCP_LISTEN的代码段，处于TCP_LISTEN的socket不会再向其它状态变迁，它负责监听，并在连接建立时创建新的socket。实际上，当收到第一个SYN报文时，会执行这段代码，conn_request() =&gt; tcp_v4_conn_request。</p>
<div><a href="http://www.ericbess.com/ericblog/2008/03/03/wp-codebox/#examples" title="WP-CodeBox HowTo?">?</a><a href="http://www.0xsky.com//javascript:;">View Code</a>CPP<div></div>
</div>
<div><table><tr><td><pre>1
2
3
4
5
6
7
8
</pre></td>
<td><pre>case TCP_LISTEN:
……
 if (th-&amp;gt;syn) {
  if (icsk-&amp;gt;icsk_af_ops-&amp;gt;conn_request(sk, skb) &amp;lt; 0)
   return 1;
  kfree_skb(skb);
  return 0;
 }</pre></td>
</tr>
</table>
</div>
<p>tcp_v4_conn_request()中注意两个函数就可以了：tcp_v4_send_synack()向客户端发送了SYN+ACK报文，inet_csk_reqsk_queue_hash_add()将sk添加到了syn_table中，填充了该客户端相关的信息。这样，再次收到客户端的ACK报文时，就可以在syn_table中找到相应项了。</p>
<div><a href="http://www.ericbess.com/ericblog/2008/03/03/wp-codebox/#examples" title="WP-CodeBox HowTo?">?</a><a href="http://www.0xsky.com//javascript:;">View Code</a>CPP<div></div>
</div>
<div><table><tr><td><pre>1
2
3
</pre></td>
<td><pre>if (tcp_v4_send_synack(sk, dst, req, (struct request_values *)&amp;amp;tmp_ext) || want_cookie)
 goto drop_and_free;
inet_csk_reqsk_queue_hash_add(sk, req, TCP_TIMEOUT_INIT);</pre></td>
</tr>
</table>
</div>
<p>*接收客户端发来的ACK
<br>
tcp_v4_do_rcv()
<br>
过程与收到SYN报文相同，不同点在于syn_table中已经插入了有关该连接的条目，tcp_v4_hnd_req()会返回一个新的sock: nsk，然后会调用tcp_child_process()来进行处理。在tcp_v4_hnd_req()中会创建新的sock，下面详细看下这个函数。</p>
<div><a href="http://www.ericbess.com/ericblog/2008/03/03/wp-codebox/#examples" title="WP-CodeBox HowTo?">?</a><a href="http://www.0xsky.com//javascript:;">View Code</a>CPP<div></div>
</div>
<div><table><tr><td><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td>
<td><pre>if (sk-&amp;gt;sk_state == TCP_LISTEN) {
 struct sock *nsk = tcp_v4_hnd_req(sk, skb);
 if (!nsk)
  goto discard;
 if (nsk != sk) {
  if (tcp_child_process(sk, nsk, skb)) {
   rsk = nsk;
   goto reset;
  }
  return 0;
 }
}</pre></td>
</tr>
</table>
</div>
<p>tcp_v4_hnd_req()
<br>
之前已经分析过，inet_csk_search_req()会在syn_table中找到req，此时进入tcp_check_req()</p>
<div><a href="http://www.ericbess.com/ericblog/2008/03/03/wp-codebox/#examples" title="WP-CodeBox HowTo?">?</a><a href="http://www.0xsky.com//javascript:;">View Code</a>CPP<div></div>
</div>
<div><table><tr><td><pre>1
2
3
4
</pre></td>
<td><pre>struct request_sock *req = inet_csk_search_req(sk, &amp;amp;prev, th-&amp;gt;source, iph-&amp;gt;saddr, iph-&amp;gt;daddr);
if (req)
 return tcp_check_req(sk, skb, req, prev);
tcp_check_req()</pre></td>
</tr>
</table>
</div>
<p>syn_recv_sock() -&gt; tcp_v4_syn_recv_sock()会创建一个新的sock并返回，创建的sock状态被直接设置为TCP_SYN_RECV，然后因为此时socket已经建立，将它添加到icsk_accept_queue中。
<br>
状态TCP_SYN_RECV的设置可能比较奇怪，按照TCP的状态转移图，在服务端收到SYN报文后变迁为TCP_SYN_RECV，但看到在实现中收到ACK后才有了状态TCP_SYN_RECV，并且马上会变为TCP_ESTABLISHED，所以这个状态变得无足轻重。这样做的原因是listen和accept返回的socket是不同的，而只有真正连接建立时才会创建这个新的socket，在收到SYN报文时新的socket还没有建立，就无从谈状态变迁了。这里同样是一个平衡的存在，你也可以在收到SYN时创建一个新的socket，代价就是无用的socket大大增加了。</p>
<div><a href="http://www.ericbess.com/ericblog/2008/03/03/wp-codebox/#examples" title="WP-CodeBox HowTo?">?</a><a href="http://www.0xsky.com//javascript:;">View Code</a>CPP<div></div>
</div>
<div><table><tr><td><pre>1
2
3
4
5
6
7
</pre></td>
<td><pre>child = inet_csk(sk)-&amp;gt;icsk_af_ops-&amp;gt;syn_recv_sock(sk, skb, req, NULL);
if (child == NULL)
 goto listen_overflow;
inet_csk_reqsk_queue_unlink(sk, req, prev);
inet_csk_reqsk_queue_removed(sk, req);
inet_csk_reqsk_queue_add(sk, req, child);
tcp_child_process()</pre></td>
</tr>
</table>
</div>
<p>如果此时sock: child被用户进程锁住了，那么就先添加到backlog中__sk_add_backlog()，待解锁时再处理backlog上的sock；如果此时没有被锁住，则先调用tcp_rcv_state_process()进行处理，处理完后，如果child状态到达TCP_ESTABLISHED，则表明其已就绪，调用sk_data_ready()唤醒等待在isck_accept_queue上的函数accept()。</p>
<div><a href="http://www.ericbess.com/ericblog/2008/03/03/wp-codebox/#examples" title="WP-CodeBox HowTo?">?</a><a href="http://www.0xsky.com//javascript:;">View Code</a>CPP<div></div>
</div>
<div><table><tr><td><pre>1
2
3
4
5
6
7
</pre></td>
<td><pre>if (!sock_owned_by_user(child)) {
 ret = tcp_rcv_state_process(child, skb, tcp_hdr(skb), skb-&amp;gt;len);
 if (state == TCP_SYN_RECV &amp;amp;&amp;amp; child-&amp;gt;sk_state != state)
  parent-&amp;gt;sk_data_ready(parent, 0);
} else {
 __sk_add_backlog(child, skb);
}</pre></td>
</tr>
</table>
</div>
<p>tcp_rcv_state_process()处理各个状态上socket的情况。下面是处于TCP_SYN_RECV的代码段，注意此时传入函数的sk已经是新创建的sock了(在tcp_v4_hnd_req()中)，并且状态是TCP_SYN_RECV，而不再是listen socket，在收到ACK后，sk状态变迁为TCP_ESTABLISHED，而在tcp_v4_hnd_req()中也已将sk插入到了icsk_accept_queue上，此时它就已经完全就绪了，回到tcp_child_process()便可执行sk_data_ready()。</p>
<div><a href="http://www.ericbess.com/ericblog/2008/03/03/wp-codebox/#examples" title="WP-CodeBox HowTo?">?</a><a href="http://www.0xsky.com//javascript:;">View Code</a>CPP<div></div>
</div>
<div><table><tr><td><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td>
<td><pre>case TCP_SYN_RECV:
 if (acceptable) {
  ……
  tcp_set_state(sk, TCP_ESTABLISHED);
  sk-&amp;gt;sk_state_change(sk);
  ……
  tp-&amp;gt;snd_una = TCP_SKB_CB(skb)-&amp;gt;ack_seq;
  tp-&amp;gt;snd_wnd = ntohs(th-&amp;gt;window) &amp;lt;&amp;lt; tp-&amp;gt;rx_opt.snd_wscale;
  tcp_init_wl(tp, TCP_SKB_CB(skb)-&amp;gt;seq);
  ……
}
      最后总结三次握手的过程</pre></td>
</tr>
</table>
</div>
<p><img src="http://my.csdn.net/uploads/201208/19/1345352426_6467.png"></p>
<div><a href="http://www.ericbess.com/ericblog/2008/03/03/wp-codebox/#examples" title="WP-CodeBox HowTo?">?</a><a href="http://www.0xsky.com//javascript:;">View Code</a>CPP<div></div>
</div>
<div><table><tr><td><pre>1
2
</pre></td>
<td><pre>查看原文：
http://blog.csdn.net/qy532846454/article/details/7882819</pre></td>
</tr>
</table>
</div>

			<div style="margin-top:8px;padding:6px 0;border-top:1px solid #3cf">
				<div style="text-align:center;margin:16px 0;padding:6px;border:0px dashed #999;font-family:arial;font-size:26px;font-weight:bold">
	<a href="http://www.udpwork.com/item/9322.html#review_form" title="不喜欢" style="text-decoration:none">
		<img src="http://www.udpwork.com//images/thumb_down24.gif" alt="">
		<span style="color:#f33">0</span>
	</a>
	   
	<a href="http://www.udpwork.com/item/9322.html#review_form" title="喜欢" style="text-decoration:none">
		<img src="http://www.udpwork.com//images/thumb_up24.gif" alt="">
		<span style="color:#3c3">0</span>
	</a>
</div>				<p>
					由 <a href="http://www.udpwork.com/">udpwork.com</a> 聚合
					|
					<a href="http://www.udpwork.com/item/9322.html#reviews">评论: 0</a>
					|
					<a href="http://www.jikenow.com/">要! 要! 即刻! Now!</a>
				</p>
			</div>