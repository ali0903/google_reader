---
layout: post
title:  "Spring.NET企业架构实践之 NHibernate + Spring.NET + WCF + Windows服务 + Silverlight 中小企业应用架构完整Demo"
date:   2010-10-16 14:03:00
author: 刘冬.NET
categories: program
---

## Spring.NET企业架构实践之 NHibernate + Spring.NET + WCF + Windows服务 + Silverlight 中小企业应用架构完整Demo
### by 刘冬.NET
### at 2010-10-16 14:03:00
### original <http://www.cnblogs.com/GoodHelper/archive/2010/10/16/SpringNetFramework_Step2.html>

<p><p>　　最近由于工作忙的原因，博客更新的比较慢，在此给园子里的朋友说声抱歉。于是，我利用周末的时间写了一份<a href="http://www.cnblogs.com/GoodHelper/tag/Spring.NET/">Spring.NET</a>架构的综合应用，希望这样的实用型架构能受到大家的欢迎。</p>
<p>　　<strong>一、概括</strong></p>
<p>　　此Demo使用的开发工具是:VS2010，数据库任意，Silvelright版本是4.0。</p>
<p>Demo分为三层(Tier)，数据库，服务器端，客户端。其中，服务器端又分为三层(Layer)，持久层，服务层，门面层。</p>
<p><a href="http://www.cnblogs.com/GoodHelper/tag/WCF/">WCF</a>以Windows服务作为宿主，客户端使用<a href="http://www.cnblogs.com/GoodHelper/tag/Silverlight/">Silverlight</a>运行浏览器之外。</p>
<p align="center"><img border="0" alt="" src="http://images.cnblogs.com/cnblogs_com/goodhelper/SpringNet_Step2/2010-10-16-01.gif" width="277" height="267"></p>
<p align="center">图1</p>
<p> </p>
<p>　　图1是解决方案中包含的项目。其中，Server文件夹下是服务器端的代码，Host文件夹下是服务器端的Windows服务宿主，Client文件夹下是<a href="http://www.cnblogs.com/GoodHelper/tag/Silverlight/">Silverlight</a>应用程序。</p>
<p> </p>
<p>　　<strong>二、技术点</strong></p>
<p>　　<a href="http://www.cnblogs.com/GoodHelper/tag/WCF/">WCF</a>的Binding配置使用NetTcpBinding，是为了实现“回调”。</p>
<p>　　其中，服务器端中，添加，修改，删除数据时调用客户端的回调：</p>
<div><img alt="" src="http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif"><img src="http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif"><span>Callback</span> 
<div>
<div><span style="color:#0000ff">private</span><span style="color:#000000"> </span><span style="color:#0000ff">void</span><span style="color:#000000"> ReceiveProduct(Product entity)<br>        {<br>            </span><span style="color:#0000ff">try</span><span style="color:#000000"><br>            {<br>                Parallel.ForEach(callBackList, (item) </span><span style="color:#000000">=&gt;</span><span style="color:#000000"><br>                {<br>                    </span><span style="color:#0000ff">try</span><span style="color:#000000"><br>                    {<br>                        item.ReceiveProduct(entity);<br>                    }<br>                    </span><span style="color:#0000ff">catch</span><span style="color:#000000"> (Exception ex)<br>                    {<br>                        System.Console.WriteLine(ex.ToString());<br>                    }<br>                });<br>            }<br>            </span><span style="color:#0000ff">catch</span><span style="color:#000000"> (Exception ex)<br>            {<br>                System.Console.WriteLine(ex.ToString());<br>            }<br>        }<br><br><br></span><span style="color:#0000ff">public</span><span style="color:#000000"> </span><span style="color:#0000ff">void</span><span style="color:#000000"> DeleteProduct(Guid id)<br>        {<br>            var entity </span><span style="color:#000000">=</span><span style="color:#000000"> </span><span style="color:#0000ff">this</span><span style="color:#000000">.ProductManager.Get(id);<br>            </span><span style="color:#0000ff">if</span><span style="color:#000000"> (entity </span><span style="color:#000000">==</span><span style="color:#000000"> </span><span style="color:#0000ff">null</span><span style="color:#000000">)<br>            {<br>                </span><span style="color:#0000ff">return</span><span style="color:#000000">;<br>            }<br><br>            </span><span style="color:#0000ff">this</span><span style="color:#000000">.ProductManager.Delete(entity);<br><br>            </span><span style="color:#0000ff">try</span><span style="color:#000000"><br>            {<br>                Parallel.ForEach(callBackList, (item) </span><span style="color:#000000">=&gt;</span><span style="color:#000000"><br>                {<br>                    </span><span style="color:#0000ff">try</span><span style="color:#000000"><br>                    {<br>                        item.ClearProduct(id);<br>                    }<br>                    </span><span style="color:#0000ff">catch</span><span style="color:#000000"> (Exception ex)<br>                    {<br>                        System.Console.WriteLine(ex.ToString());<br>                    }<br>                });<br>            }<br>            </span><span style="color:#0000ff">catch</span><span style="color:#000000"> (Exception ex)<br>            {<br>                System.Console.WriteLine(ex.ToString());<br>            }<br>        }</span></div></div></div>
<p> </p>
<p> </p>
<p>　　客户端收到回调时处理该请求：</p>
<div><img alt="" src="http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif"><img src="http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif"><span>Client</span> 
<div>
<div><span style="color:#0000ff">public</span><span style="color:#000000"> </span><span style="color:#0000ff">void</span><span style="color:#000000"> Proxy_ReceiveProductReceived(</span><span style="color:#0000ff">object</span><span style="color:#000000"> sender, ReceiveProductReceivedEventArgs e)<br>        {<br>            var list </span><span style="color:#000000">=</span><span style="color:#000000"> </span><span style="color:#0000ff">this</span><span style="color:#000000">.grid.ItemsSource </span><span style="color:#0000ff">as</span><span style="color:#000000"> ObservableCollection</span><span style="color:#000000">&lt;</span><span style="color:#000000">Product</span><span style="color:#000000">&gt;</span><span style="color:#000000">;<br>            </span><span style="color:#0000ff">if</span><span style="color:#000000"> (list </span><span style="color:#000000">==</span><span style="color:#000000"> </span><span style="color:#0000ff">null</span><span style="color:#000000">)<br>            {<br>                </span><span style="color:#0000ff">return</span><span style="color:#000000">;<br>            }<br><br>            var entity </span><span style="color:#000000">=</span><span style="color:#000000"> list.FirstOrDefault(f </span><span style="color:#000000">=&gt;</span><span style="color:#000000"> f.ID </span><span style="color:#000000">==</span><span style="color:#000000"> e.entity.ID);<br>            </span><span style="color:#0000ff">if</span><span style="color:#000000"> (entity </span><span style="color:#000000">==</span><span style="color:#000000"> </span><span style="color:#0000ff">null</span><span style="color:#000000">)<br>            {<br>                list.Add(e.entity);<br>            }<br>            </span><span style="color:#0000ff">else</span><span style="color:#000000"><br>            {<br>                entity.Code </span><span style="color:#000000">=</span><span style="color:#000000"> e.entity.Code;<br>                entity.Name </span><span style="color:#000000">=</span><span style="color:#000000"> e.entity.Name;<br>                entity.BuyPrice </span><span style="color:#000000">=</span><span style="color:#000000"> e.entity.BuyPrice;<br>                entity.SellPrice </span><span style="color:#000000">=</span><span style="color:#000000"> e.entity.SellPrice;<br>                entity.QuantityPerUnit </span><span style="color:#000000">=</span><span style="color:#000000"> e.entity.QuantityPerUnit;<br>                entity.Remark </span><span style="color:#000000">=</span><span style="color:#000000"> e.entity.Remark;<br>                entity.Unit </span><span style="color:#000000">=</span><span style="color:#000000"> e.entity.Unit;<br>            }<br>        }<br><br></span><span style="color:#0000ff">public</span><span style="color:#000000"> </span><span style="color:#0000ff">void</span><span style="color:#000000"> Proxy_ClearProductReceived(</span><span style="color:#0000ff">object</span><span style="color:#000000"> sender, ClearProductReceivedEventArgs e)<br>        {<br>            var list </span><span style="color:#000000">=</span><span style="color:#000000"> </span><span style="color:#0000ff">this</span><span style="color:#000000">.grid.ItemsSource </span><span style="color:#0000ff">as</span><span style="color:#000000"> ObservableCollection</span><span style="color:#000000">&lt;</span><span style="color:#000000">Product</span><span style="color:#000000">&gt;</span><span style="color:#000000">;<br>            </span><span style="color:#0000ff">if</span><span style="color:#000000"> (list </span><span style="color:#000000">==</span><span style="color:#000000"> </span><span style="color:#0000ff">null</span><span style="color:#000000">)<br>            {<br>                </span><span style="color:#0000ff">return</span><span style="color:#000000">;<br>            }<br><br>            var entity </span><span style="color:#000000">=</span><span style="color:#000000"> list.FirstOrDefault(f </span><span style="color:#000000">=&gt;</span><span style="color:#000000"> f.ID </span><span style="color:#000000">==</span><span style="color:#000000"> e.id);<br>            </span><span style="color:#0000ff">if</span><span style="color:#000000"> (entity </span><span style="color:#000000">==</span><span style="color:#000000"> </span><span style="color:#0000ff">null</span><span style="color:#000000">)<br>            {<br>                </span><span style="color:#0000ff">return</span><span style="color:#000000">;<br>            }<br><br>            list.Remove(entity);<br>        }</span></div></div></div>
<p> </p>
<p>　　</p>
<p>　　这样多个客户端的数据就保持一致了。</p>
<p> </p>
<p>　　由于目前<a href="http://www.cnblogs.com/GoodHelper/tag/Spring.NET/">Spring.NET</a>的<span style="color:#3366ff">OpenSessionInView</span>仅适用于Web，所以我使用<a href="http://www.cnblogs.com/GoodHelper/tag/AOP/">AOP</a>拦截<a href="http://www.cnblogs.com/GoodHelper/tag/WCF/">WCF</a>的Contract接口实现类，在调用前打开<span style="color:#3366ff">SessionScope</span>，调用后关闭<span style="color:#3366ff">SessionScope</span>。这样在同一请求中就实现了<a href="http://www.cnblogs.com/GoodHelper/tag/NHibernate/">NHibernate</a>的<span style="color:#3366ff">Session</span>同步。</p>
<div><img alt="" src="http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif"><img src="http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif"><span>OpenSessionInViewModule</span> 
<div>
<div><span style="color:#0000ff">public</span><span style="color:#000000"> </span><span style="color:#0000ff">class</span><span style="color:#000000"> OpenSessionInViewModule : IMethodInterceptor<br>    {<br>        </span><span style="color:#0000ff">private</span><span style="color:#000000"> </span><span style="color:#0000ff">static</span><span style="color:#000000"> log4net.ILog logger </span><span style="color:#000000">=</span><span style="color:#000000"> log4net.LogManager.GetLogger(</span><span style="color:#0000ff">typeof</span><span style="color:#000000">(OpenSessionInViewModule));<br><br>        </span><span style="color:#0000ff">public</span><span style="color:#000000"> </span><span style="color:#0000ff">object</span><span style="color:#000000"> Invoke(IMethodInvocation invocation)<br>        {<br>            SessionScope sessionScope </span><span style="color:#000000">=</span><span style="color:#000000"> </span><span style="color:#0000ff">new</span><span style="color:#000000"> SessionScope(</span><span style="color:#800000">"</span><span style="color:#800000">appSettings</span><span style="color:#800000">"</span><span style="color:#000000">, </span><span style="color:#0000ff">typeof</span><span style="color:#000000">(SessionScope), </span><span style="color:#0000ff">false</span><span style="color:#000000">);<br>            </span><span style="color:#0000ff">try</span><span style="color:#000000"><br>            {<br>                sessionScope.Open();<br>                </span><span style="color:#0000ff">object</span><span style="color:#000000"> obj </span><span style="color:#000000">=</span><span style="color:#000000"> invocation.Proceed();<br>                </span><span style="color:#0000ff">return</span><span style="color:#000000"> obj;<br>            }<br>            </span><span style="color:#0000ff">catch</span><span style="color:#000000"> (Exception ex)<br>            {<br>                System.Console.WriteLine(ex.ToString());<br>                logger.Error(ex);<br>                </span><span style="color:#0000ff">return</span><span style="color:#000000"> </span><span style="color:#0000ff">null</span><span style="color:#000000">;<br>            }<br>            </span><span style="color:#0000ff">finally</span><span style="color:#000000"><br>            {<br>                sessionScope.Close();<br>            }<br>        }<br>    }</span></div></div></div>
<p> </p>
<p>　　Windows服务的部署。</p>
<p>　　Host文件夹下有两个批处理(.bat)文件：Install.bat和UnInstall.bat。分别为安装和卸载Windows服务的命令。如图2.1所示。</p>
<p align="center"><img border="0" alt="" src="http://images.cnblogs.com/cnblogs_com/goodhelper/SpringNet_Step2/2010-10-16-03.gif" width="641" height="417">图2.1</p>
<p> </p>
<p> </p>
<p>　　Silverlight 4的跨越需要在http服务器的80端口放置clientaccesspolicy.xml的跨域文件，如图2.2所示。</p>
<p align="center"><img border="0" alt="" src="http://images.cnblogs.com/cnblogs_com/goodhelper/SpringNet_Step2/2010-10-16-04.gif" width="543" height="383">图2.2</p>
<p> </p>
<p>这里的http服务器可以不为IIS，但是输入域名+clientaccesspolicy.xml的时候必须能够访问到clientaccesspolicy.xml页面。</p>
<div><img alt="" src="http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif"><img src="http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif"><span>clientaccesspolicy.xml</span> 
<div>
<div><span style="color:#0000ff">&lt;?</span><span style="color:#ff00ff">xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;</span><span style="color:#0000ff">?&gt;</span><span style="color:#000000"><br></span><span style="color:#0000ff">&lt;</span><span style="color:#800000">access-policy</span><span style="color:#0000ff">&gt;</span><span style="color:#000000"><br>  </span><span style="color:#0000ff">&lt;</span><span style="color:#800000">cross-domain-access</span><span style="color:#0000ff">&gt;</span><span style="color:#000000"><br>    </span><span style="color:#0000ff">&lt;</span><span style="color:#800000">policy</span><span style="color:#0000ff">&gt;</span><span style="color:#000000"><br>      </span><span style="color:#0000ff">&lt;</span><span style="color:#800000">allow-from </span><span style="color:#ff0000">http-request-headers</span><span style="color:#0000ff">="*"</span><span style="color:#0000ff">&gt;</span><span style="color:#000000"><br>        </span><span style="color:#0000ff">&lt;</span><span style="color:#800000">domain </span><span style="color:#ff0000">uri</span><span style="color:#0000ff">="*"</span><span style="color:#ff0000"> </span><span style="color:#0000ff">/&gt;</span><span style="color:#000000"><br>      </span><span style="color:#0000ff">&lt;/</span><span style="color:#800000">allow-from</span><span style="color:#0000ff">&gt;</span><span style="color:#000000"><br>      </span><span style="color:#0000ff">&lt;</span><span style="color:#800000">grant-to</span><span style="color:#0000ff">&gt;</span><span style="color:#000000"><br>        </span><span style="color:#0000ff">&lt;</span><span style="color:#800000">socket-resource </span><span style="color:#ff0000">port</span><span style="color:#0000ff">="4502-4534"</span><span style="color:#ff0000"> protocol</span><span style="color:#0000ff">="tcp"</span><span style="color:#ff0000"> </span><span style="color:#0000ff">/&gt;</span><span style="color:#000000"><br>        </span><span style="color:#0000ff">&lt;</span><span style="color:#800000">resource </span><span style="color:#ff0000">path</span><span style="color:#0000ff">="/"</span><span style="color:#ff0000"> include-subpaths</span><span style="color:#0000ff">="true"</span><span style="color:#0000ff">/&gt;</span><span style="color:#000000"><br>      </span><span style="color:#0000ff">&lt;/</span><span style="color:#800000">grant-to</span><span style="color:#0000ff">&gt;</span><span style="color:#000000"><br>    </span><span style="color:#0000ff">&lt;/</span><span style="color:#800000">policy</span><span style="color:#0000ff">&gt;</span><span style="color:#000000"><br>  </span><span style="color:#0000ff">&lt;/</span><span style="color:#800000">cross-domain-access</span><span style="color:#0000ff">&gt;</span><span style="color:#000000"><br></span><span style="color:#0000ff">&lt;/</span><span style="color:#800000">access-policy</span><span style="color:#0000ff">&gt;</span></div></div></div>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p>　　三，运行效果</p>
<p>　　</p>
<p align="center"><img border="0" alt="" src="http://images.cnblogs.com/cnblogs_com/goodhelper/SpringNet_Step2/2010-10-16-02.gif" width="313" height="265">　　图3.1</p>
<p> </p>
<p>　　图3.1是<a href="http://www.cnblogs.com/GoodHelper/tag/NHibernate/">NHibernate</a>自动表后的数据库。</p>
<p>　　</p>
<p><img border="0" alt="" src="http://images.cnblogs.com/cnblogs_com/goodhelper/SpringNet_Step2/2010-10-16-05.gif" width="804" height="620"></p>
<p align="center">图3.2</p>
<p>　　图3.2是<a href="http://www.cnblogs.com/GoodHelper/tag/Silverlight/">Silverlight</a>应用程序的运行效果。</p>
<p> </p>
<p> </p>
<p> 　　运行多个客户端的效果，如图3.3所示。</p>
<p align="center">　　<img border="0" alt="" src="http://images.cnblogs.com/cnblogs_com/goodhelper/SpringNet_Step2/2010-10-16-06.gif" width="801" height="528"></p>
<p align="center">图3.3</p>
<p align="center"> </p>
<p>　　点击添加或者修改按钮，弹出修改页面(如图3.4所示)。然后点击确定按钮保持数据，由于是双向通行，则两个客户端的数据保持一致(如图3.5所示)。</p>
<p> </p>
<p>
<div align="center"><img border="0" alt="" src="http://images.cnblogs.com/cnblogs_com/goodhelper/SpringNet_Step2/2010-10-16-07.gif" width="811" height="688"></div>
<p> </p>
<p align="center">图3.4</p>
<p> </p>
<p align="center"><img border="0" alt="" src="http://images.cnblogs.com/cnblogs_com/goodhelper/SpringNet_Step2/2010-10-16-08.gif" width="813" height="511"></p>
<p align="center">图3.5</p>
<p> </p>
<p> </p>
<p>　　<strong>四、总结</strong></p>
<p>　　该Demo是一个<a href="http://www.cnblogs.com/GoodHelper/tag/Spring.NET/">Spring.NET</a>和<a href="http://www.cnblogs.com/GoodHelper/tag/NHibernate/">NHibernate</a>框架的综合应用，实用于小型项目的企业应用。此架构有较强的实用性，并在项目开发中达到“快速开发”的目的。希望爱好钻研的朋友能够下载我的代码，并我和一起讨论。</p>
<p> </p>
<p> </p>
<p>　　<a style="color:#808000" href="http://files.cnblogs.com/GoodHelper/SpringNetFramework_Step2.rar">代码下载</a></p>
<p>　　出处：<a href="http://www.cnblogs.com/GoodHelper/archive/2010/10/16/SpringNetFramework_Step2.html">http://www.cnblogs.com/GoodHelper/archive/2010/10/16/SpringNetFramework_Step2.html</a></p>
<p>　　欢迎转载，但需保留版权。</p> <img src="http://www.cnblogs.com/GoodHelper/aggbug/1852997.html?type=1" width="1" height="1" alt=""><p>作者: <a href="http://www.cnblogs.com/GoodHelper/">刘冬.NET</a> 发表于 2010-10-16 14:03 <a href="http://www.cnblogs.com/GoodHelper/archive/2010/10/16/SpringNetFramework_Step2.html">原文链接</a></p><p>评论: 14　<a href="http://www.cnblogs.com/GoodHelper/archive/2010/10/16/SpringNetFramework_Step2.html#pagedcomment">查看评论</a>　<a href="http://www.cnblogs.com/GoodHelper/archive/2010/10/16/SpringNetFramework_Step2.html#commentform">发表评论</a></p><hr><p>最新新闻：<br>· <a href="http://news.cnblogs.com/n/77587/">AT&amp;T宣称将直接向企业用户出售苹果iPad</a><span style="color:gray">(2010-10-17 14:08)</span><br>· <a href="http://news.cnblogs.com/n/77586/">苹果掌门人乔布斯身家飙升至64亿美元</a><span style="color:gray">(2010-10-17 14:05)</span><br>· <a href="http://news.cnblogs.com/n/77584/">Google doodle ：祝你生日快乐！</a><span style="color:gray">(2010-10-17 13:26)</span><br>· <a href="http://news.cnblogs.com/n/77583/">WP7超越Androidi五大优势：硬件要求严格居首</a><span style="color:gray">(2010-10-17 13:10)</span><br>· <a href="http://news.cnblogs.com/n/77582/">Skype联合Facebook整合新闻信息和电话簿功能</a><span style="color:gray">(2010-10-17 12:47)</span><br></p><p>编辑推荐：<a href="http://www.cnblogs.com/ClassroomStudio/archive/2010/10/16/1852704.html">连载（一）参观 Google 北京办公室</a><br></p><p>网站导航：<a href="http://www.cnblogs.com">博客园首页</a>  <a href="http://home.cnblogs.com/">我的园子</a>  <a href="http://news.cnblogs.com">新闻</a>  <a href="http://home.cnblogs.com/ing/">闪存</a>  <a href="http://home.cnblogs.com/group/">小组</a>  <a href="http://space.cnblogs.com/q/">博问</a>  <a href="http://kb.cnblogs.com">知识库</a></p></p></p>