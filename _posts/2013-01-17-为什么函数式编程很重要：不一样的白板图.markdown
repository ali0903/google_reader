---
layout: post
title:  "为什么函数式编程很重要：不一样的白板图"
date:   2013-01-17 11:54:18
author: 
categories: program
---

## 为什么函数式编程很重要：不一样的白板图
### by 
### at 2013-01-17 11:54:18
### original <http://kb.cnblogs.com/page/151128/>

<p>　　<strong>英文原文链接：</strong><a href="http://blog.jessitron.com/2012/06/why-functional-matters-your-white-board.html">Why Functional Matters: Your white board will never be the same</a></p><p>　　为什么我们要学习函数式编程？为获得更好的软件设计技术！</p><p>　　一天，我们设计了一个流程，来校对款项的收支平衡。下面这张图就是我们在几年前设计出的结果：<img style="display:block;margin-left:auto;margin-right:auto" src="http://pic001.cnblogs.com/images/2012/145819/2012071821315710.png" alt=""></p><p>　　那以后我们开始学习函数式编程。函数式编程让我们以数据流的方式思考过程处理：数据进来，做变换，过滤，计算，最终的结果就是输出。不仅软件是这样工作的，每段代码，每个函数，都模型化成数据输入，数据输出。中间没有状态的变换。</p><p>　　按这种方式思考问题使我们得到了这样的流程图：<img style="display:block;margin-left:auto;margin-right:auto" src="http://pic001.cnblogs.com/images/2012/145819/2012071821320953.png" alt=""></p><p>　　把程序当成数据管道的思考方式使我们关注结果应该是<strong>什么</strong>，而不是每一步应该<strong>如何</strong>做。这种更高层次的思考问题的方式使得我们在系统设计阶段避免陷入细节实现的泥潭中。</p><p>　　不管用什么语言写成解决方案，这样的方式思考能让我们获得下面的好处：</p><p>　　* 功能细化。(黄色的框代表JIRA任务)需求在图上已经显得非常明白：输入什么，输出什么。每项任务都能独立的开发。</p><p>　　* 每个字节都可测试。涉及到数据库的代码已经放到了外面；不仅如此，每个方框都完全由输入输出来定义。对于测试来说这是一种最简单的单元组件。</p><p>　　这样一来，函数式的思考方式对敏捷编程(任务分解)，TDD，和程序的可维护性都有好处。代码变的模块化。问题变得更容易分析，因为我们能够知道每一步骤数据的样子。</p><p>　　相互独立，易于测试的组件：这就是函数式的。</p><p>　　新的编程技巧是有趣，但新的画白板的技术却是一件大事。</p>