---
layout: post
title:  "《算法导论》学习总结 — 5.第六章(2) 优先级队列"
date:   2011-04-17 15:00:00
author: Tanky Woo
categories: program
---

## 《算法导论》学习总结 — 5.第六章(2) 优先级队列
### by Tanky Woo
### at 2011-04-17 15:00:00
### original <http://www.cppblog.com/tanky-woo/archive/2011/04/17/144382.html>

<p>建议先看看前言：<a href="http://www.cppblog.com/tanky-woo/archive/2011/04/09/143794.html">http://www.cppblog.com/tanky-woo/archive/2011/04/09/143794.html<br></a></p>
<p>上一章总结是的堆排序算法，这一章同样是利用了堆这种数据结构，实现在是<strong>优先级队列</strong>。</p>
<p>根据堆分为最大堆，最小堆，所以优先级队列也可以分为<span style="COLOR:#ff8000">最大优先级队列</span>和<span style="COLOR:#ff8000">最小优先级队列</span>。</p>
<p>优先级队列的概念和用途书上已经写的很清楚了，我就不再打一遍了。直接写出具体实现。</p>
<p>在实现前先说几点：</p>
<p>1.上一章说过，堆的length和heapsize要区分清楚，这一章的优先级队列里就用到了。</p>
<p>2.优先级队列用到了上一章的一些函数比如MaxHeapify()，不记得的可以复习下上一章。</p>
<p>以下是代码及讲解(此处实现的是最大优先级队列)：<br><br></p>
<div style="BORDER-RIGHT:#cccccc 1px solid;PADDING-RIGHT:5px;BORDER-TOP:#cccccc 1px solid;PADDING-LEFT:4px;FONT-SIZE:13px;PADDING-BOTTOM:4px;BORDER-LEFT:#cccccc 1px solid;WIDTH:98%;WORD-BREAK:break-all;PADDING-TOP:4px;BORDER-BOTTOM:#cccccc 1px solid;BACKGROUND-COLOR:#eeeeee"><span style="COLOR:#008000">//</span><span style="COLOR:#008000"> 堆应用之优先级队列<br></span><span style="COLOR:#008000">//</span><span style="COLOR:#008000"> Tanky Woo<br></span><span style="COLOR:#008000">//</span><span style="COLOR:#008000"> Blog: www.WuTianQi.com</span><span style="COLOR:#008000"><br></span><span style="COLOR:#000000">#include </span><span style="COLOR:#000000">&lt;</span><span style="COLOR:#000000">iostream</span><span style="COLOR:#000000">&gt;</span><span style="COLOR:#000000"><br></span><span style="COLOR:#0000ff">using</span><span style="COLOR:#000000"> </span><span style="COLOR:#0000ff">namespace</span><span style="COLOR:#000000"> std;<br></span><span style="COLOR:#0000ff">const</span><span style="COLOR:#000000"> </span><span style="COLOR:#0000ff">int</span><span style="COLOR:#000000"> INF </span><span style="COLOR:#000000">=</span><span style="COLOR:#000000"> </span><span style="COLOR:#000000">999999</span><span style="COLOR:#000000">;<br> <br></span><span style="COLOR:#808080">/////////////////////////////////////////////////////////</span><span style="COLOR:#008000"><br></span><span style="COLOR:#808080">////////////</span><span style="COLOR:#008000">// 以下代码在堆排序中已讲解过 </span><span style="COLOR:#808080">///////////////<br></span><span style="COLOR:#0000ff">void</span><span style="COLOR:#000000"> MaxHeapify(</span><span style="COLOR:#0000ff">int</span><span style="COLOR:#000000"> </span><span style="COLOR:#000000">*</span><span style="COLOR:#000000">a, </span><span style="COLOR:#0000ff">int</span><span style="COLOR:#000000"> i, </span><span style="COLOR:#0000ff">int</span><span style="COLOR:#000000"> len)<br>{<br>    </span><span style="COLOR:#0000ff">int</span><span style="COLOR:#000000"> lt </span><span style="COLOR:#000000">=</span><span style="COLOR:#000000"> </span><span style="COLOR:#000000">2</span><span style="COLOR:#000000">*</span><span style="COLOR:#000000">i, rt </span><span style="COLOR:#000000">=</span><span style="COLOR:#000000"> </span><span style="COLOR:#000000">2</span><span style="COLOR:#000000">*</span><span style="COLOR:#000000">i</span><span style="COLOR:#000000">+</span><span style="COLOR:#000000">1</span><span style="COLOR:#000000">;<br>    </span><span style="COLOR:#0000ff">int</span><span style="COLOR:#000000"> largest;<br>    </span><span style="COLOR:#0000ff">if</span><span style="COLOR:#000000">(lt </span><span style="COLOR:#000000">&lt;=</span><span style="COLOR:#000000"> len </span><span style="COLOR:#000000">&amp;&amp;</span><span style="COLOR:#000000"> a[lt] </span><span style="COLOR:#000000">&gt;</span><span style="COLOR:#000000"> a[i])<br>        largest </span><span style="COLOR:#000000">=</span><span style="COLOR:#000000"> lt;<br>    </span><span style="COLOR:#0000ff">else</span><span style="COLOR:#000000"><br>        largest </span><span style="COLOR:#000000">=</span><span style="COLOR:#000000"> i;<br>    </span><span style="COLOR:#0000ff">if</span><span style="COLOR:#000000">(rt </span><span style="COLOR:#000000">&lt;=</span><span style="COLOR:#000000"> len </span><span style="COLOR:#000000">&amp;&amp;</span><span style="COLOR:#000000"> a[rt] </span><span style="COLOR:#000000">&gt;</span><span style="COLOR:#000000"> a[largest])<br>        largest </span><span style="COLOR:#000000">=</span><span style="COLOR:#000000"> rt;<br>    </span><span style="COLOR:#0000ff">if</span><span style="COLOR:#000000">(largest </span><span style="COLOR:#000000">!=</span><span style="COLOR:#000000"> i)<br>    {<br>        </span><span style="COLOR:#0000ff">int</span><span style="COLOR:#000000"> temp </span><span style="COLOR:#000000">=</span><span style="COLOR:#000000"> a[i];<br>        a[i] </span><span style="COLOR:#000000">=</span><span style="COLOR:#000000"> a[largest];<br>        a[largest] </span><span style="COLOR:#000000">=</span><span style="COLOR:#000000"> temp;<br>        MaxHeapify(a, largest, len);<br>    }<br>}<br> <br></span><span style="COLOR:#0000ff">void</span><span style="COLOR:#000000"> BuildMaxHeap(</span><span style="COLOR:#0000ff">int</span><span style="COLOR:#000000"> </span><span style="COLOR:#000000">*</span><span style="COLOR:#000000">a, </span><span style="COLOR:#0000ff">int</span><span style="COLOR:#000000"> size)<br>{<br>    </span><span style="COLOR:#0000ff">for</span><span style="COLOR:#000000">(</span><span style="COLOR:#0000ff">int</span><span style="COLOR:#000000"> i</span><span style="COLOR:#000000">=</span><span style="COLOR:#000000">size</span><span style="COLOR:#000000">/</span><span style="COLOR:#000000">2</span><span style="COLOR:#000000">; i</span><span style="COLOR:#000000">&gt;=</span><span style="COLOR:#000000">1</span><span style="COLOR:#000000">; </span><span style="COLOR:#000000">--</span><span style="COLOR:#000000">i)<br>        MaxHeapify(a, i, size);<br>}<br> <br></span><span style="COLOR:#0000ff">void</span><span style="COLOR:#000000"> PrintArray(</span><span style="COLOR:#0000ff">int</span><span style="COLOR:#000000"> data[], </span><span style="COLOR:#0000ff">int</span><span style="COLOR:#000000"> size)<br>{<br>    </span><span style="COLOR:#0000ff">for</span><span style="COLOR:#000000"> (</span><span style="COLOR:#0000ff">int</span><span style="COLOR:#000000"> i</span><span style="COLOR:#000000">=</span><span style="COLOR:#000000">1</span><span style="COLOR:#000000">; i</span><span style="COLOR:#000000">&lt;=</span><span style="COLOR:#000000">size; </span><span style="COLOR:#000000">++</span><span style="COLOR:#000000">i)<br>        cout </span><span style="COLOR:#000000">&lt;&lt;</span><span style="COLOR:#000000">data[i]</span><span style="COLOR:#000000">&lt;&lt;</span><span style="COLOR:#000000">"</span><span style="COLOR:#000000">  </span><span style="COLOR:#000000">"</span><span style="COLOR:#000000">;<br>    cout</span><span style="COLOR:#000000">&lt;&lt;</span><span style="COLOR:#000000"> endl </span><span style="COLOR:#000000">&lt;&lt;</span><span style="COLOR:#000000"> endl;<br>}<br></span><span style="COLOR:#808080">////////////////////////////////////////////////////////////<br></span><span style="COLOR:#000000"> <br></span><span style="COLOR:#008000">//</span><span style="COLOR:#008000"> 返回具有最大关键字的元素</span><span style="COLOR:#008000"><br></span><span style="COLOR:#0000ff">int</span><span style="COLOR:#000000"> HeapMaximum(</span><span style="COLOR:#0000ff">int</span><span style="COLOR:#000000"> </span><span style="COLOR:#000000">*</span><span style="COLOR:#000000">a)<br>{<br>    </span><span style="COLOR:#0000ff">return</span><span style="COLOR:#000000"> a[</span><span style="COLOR:#000000">1</span><span style="COLOR:#000000">];<br>}<br> <br></span><span style="COLOR:#008000">//</span><span style="COLOR:#008000"> 去掉并返回具有最大关键字的元素<br></span><span style="COLOR:#008000">//</span><span style="COLOR:#008000"> 注意:这里每次MaxHeapify的是heapsize</span><span style="COLOR:#008000"><br></span><span style="COLOR:#0000ff">int</span><span style="COLOR:#000000"> HeapExtractMax(</span><span style="COLOR:#0000ff">int</span><span style="COLOR:#000000"> </span><span style="COLOR:#000000">*</span><span style="COLOR:#000000">a, </span><span style="COLOR:#0000ff">int</span><span style="COLOR:#000000"> </span><span style="COLOR:#000000">&amp;</span><span style="COLOR:#000000">heapsize)<br>{<br>    </span><span style="COLOR:#0000ff">if</span><span style="COLOR:#000000">(heapsize </span><span style="COLOR:#000000">&lt;</span><span style="COLOR:#000000"> </span><span style="COLOR:#000000">1</span><span style="COLOR:#000000">)<br>        cout </span><span style="COLOR:#000000">&lt;&lt;</span><span style="COLOR:#000000"> </span><span style="COLOR:#000000">"</span><span style="COLOR:#000000">Heap Underflow</span><span style="COLOR:#000000">"</span><span style="COLOR:#000000"> </span><span style="COLOR:#000000">&lt;&lt;</span><span style="COLOR:#000000"> endl;<br>    </span><span style="COLOR:#0000ff">int</span><span style="COLOR:#000000"> max </span><span style="COLOR:#000000">=</span><span style="COLOR:#000000"> a[</span><span style="COLOR:#000000">1</span><span style="COLOR:#000000">];<br>    a[</span><span style="COLOR:#000000">1</span><span style="COLOR:#000000">] </span><span style="COLOR:#000000">=</span><span style="COLOR:#000000"> a[heapsize];<br>    </span><span style="COLOR:#000000">--</span><span style="COLOR:#000000">heapsize;<br>    MaxHeapify(a, </span><span style="COLOR:#000000">1</span><span style="COLOR:#000000">, heapsize);<br>    </span><span style="COLOR:#0000ff">return</span><span style="COLOR:#000000"> max;<br>}<br> <br></span><span style="COLOR:#008000">//</span><span style="COLOR:#008000"> 将元素a[i]的值增加到key</span><span style="COLOR:#008000"><br></span><span style="COLOR:#0000ff">void</span><span style="COLOR:#000000"> HeapIncreaseKey(</span><span style="COLOR:#0000ff">int</span><span style="COLOR:#000000"> </span><span style="COLOR:#000000">*</span><span style="COLOR:#000000">a, </span><span style="COLOR:#0000ff">int</span><span style="COLOR:#000000"> i, </span><span style="COLOR:#0000ff">int</span><span style="COLOR:#000000"> key)<br>{<br>    </span><span style="COLOR:#0000ff">if</span><span style="COLOR:#000000">(key </span><span style="COLOR:#000000">&lt;</span><span style="COLOR:#000000"> a[i])<br>        cout </span><span style="COLOR:#000000">&lt;&lt;</span><span style="COLOR:#000000"> </span><span style="COLOR:#000000">"</span><span style="COLOR:#000000">New key is smaller than current key</span><span style="COLOR:#000000">"</span><span style="COLOR:#000000"> </span><span style="COLOR:#000000">&lt;&lt;</span><span style="COLOR:#000000"> endl;<br>    a[i] </span><span style="COLOR:#000000">=</span><span style="COLOR:#000000"> key;<br>    </span><span style="COLOR:#0000ff">while</span><span style="COLOR:#000000">(i </span><span style="COLOR:#000000">&gt;</span><span style="COLOR:#000000"> </span><span style="COLOR:#000000">1</span><span style="COLOR:#000000"> </span><span style="COLOR:#000000">&amp;&amp;</span><span style="COLOR:#000000">a[i</span><span style="COLOR:#000000">/</span><span style="COLOR:#000000">2</span><span style="COLOR:#000000">] </span><span style="COLOR:#000000">&lt;</span><span style="COLOR:#000000"> a[i])<br>    {<br>        </span><span style="COLOR:#0000ff">int</span><span style="COLOR:#000000"> temp </span><span style="COLOR:#000000">=</span><span style="COLOR:#000000"> a[i];<br>        a[i] </span><span style="COLOR:#000000">=</span><span style="COLOR:#000000"> a[i</span><span style="COLOR:#000000">/</span><span style="COLOR:#000000">2</span><span style="COLOR:#000000">];<br>        a[i</span><span style="COLOR:#000000">/</span><span style="COLOR:#000000">2</span><span style="COLOR:#000000">] </span><span style="COLOR:#000000">=</span><span style="COLOR:#000000"> temp;<br>        i </span><span style="COLOR:#000000">/=</span><span style="COLOR:#000000"> </span><span style="COLOR:#000000">2</span><span style="COLOR:#000000">;<br>    }<br>}<br> <br></span><span style="COLOR:#008000">//</span><span style="COLOR:#008000"> 插入关键字为key的元素</span><span style="COLOR:#008000"><br></span><span style="COLOR:#0000ff">void</span><span style="COLOR:#000000"> MaxHeapInsert(</span><span style="COLOR:#0000ff">int</span><span style="COLOR:#000000"> </span><span style="COLOR:#000000">*</span><span style="COLOR:#000000">a, </span><span style="COLOR:#0000ff">int</span><span style="COLOR:#000000"> key, </span><span style="COLOR:#0000ff">int</span><span style="COLOR:#000000"> </span><span style="COLOR:#000000">&amp;</span><span style="COLOR:#000000">heapsize)<br>{<br>    </span><span style="COLOR:#000000">++</span><span style="COLOR:#000000">heapsize;<br>    a[heapsize] </span><span style="COLOR:#000000">=</span><span style="COLOR:#000000"> </span><span style="COLOR:#000000">-</span><span style="COLOR:#000000">INF;<br>    HeapIncreaseKey(a, heapsize, key);<br>}<br> <br> <br> <br></span><span style="COLOR:#0000ff">int</span><span style="COLOR:#000000"> main()<br>{<br>    </span><span style="COLOR:#0000ff">int</span><span style="COLOR:#000000"> len, heapsize;<br>    </span><span style="COLOR:#0000ff">int</span><span style="COLOR:#000000"> arr[</span><span style="COLOR:#000000">100</span><span style="COLOR:#000000">] </span><span style="COLOR:#000000">=</span><span style="COLOR:#000000"> {</span><span style="COLOR:#000000">0</span><span style="COLOR:#000000">, </span><span style="COLOR:#000000">15</span><span style="COLOR:#000000">, </span><span style="COLOR:#000000">13</span><span style="COLOR:#000000">, </span><span style="COLOR:#000000">9</span><span style="COLOR:#000000">, </span><span style="COLOR:#000000">5</span><span style="COLOR:#000000">, </span><span style="COLOR:#000000">12</span><span style="COLOR:#000000">, </span><span style="COLOR:#000000">8</span><span style="COLOR:#000000">, </span><span style="COLOR:#000000">7</span><span style="COLOR:#000000">, </span><span style="COLOR:#000000">4</span><span style="COLOR:#000000">, </span><span style="COLOR:#000000">0</span><span style="COLOR:#000000">, </span><span style="COLOR:#000000">6</span><span style="COLOR:#000000">, </span><span style="COLOR:#000000">2</span><span style="COLOR:#000000">, </span><span style="COLOR:#000000">1</span><span style="COLOR:#000000">};<br>    </span><span style="COLOR:#008000">//</span><span style="COLOR:#008000"> 区别len 和 heapsize<br>    </span><span style="COLOR:#008000">//</span><span style="COLOR:#008000"> heapsize是堆的大小，而len是初始数组的总大小。</span><span style="COLOR:#008000"><br></span><span style="COLOR:#000000">    len </span><span style="COLOR:#000000">=</span><span style="COLOR:#000000"> heapsize </span><span style="COLOR:#000000">=</span><span style="COLOR:#000000"> </span><span style="COLOR:#000000">12</span><span style="COLOR:#000000">;<br> <br>    </span><span style="COLOR:#008000">//</span><span style="COLOR:#008000"> 首先建堆</span><span style="COLOR:#008000"><br></span><span style="COLOR:#000000">    BuildMaxHeap(arr, len);<br>    cout </span><span style="COLOR:#000000">&lt;&lt;</span><span style="COLOR:#000000"> </span><span style="COLOR:#000000">"</span><span style="COLOR:#000000">建堆后: </span><span style="COLOR:#000000">"</span><span style="COLOR:#000000"> </span><span style="COLOR:#000000">&lt;&lt;</span><span style="COLOR:#000000"> endl;<br>    PrintArray(arr, len);<br> <br>    </span><span style="COLOR:#008000">//</span><span style="COLOR:#008000"> 使用HeapMaximum</span><span style="COLOR:#008000"><br></span><span style="COLOR:#000000">    cout </span><span style="COLOR:#000000">&lt;&lt;</span><span style="COLOR:#000000"> </span><span style="COLOR:#000000">"</span><span style="COLOR:#000000">当前最大的元素是: </span><span style="COLOR:#000000">"</span><span style="COLOR:#000000"> </span><span style="COLOR:#000000">&lt;&lt;</span><span style="COLOR:#000000"> endl;<br>    cout </span><span style="COLOR:#000000">&lt;&lt;</span><span style="COLOR:#000000"> HeapMaximum(arr) </span><span style="COLOR:#000000">&lt;&lt;</span><span style="COLOR:#000000"> endl </span><span style="COLOR:#000000">&lt;&lt;</span><span style="COLOR:#000000"> endl;<br> <br>    </span><span style="COLOR:#008000">//</span><span style="COLOR:#008000"> 使用HeapExtractMax</span><span style="COLOR:#008000"><br></span><span style="COLOR:#000000">    cout </span><span style="COLOR:#000000">&lt;&lt;</span><span style="COLOR:#000000"> </span><span style="COLOR:#000000">"</span><span style="COLOR:#000000">使用HeapExtractMax后: </span><span style="COLOR:#000000">"</span><span style="COLOR:#000000"> </span><span style="COLOR:#000000">&lt;&lt;</span><span style="COLOR:#000000"> endl;<br>    HeapExtractMax(arr,heapsize);<br>    PrintArray(arr, heapsize);<br> <br>    </span><span style="COLOR:#008000">//</span><span style="COLOR:#008000"> 再次使用HeapExtractMax</span><span style="COLOR:#008000"><br></span><span style="COLOR:#000000">    cout </span><span style="COLOR:#000000">&lt;&lt;</span><span style="COLOR:#000000"> </span><span style="COLOR:#000000">"</span><span style="COLOR:#000000">再次使用HeapExtractMax后: </span><span style="COLOR:#000000">"</span><span style="COLOR:#000000"> </span><span style="COLOR:#000000">&lt;&lt;</span><span style="COLOR:#000000"> endl;<br>    HeapExtractMax(arr,heapsize);<br>    PrintArray(arr, heapsize);<br> <br>    </span><span style="COLOR:#008000">//</span><span style="COLOR:#008000"> 使用HeapIncreaseKey</span><span style="COLOR:#008000"><br></span><span style="COLOR:#000000">    cout </span><span style="COLOR:#000000">&lt;&lt;</span><span style="COLOR:#000000"> </span><span style="COLOR:#000000">"</span><span style="COLOR:#000000">使用HeapIncreaseKey后: </span><span style="COLOR:#000000">"</span><span style="COLOR:#000000"> </span><span style="COLOR:#000000">&lt;&lt;</span><span style="COLOR:#000000"> endl;<br>    HeapIncreaseKey(arr, </span><span style="COLOR:#000000">2</span><span style="COLOR:#000000">, </span><span style="COLOR:#000000">15</span><span style="COLOR:#000000">);<br>    PrintArray(arr, heapsize);<br> <br>    </span><span style="COLOR:#008000">//</span><span style="COLOR:#008000"> 使用MaxHeapInsert</span><span style="COLOR:#008000"><br></span><span style="COLOR:#000000">    cout </span><span style="COLOR:#000000">&lt;&lt;</span><span style="COLOR:#000000"> </span><span style="COLOR:#000000">"</span><span style="COLOR:#000000">使用MaxHeapInsert后: </span><span style="COLOR:#000000">"</span><span style="COLOR:#000000"> </span><span style="COLOR:#000000">&lt;&lt;</span><span style="COLOR:#000000"> endl;<br>    MaxHeapInsert(arr, </span><span style="COLOR:#000000">28</span><span style="COLOR:#000000">, heapsize);<br>    PrintArray(arr, heapsize);<br>}</span></div>
<br>
<p>以下是运行结果：</p>
<p><a href="http://www.wutianqi.com/wp-content/uploads/2011/04/youxianji.png"><img title="youxianji" style="BORDER-TOP-WIDTH:0px;DISPLAY:block;BORDER-LEFT-WIDTH:0px;FLOAT:none;BORDER-BOTTOM-WIDTH:0px;MARGIN-LEFT:auto;MARGIN-RIGHT:auto;BORDER-RIGHT-WIDTH:0px" height="382" alt="youxianji" src="http://www.wutianqi.com/wp-content/uploads/2011/04/youxianji_thumb.png" width="402" border="0"></a></p>
<p>看上图的结果：</p>
<p>在第二次使用HeapExtractMax后，把第二个数字即6设为15，更新后，结果就是HeapIncreaseKey的输出。<br><br></p>
<div style="PADDING-RIGHT:0px;DISPLAY:inline;PADDING-LEFT:0px;FLOAT:none;PADDING-BOTTOM:0px;MARGIN:0px;PADDING-TOP:0px">Tanky Woo 标签: <a href="http://www.wutianqi.com/%e4%bc%98%e5%85%88%e7%ba%a7%e9%98%9f%e5%88%97" rel="tag"><font color="#313428">优先级队列</font></a>，<a href="http://www.wutianqi.com/%e5%a0%86%e6%8e%92%e5%ba%8f" rel="tag"><font color="#313428">堆排序</font></a>，<a href="http://www.wutianqi.com/%e5%a0%86" rel="tag"><font color="#313428">堆</font></a>，<a href="http://www.wutianqi.com/%e7%ae%97%e6%b3%95%e5%af%bc%e8%ae%ba" rel="tag"><font color="#313428">算法导论</font></a><br><br><span style="WORD-SPACING:0px;FONT:medium Simsun;TEXT-TRANSFORM:none;COLOR:rgb(0,0,0);TEXT-INDENT:0px;WHITE-SPACE:normal;LETTER-SPACING:normal;BORDER-COLLAPSE:separate"><span style="FONT-SIZE:14px;LINE-HEIGHT:21px;FONT-FAMILY:verdana,&#39;courier new&#39;">个人Blog同步发表： <span style="FONT-SIZE:11px"><a href="http://www.wutianqi.com/?p=2349"><u><font color="#800080">http://www.wutianqi.com/?p=2349</font></u></a></span></span></span><br></div>
<img src="http://www.cppblog.com/tanky-woo/aggbug/144382.html" width="1" height="1"><br><br><div align="right"><a style="text-decoration:none" href="http://www.cppblog.com/tanky-woo/">Tanky Woo</a> 2011-04-17 15:00 <a href="http://www.cppblog.com/tanky-woo/archive/2011/04/17/144382.html#Feedback" style="text-decoration:none">发表评论</a></div>