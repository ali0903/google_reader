---
layout: post
title:  "码农干货系列【5】--lambda in js：lambda.js 1.0.0发布"
date:   2012-12-27 21:55:00
author: 【当耐特】
categories: program
---

## 码农干货系列【5】--lambda in js：lambda.js 1.0.0发布
### by 【当耐特】
### at 2012-12-27 21:55:00
### original <http://www.cnblogs.com/iamzhanglei/archive/2012/12/27/2836247.html>

<h1>lambda.js的由来</h1>  <p>作为一个当耐特程序员，对lambda一定不陌生。随着当耐特版本的更新迭代，C#也由委托==〉匿名委托==〉lambda表达式。由于javascript语言的约束，没有提供相应的lambda的机制，所以就有了lambda.js，让广大jser也可以 <strong>(a,b)=&gt;a.xx==”yyy”&amp;&amp;b&gt;11 </strong>一把！</p>  <h1>Query Operator</h1>  <p>而lambda最常用的地方就是Query Operator。</p>  <p>比如下面一些C# code：</p>  <pre><br><span>int</span>[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 };<br><span>int</span> oddNumbers = numbers.Count(n =&gt; n % 2 == 1);</pre><br><br><p>对应的javascript code(不使用lambda.js)</p><br><br><pre><br><span>var</span> numbers = [ 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 ];<br><span>var</span> oddNumbers = _(numbers).count(<span>function</span> (item) { <span>return</span> item % 2 === 1 });</pre><br><p>使用lambda.js之后</p><br><br><pre><br><span>var</span> numbers = [5, 4, 1, 3, 9, 8, 6, 7, 2, 0];<br><span>var</span> oddNumbers = _(numbers).count(_(<span>&quot;a=&gt;a%2===1&quot;</span>));</pre><br><br><h1>仅此而已？</h1><br><br><p>lambda.js当然提供了underscore.js和JSLINQ都包含的功能！当然lambda.js编程风格更接近jquery style（连缀，大部分方法返回lambda对象）。</p><br><br><pre><br>        <br>        <span>var</span> numbers = [5, 4, 1, 3, 9, 8, 6, 7, 2, 0];<br>        <span>var</span> oddNumbers = _(numbers).count(_(<span>&quot;a=&gt;a%2===1&quot;</span>));<br><br>        console.log(oddNumbers===5)<br>        <span>//数组</span><br>        _([<span>"aa"</span>, <span>"bb"</span>, <span>"cc"</span>]).each(<span>function</span> (index, item) {<br>            <span>if</span> (index === 0) console.log(<span>"arrry each:"</span>+(<span>"aa"</span> === item));<br>            <span>if</span> (index === 1) console.log(<span>"arrry each:"</span> +( <span>"bb"</span> === item));<br>            <span>if</span> (index === 2) console.log(<span>"arrry each:"</span> +( <span>"cc"</span> === item));<br>        })<br><br>        <span>//支持对象</span><br>        _({ x: 100, y: 200, name: <span>"zhanglei"</span> }).each(<span>function</span> (key, value) {<br><br>            <span>if</span> (key == <span>"x"</span>) console.log(<span>"obj each:"</span> +( value === 100));<br>            <span>if</span> (key == <span>"y"</span>) console.log(<span>"obj each:"</span>+(value === 200));<br>            <span>if</span> (key == <span>"name"</span>) console.log(<span>"obj each:"</span>+(value === <span>"zhanglei"</span>));<br>         <br>        })<br><br>        <span>////支持map</span><br>        <span>var</span> aa = _([1, 2, 3]).map(<span>function</span> (item) {<br>            <span>return</span> item * 3;<br>        }).items<br><br>        console.log(<span>"map:"</span>+(aa[0] === 3))<br>        console.log(<span>"map:"</span>+(aa[1] === 6))<br>        console.log(<span>"map:"</span>+(aa[2] === 9))<br><br><br>        <span>//支持对象的数组</span><br>        <span>var</span> stooges1 = [{ name: <span>'zhanglei'</span>, age: 17 }, { name: <span>'curly'</span>, age: 25 }, { name: <span>'moe'</span>, age: 21 }, { name: <span>'larry'</span>, age: 23 }];<br><br>        <span>var</span> youngest = _(stooges1).map(<span>function</span> (item) { <span>return</span> item.name + <span>' is '</span> + item.age; }).items<br>        console.log(youngest)<br><br><br><br>        <span>//支持查找</span><br>        <span>var</span> even = _([7, 2, 3, 4, 5, 6, 7, 8, 9]).find(<span>function</span> (item) { <span>return</span> item % 2 == 0; }).items;<br>        console.log(even) </pre><br><br><p>这些都不是关键，关键是可以lambda化，比如这个查询：</p><br><br><pre><br>    <span>var</span> stooges3 = [{ name: <span>'zhanglei'</span>, age: 17 }, { name: <span>'curly'</span>, age: 25 }, { name: <span>'moe'</span>, age: 21 }, { name: <span>'larry'</span>, age: 23 }];<br>        <span>var</span> over18 = _(stooges3)<br>            .find(<span>function</span> (item, index) { <span>return</span> item.age &gt;= 18 &amp;&amp; index&gt;0})<br>            .sortBy(<span>function</span> (item) { <span>return</span> item.age })<br>            .first(<span>function</span> (item) { <span>return</span> item.age &gt; 21 })<br>            .map(<span>function</span> (stooge) { <span>return</span> stooge.name + <span>' is '</span> + stooge.age; })<br>            .items<br>        ;<br>      <br>        console.log(over18);<br></pre><br><br><p>lambda化之后:</p><br><br><pre><br>        <span>var</span> stooges3 = [{ name: <span>'zhanglei'</span>, age: 17 }, { name: <span>'curly'</span>, age: 25 }, { name: <span>'moe'</span>, age: 21 }, { name: <span>'larry'</span>, age: 23 }];<br><br>        <span>var</span> over18 = _(stooges3)<br>           .find(_(<span>&quot;(a,b)=&gt; a.age &gt;= 18 &amp;&amp; b &gt; 0 &quot;</span>))<br>           .sortBy(_(<span>&quot;b=&gt;b.age&quot;</span>))<br>           .first(_(<span>&quot;item=&gt;item.age&gt;21&quot;</span>))<br>           .map(_(<span>&quot;i=&gt;i.name + &#39; is &#39; + i.age;&quot;</span>))<br>           .items<br>        ;<br><br><br><br>        console.log(over18);</pre><br><br><h1>lambda.js预览</h1><br><pre><br><br>(<span>function</span> (window) {<br><br>    <span>var</span>  lambda = <span>function</span> (items) {<br>        <span>if</span> (lambda.type(items) === <span>"string"</span>) <span>return</span> lambda._compile(items);<br>        <span>return</span> <span>new</span> lambda.prototype.init(items);<br>    },<br><br>   <br>    _lambda = window.lambda,<br><br> <br>    __ = window._;<br><br>    lambda.prototype.init = <span>function</span> (items) {<br><br>        <span>this</span>.items = items;<br>        <span>return</span> <span>this</span>;<br>    }<br><br><br>    lambda.prototype.each = <span>function</span> (fn) {<br><br>        <span>var</span> name, i = 0, length = <span>this</span>.items.length, isObj = length === undefined || lambda.type(<span>this</span>.items) === <span>"function"</span>;<br>        <span>var</span> its = <span>this</span>.items;<br>        <span>if</span> (isObj) {<br>            <span>for</span> (name <span>in</span> its) {<br>                fn.call(its[name], name, its[name]);<br>            }<br>        } <span>else</span> {<br>            <span>for</span> (; i &lt; its.length;) {<br>                fn.call(its[i], i, its[i++]);<br>            }<br>        }<br>    }<br>    lambda.prototype.count= <span>function</span>(fn) {<br>        <span>if</span> (fn == <span>null</span>)<br>            <span>return</span> <span>this</span>.items.length;<br>        <span>else</span><br>            <span>return</span> <span>this</span>.find(fn).items.length;<br>    }<br>    lambda.prototype.map = <span>function</span> (fn) {<br><br>        <span>var</span> result = [];<br>        <span>this</span>.each(<span>function</span> (index,item) {<br><br>            result[index]=fn(item);<br>        })<br>        <span>return</span> lambda(result);<br>    }<br><br>    lambda.prototype.first = <span>function</span> (fn) {<br><br>        <span>if</span> (fn != <span>null</span>) {<br>            <span>return</span> <span>this</span>.find(fn).first();<br>        }<br>        <span>else</span> {<br>            <span>// If no clause was specified, then return the First element in the Array</span><br>            <span>if</span> (<span>this</span>.items.length &gt; 0)<br>                <span>return</span> lambda([<span>this</span>.items[0]]);<br>            <span>else</span><br>                <span>return</span> <span>null</span>;<br>        }<br>    }<br><br>    lambda.prototype.find = <span>function</span> (fn) {<br>        <br>        <span>var</span> newArr=[], self = <span>this</span>, i = 0;<br>       <br>        <span>this</span>.each(<span>function</span> (index, item) {<br><br>            <span>if</span> (fn(item,index)) newArr[i++] = item;<br>          <br>        })<br><br>        <span>return</span> lambda(newArr);<br>        <br>    }<br><br>    lambda.prototype.sortBy = <span>function</span> (clause) {<br>            <span>var</span> tempArray = [];<br>            <span>for</span> (<span>var</span> i = 0; i &lt; <span>this</span>.items.length; i++) {<br>                tempArray[tempArray.length] = <span>this</span>.items[i];<br>            }<br>            <span>return</span>  lambda(<br>            tempArray.sort(<span>function</span> (a, b) {<br>                <span>var</span> x = clause(a);<br>                <span>var</span> y = clause(b);<br>                <span>return</span> ((x &lt; y) ? -1 : ((x &gt; y) ? 1 : 0));<br>            })<br>        );<br>    }<br><br>    lambda.type = <span>function</span> (obj) {<br>        <span>return</span> obj == <span>null</span> ?<br>         String(obj) :<br>         {<br>             <span>"[object Array]"</span>: <span>"array"</span>,<br>             <span>"[object Boolean]"</span>: <span>"boolean"</span>,<br>             <span>"[object Date]"</span>: <span>"date"</span>,<br>             <span>"[object Function]"</span>: <span>"function"</span>,<br>             <span>"[object Number]"</span>: <span>"number"</span>,<br>             <span>"[object Object]"</span>: <span>"object"</span>,<br>             <span>"[object RegExp]"</span>: <span>"regexp"</span>,<br>             <span>"[object String]"</span>: <span>"string"</span><br>         }[Object.prototype.toString.call(obj)] || <span>"object"</span>;<br>    }<br><br>    lambda._compile = <span>function</span> (condition) {<br>        <span>var</span> conditionStr = condition.split(<span>&quot;=&gt;&quot;</span>);<br>      <br>        <span>if</span> (conditionStr[0].indexOf(<span>"("</span>) === -1) {<br>            <span>return</span> <span>function</span> (item) {               <br>                <span>return</span> eval(conditionStr[1].replace(<span>new</span> RegExp(<span>"\\b"</span> + conditionStr[0] + <span>"(?![A-Za-z0-9_])"</span>, <span>"g"</span>), <span>"item"</span>));<br>            }<br>        } <span>else</span> {<br>            <span>var</span> tempStr = conditionStr[0].replace(/\(/g, <span>""</span>).replace(/\)/g, <span>""</span>).split(<span>","</span>);<br>            <span>var</span> tempItem = lambda.trim(tempStr[0]);<br>            <span>var</span> tempIndex = lambda.trim(tempStr[1]);<br>            <span>return</span> <span>function</span> (item,index) {<br>                <span>return</span> eval(conditionStr[1].replace(<span>new</span> RegExp(<span>"\\b"</span> + tempItem + <span>"(?![A-Za-z0-9_])"</span>, <span>"g"</span>), <span>"item"</span>).replace(<span>new</span> RegExp(<span>"\\b"</span> + tempIndex + <span>"(?![A-Za-z0-9_])"</span>, <span>"g"</span>), <span>"index"</span>));<br>            }<br>        }<br>    }<br><br><br><br>    <span>var</span> trimLeft = /^\s+/,<br>    trimRight = /\s+$/,<br>    rnotwhite = /\S/,<br>    trim = String.prototype.trim;<br>    <br>    <span>// IE doesn't match non-breaking spaces with \s</span><br>    <span>if</span> (rnotwhite.test(<span>"\xA0"</span>)) {<br>        trimLeft = /^[\s\xA0]+/;<br>        trimRight = /[\s\xA0]+$/;<br>    }<br><br>    lambda.trim = trim ?<br>        <span>function</span> (text) {<br>            <span>return</span> text == <span>null</span> ?<br>                <span>""</span> :<br>                trim.call(text);<br>        } :<br><br>    <span>// Otherwise use our own trimming functionality</span><br>        <span>function</span> (text) {<br>            <span>return</span> text == <span>null</span> ?<br>                <span>""</span> :<br>                text.toString().replace(trimLeft, <span>""</span>).replace(trimRight, <span>""</span>);<br>        };<br><br>    lambda.prototype.init.prototype = lambda.prototype;<br><br><br>    <br>    <br>    lambda.noConflict = <span>function</span> (deep) {<br>        <span>if</span> (window._ === lambda) {<br>            window._ = __;<br>        }<br><br>        <span>if</span> (deep &amp;&amp; window.lambda === lambda) {<br>            window.lambda = _lambda;<br>        }<br><br>        <span>return</span> lambda;<br>    }<br><br><br>    <span>var</span> root = <span>this</span>;<br><br>    <span>if</span> (<span>typeof</span> exports !== <span>'undefined'</span>) {<br>        <span>if</span> (<span>typeof</span> module !== <span>'undefined'</span> &amp;&amp; module.exports) {<br>            exports = module.exports = lambda = _;<br>        }<br>        exports.lambda = exports._ = lambda;<br>    } <span>else</span> {<br>        root.lambda = root._ = lambda;<br>    }<br><br><br> <br>}(window))</pre><br><br><h1>完整demo下载</h1><br><br><p><a href="http://files.cnblogs.com/iamzhanglei/_.zip"><img border="0" alt="" src="http://images.cnblogs.com/cnblogs_com/zhanglei644213943/dold.gif" width="129" height="123"></a></p><br><br><p>欢迎任何问题或者建议。</p><img src="http://www.cnblogs.com/iamzhanglei/aggbug/2836247.html?type=1" width="1" height="1" alt=""><p><a href="http://www.cnblogs.com/iamzhanglei/archive/2012/12/27/2836247.html">本文链接</a></p>