---
layout: post
title:  "编程需十年"
date:   2010-10-18 23:26:05
author: noreply@blogger.com (rain)
categories: program
---

## 编程需十年
### by noreply@blogger.com (rain)
### at 2010-10-18 23:26:05
### original <http://feedproxy.google.com/~r/blogspot/CRBRG/~3/yiD_NdmG49w/blog-post_7592.html>

<p><iframe src="http://feedads.g.doubleclick.net/~ah/f/bsv5mvr041v0lddc0s9fhkf8c8/300/250?ca=1&amp;fh=280#http%3A%2F%2Favparty.blogspot.com%2F2010%2F10%2Fblog-post_7592.html" width="100%" height="280" frameborder="0" scrolling="no" marginwidth="0" marginheight="0"></iframe></p><span style="font-family:arial,sans-serif;font-size:15.8333px;border-collapse:collapse"><p>原作者：<br>来源<a href="http://norvig.com/21-days.html" style="color:rgb(34,68,187)">Teach Yourself Programming in Ten Years</a><br>  译者<a href="http://space.yeeyan.org/u/93116" style="color:rgb(34,68,187)">opipa</a></p><span style="font-family:&#39;times new roman&#39;;line-height:normal;font-size:medium"><h2>为何都想速成？</h2>逛逛书店，你会看到《7天自学Java》等诸如此类的N天或N小时学习Visual Basic、Windows、Internet的书。我用了亚马逊网站的强大搜索（<a href="http://www.amazon.com/exec/obidos/tg/browse/-/468558/104-5938873-6579160" style="color:rgb(34,68,187)">点此</a>），出版年份选92年以后，书名关键词"天"、"自学"、"教你"，然后有248个结果，前78个是计算机类图书，第79个是《30天学孟加拉语》。我用"小时"换下"天"，结果惊人，有多达253本书，其中77本计算机图书，第78是《24小时自学语法句式》。在前200中，96%是计算机的书。<p>  结论就是要么人们急于学习电脑，要么计算机比其他东西学起来要异常简单。没有任何书是关于几天学习贝多芬或量子物理的，甚至连犬类装扮都没有。费雷森（Felleisen）等人在其著作《如何设计程序》中同意这个趋势，因为提到："坏设计很简单，笨蛋才用21天学，尽管他们还是真傻。" </p><p>让我们看看书名如《三日学C++》的意味：</p><ul><li><b>学习:</b> 三天内你可能没有时间写出有意义的程序，或者从中积累经验。你不可能有时间去跟职业编程者一起去理解在C++环境下的状况。简而言之，你没有充足的时间学很多。所以这本书只能说肤浅的知识。正如亚历山大·波普（Alexander Pope）所言：一知半解乃危殆之事。</li>  <li><b>C++:</b> 三天内你可能学会C++的句法（如果你已经了解其他的语言），但你还不会使用它。简言之，假如是个Basic程序员，你可能写C++程序是Basic的风格，但你不能理解C++的真实好处。那要点是什么？艾伦·佩里斯(<a href="http://www-pu.informatik.uni-tuebingen.de/users/klaeren/epigrams.html" style="color:rgb(34,68,187)">Alan Perlis</a>)曾经说过："一门不能影响你编程观点的语言不足学。". 有可能你学了一点点C++(更确切地说是如Javascript或Flash的Flex)，因为你需要一个界面有现成的工具去完成特定的任务。但是你不是学习如何编程，而是学习如何去完成任务。</li>  <li><b>三天:</b> 不幸地是，这远远不够，下一部分会详细讲。</li></ul><h2>十年磨砺编程</h2>研究人员 (<a href="http://www.amazon.com/exec/obidos/ASIN/034531509X/" style="color:rgb(34,68,187)">Bloom (1985)</a>, <a href="http://norvig.com/21-days.html#bh" style="color:rgb(34,68,187)">Bryan &amp; Harter (1899)</a>, <a href="http://www.amazon.com/exec/obidos/ASIN/0805803092" style="color:rgb(34,68,187)">Hayes (1989)</a>, <a href="http://norvig.com/21-days.html#sc" style="color:rgb(34,68,187)">Simmon &amp; Chase (1973)</a>) 得出结论欲在诸多领域达到职业水平需要十年，比如国际象棋，作曲，电报操作，绘画，弹钢琴，游泳，网球以及神经心理学和拓扑学的研究。 关键是精心练习，不只是一遍一遍重复，而是挑战一项恰好超越你能限的事情，尝试并思考你的表现，并自我矫正。然后不断挑战。这并无捷径，4岁的音乐奇才莫扎特用了13年才能创作世界级的音乐。另外，披头士乐队似乎在1964年的埃德·苏利文（ Ed Sullivan show）演出中一炮而红，但是他们自从1957年就在利物浦和汉堡的酒吧演出，在取得广泛关注后的早期，第一部重量级作品《佩珀军士》（<i>Sgt. Peppers</i>）发行是在1967年。 马尔科姆·格兰德维尔（<a href="http://www.amazon.com/Outliers-Story-Success-Malcolm-Gladwell/dp/0316017922" style="color:rgb(34,68,187)">Malcolm Gladwell</a>）撰文描述了一项针对柏林音乐学院学生的研究，他们被分为尖子，中等和不足三类，并被问到他们练琴的情况：<blockquote>  所有三组中的人，开始学琴的年龄大概相差无几，五岁左右。在刚开始的几年，所有人练习量也差不多，一周两三个小时。自八岁开始，实质性变化就有了。那些精英学生开始比其他人练习更多：九岁的时候一周六个小时，十二岁的时候一周八个小时，十四岁的时候一周十六个小时，一直到二十岁的时候一周要超过三十小时。截止到二十岁，在他们的生涯里已经有总计一万小时练琴。仅仅表现可以的那部分学生加起来是八千小时，那些未来的音乐老师有四千小时。</blockquote><p>  所以，更确切地说，一万小时，而非十年，是个神奇之数。萨缪尔·约翰逊（Samuel Johnson, 1709-1784） 认为还需更长时间：&quot;卓越乃一生之追求，而非其他。&quot; 乔叟（Chaucer , 1340-1400）抱怨道&quot;the lyf so short, the craft so long to lerne.&quot; （生之有限，学也无涯）。希波克拉底（Hippocrates , c. 400BC）因这句话被世人所知：&quot;ars longa, vita brevis&quot;（译注：拉丁语，意为&quot;艺无尽，生有涯&quot;），更长的版本是 &quot;Ars longa, vita brevis, occasio praeceps, experimentum periculosum, iudicium difficile&quot;，翻译成英文就是 &quot;Life is short, [the] craft long, opportunity fleeting, experiment treacherous, judgment difficult.&quot; （生有涯，艺无尽，机遇瞬逝，践行误导，决断不易），然而在拉丁语中，<i>ars</i> 既含艺术，又寓工艺，希腊语原文使用的 &quot;techne&quot; 只表示&quot;技艺&quot;，而非&quot;艺术&quot;。</p>  <p>我的编程成功秘笈是:</p><ul><li>首先要对编程感冒，你编程你快乐。一定要让它足够有趣，因为你要保持你的兴趣长达十年。</li><li>与别的编程者交流；阅读别人的代码。这比看任何书或参加培训课都重要。</li><li>实践。最好的学习乃实践。技术上讲，"编程之化境非通过充裕的实践经验而自然达到，但个人的性能可由专致的努力大力提升。" <a href="http://www2.umassd.edu/swpi/DesignInCS/expertise.html" style="color:rgb(34,68,187)">(p. 366)</a>  "最有效率的学习需要明确的目标，适当的难度，知识回馈，并容许重复或修正错误。" (p. 20-21) 《实践认知：日常之思维、数学及文化》（<i><a href="http://www.amazon.com/exec/obidos/ASIN/0521357349" style="color:rgb(34,68,187)">Cognition in Practice: Mind, Mathematics, and Culture in Everyday Life</a><span style="font-style:normal">）</span></i> 在这方面可做参考。</li>  <li>如果你确想，让其中四年置于大学（或者加上读研院）。这将给你赢得某些工作机会，并与你该领域的深层见解。但如果你不是通过教授学习的类型，你同样可以在工作中习得相似的经验。无论如何，单靠书本远远不足。"计算机科学的学习不会让任何人成为编程专家，真如同学习绘画和色彩理论不会让你成为画家一样" 语出埃里克·莱蒙（Eric Raymond），《新骇客字典》（<i>The New Hacker&#39;s Dictionary</i>）的作者。我曾雇过的最优秀的编程者只有高中文凭，他开发过许多伟大软件，有自己的新闻组（<a href="http://groups.google.com/groups?q=alt.fan.jwz&amp;meta=site%3Dgroups" style="color:rgb(34,68,187)">news group</a>），通过公司认股赚的钱就让他买下了自己的夜店（<a href="http://en.wikipedia.org/wiki/DNA_Lounge" style="color:rgb(34,68,187)">nightclub</a>）。</li>  <li>和其他程序员一起参与工程。在某些工程中担当最优秀程序员，在其他工程里当最差劲程序员。当你最出色，你要测试你的领导一项工程的能力，并用你的视野来激发他人。当你是老底，学习大手们做什么，以及他们不喜欢做的（因为他们把那些活让给你做）。</li><li>继续别人的工程。去理解先前程序员写的程序。学习如何理解并解决先前程序员未考虑到的问题。并考虑设计你的程序以便你之后的程序员更容易维护你的代码。</li><li>至少学六种程序语言。其中包括一种支持类抽象的（Java和C++），一种支持函数抽象的（如Lisp或ML），一种支持语义抽象的（Lisp），一种支援声明规范的（如Prolog或C++模板），还有一种支援协程的（Icon或Scheme），另外一种支持并发的（Sisal）。</li>  <li>记住，在"计算机科学"里有"计算机"一词。理解计算机执行你的代码的时候花费的时间，如从内存中取一个字（考虑有无缓存未命中情形），连续从磁盘读字，或者在磁盘中搜寻新位置。(答案见此文附表)</li><li>参与语言标准化工作。这可能是有关 ANSI C++ 委员会，也可能是决定你编码风格诸如两格或四格缩进。无论如何，你要知道其他人对语言的喜好程度，有时还要想想他们为什么喜欢这样。</li><li>要知道何时应该立刻脱身于语言标准化之努力。</li>  </ul>知道统统这些，只通过书本的学习达到之程度就令人持疑。我的第一个孩子降生的时候，我读了所有的"如何做"（<i>How To</i>）系列书籍，仍然对于育婴是个漫无头绪的新手。30个月后，我第二个孩子出生，我还要温习一下那些书？绝对不，相反，我根据个人经验，结果相当有用，并让我确信我的经验比那些专家们写的上千页文字强。<p>弗莱德·布鲁克斯（Fred Brooks） 撰文《没有尚方宝剑》（<i><a href="http://en.wikipedia.org/wiki/No_Silver_Bullet" style="color:rgb(34,68,187)">No Silver Bullet</a>，<span style="font-style:normal">又译"没有银弹"</span><span style="font-style:normal">）</span></i> 给出了寻找顶级设计师的三条建议：</p>  <ol><li>尽早系统地识别出顶级设计师。</li><li>分配一个负责其发展的生涯导师，认真对待生涯资料。</li><li>给予机遇让成长中的设计师互相磨砺。</li></ol>这里假定有部分人已经有成为伟大设计师的潜质，你所需的就是要诱导他们。艾伦·佩里斯（<a href="http://www-pu.informatik.uni-tuebingen.de/users/klaeren/epigrams.html" style="color:rgb(34,68,187)">Alan Perlis</a>）一针见血：&quot;谁人都可以学雕刻，要如此，那要教米开朗基罗如何不去干雕刻。对于伟大程序员来讲亦如是。&quot;<p>  所以径直去买那本Java书，你或许发现些许有用的东西。但你不会改变你的未来，或者在24小时内甚至24天，抑或24月成为专才里手。</p>  <hr><h2>参引文献</h2><p>Bloom, Benjamin (ed.) <i><a href="http://www.amazon.com/exec/obidos/ASIN/034531509X" style="color:rgb(34,68,187)">Developing Talent in Young People</a></i>, Ballantine, 1985.</p>  <p>Brooks, Fred, <i><a href="http://citeseer.nj.nec.com/context/7718/0" style="color:rgb(34,68,187)">No Silver Bullets</a></i>, IEEE Computer, vol. 20, no. 4, 1987, p. 10-19.</p><p><a name="bh" style="color:rgb(34,68,187)">Bryan, W.L. &amp; Harter, N. &quot;Studies on the telegraphic language: The acquisition of a hierarchy of habits. <i>Psychology Review</i>, 1899, 8, 345-375</a></p>  <p>Hayes, John R., <i><a href="http://www.amazon.com/exec/obidos/ASIN/0805803092" style="color:rgb(34,68,187)">Complete Problem Solver</a></i> Lawrence Erlbaum, 1989.</p><p><a name="cs" style="color:rgb(34,68,187)">Chase, William G. &amp; Simon, Herbert A. </a><a href="http://books.google.com/books?id=dYPSHAAACAAJ&amp;dq=%22perception+in+chess%22+simon&amp;ei=z4PyR5iIAZnmtQPbyLyuDQ" style="color:rgb(34,68,187)">&quot;Perception in Chess&quot;</a> <i>Cognitive Psychology</i>, 1973, 4, 55-81.</p>  <p>Lave, Jean, <i><a href="http://www.amazon.com/exec/obidos/ASIN/0521357349" style="color:rgb(34,68,187)">Cognition in Practice: Mind, Mathematics, and Culture in Everyday Life</a></i>, Cambridge University Press, 1988.</p>  <hr><a name="answers" style="color:rgb(34,68,187)"><h2>答案</h2></a>典型操作在个人电脑上的大概运行时间：<p></p><table border="1" cellpadding="2" cellspacing="2"><tbody><tr><td><span style="font-size:14px;line-height:25px">普通指令</span></td>  <td align="right">1/1,000,000,000 sec = 1 nanosec</td></tr><tr><td>L1缓存中取字</td><td align="right">0.5 nanosec</td></tr><tr><td>分支错误预测</td><td align="right">5 nanosec</td></tr><tr><td>L2缓存中取字</td><td align="right">7 nanosec</td>  </tr><tr><td>互斥量上锁/解锁</td><td align="right">25 nanosec</td></tr><tr><td>主存中取字</td><td align="right">100 nanosec</td></tr><tr><td>在1Gbps网络发送2KB的信息</td><td align="right">20,000 nanosec</td></tr><tr><td>从内存中顺次取1MB内容</td><td align="right">  250,000 nanosec</td></tr><tr><td>在新的磁盘位置取内容（搜索）</td><td align="right">8,000,000 nanosec</td></tr><tr><td>从磁盘顺次读1MB内容</td><td align="right">20,000,000 nanosec</td></tr><tr><td>信息在美国到欧洲一个来回</td><td align="right">150 milliseconds = 150,000,000 nanosec</td>  </tr></tbody></table><p></p><hr><h2>附录：语言甄选</h2>有人问先学那种语言合适。这里有一个答案，但要考虑下述几点：<ul><li><i>参照朋友</i>. 当被问及"我该用哪个系统，Windows、Unix还是Mac？"我的回答总会是"你朋友用啥你用啥。" 好处就是避免操作系统间的本质不同，或者说程序语言间的不同。而且想下你未来的朋友：你将参与的编程社区。你选用的编程语言的社区正在壮大或正在消亡？有没有书，网站或者在线论坛可以获取答案？你喜欢这些论坛上的人么？</li>  <li><i>要简单</i>. C++和Java是给那些大型团队经验丰富的职业开发者而设计的，他们关注其代码的运行时效率。结果就是，这些语言为达此目的部件变得繁杂。你要考虑你在学习如何编程。你不需那么复杂。 你要学习的是一个简单易学，对于一个新手合适的语言。</li><li><i>尽兴.</i> 你喜欢怎么学弹钢琴：正常的，交互式的，那种敲一下听一个音的，还是"批量"模式，显然，交互式让学习变得简单，同样适用于编程。扣住一门语言，交互式学习，并使用它。</li>  </ul>有了这些基准，我的建议是你要学的第一门语言是 <b><a href="http://python.org/" style="color:rgb(34,68,187)">Python</a></b> 或者 <b><a href="http://www.schemers.org/" style="color:rgb(34,68,187)">Scheme</a></b>. 但是你的情况可能不同，选择也多多。如果你的年龄还是个位数，你可能更喜欢 <a href="http://alice.org/" style="color:rgb(34,68,187)">Alice</a> 或者 <a href="http://www.squeak.org/" style="color:rgb(34,68,187)">Squeak</a> (年龄大的一些人也可能喜欢哦). 重要的是选择一种并开始学习。<hr>  <h2>附录：书目和其他资源</h2>也有人问应该从何学起，看哪些书哪些网站。我反复讲"只读书远远不够"，但我还是推荐一些：<ul><li><b>Scheme:</b> 《计算机程序的结构和阐述》（<a href="http://www.amazon.com/gp/product/0262011530" style="color:rgb(34,68,187)">Structure and Interpretation of Computer Programs (Abelson &amp; Sussman)</a> ）或许是导论中最好的。确实给程序员教许多计算机科学理论。有相关的在线视频（<a href="http://www.swiss.ai.mit.edu/classes/6.001/abelson-sussman-lectures/" style="color:rgb(34,68,187)">online videos of lectures</a>），以及完整的教材（ <a href="http://mitpress.mit.edu/sicp/full-text/book/book.html" style="color:rgb(34,68,187)">complete text online</a>）。这本书很有挑战性，可能把一些不适合这个方法的人剔除掉。</li>  <li><b>Scheme:</b> 《如何进行程序设计》（<a href="http://www.amazon.com/gp/product/0262062186" style="color:rgb(34,68,187)">How to Design Programs (Felleisen <i>et al.</i>)</a>）是优雅和高效编程的杰出作品。</li><li><b>Python:</b> 《Python编程：计算机科学导论》(<a href="http://www.amazon.com/gp/product/1887902996" style="color:rgb(34,68,187)">Python Programming: An Intro to CS (Zelle)</a> )是基于Python的优秀绍介书。</li>  <li><b>Python:</b> <a href="http://python.org/" style="color:rgb(34,68,187)">Python.org</a> 网站的一些教程（<a href="http://wiki.python.org/moin/BeginnersGuide" style="color:rgb(34,68,187)">tutorials</a>）。</li>  <li><b>Oz:</b> 《计算机编程的概念技巧和模型》<a href="http://www.amazon.com/gp/product/0262220695" style="color:rgb(34,68,187)">Concepts, Techniques, and Models of Computer Programming (Van Roy &amp; Haridi)</a> 被一些人认为是Abelson &amp; Sussman当前的继任者。它引你导览编程的经典观念，比Abelson &amp; Sussman涵盖更广，更易于阅读。它使用了叫Oz的语言，这不为人知，但是作为学习其他语言的基础。</li>  </ul>  <hr><h2>注释</h2>T. Capey 指出现在亚马逊的"解疑大全"网页（<a href="http://www.amazon.com/exec/obidos/ASIN/0805803092" style="color:rgb(34,68,187)">Complete Problem Solver</a>），在"购买此书的顾客还购买"一栏里有《21天学会孟加拉语》，《自学文法和风格》。我想一大部分人看这些书的都是从这页过来的。多谢Ross Cohen教我希波克拉底的那部分。</span></span> <div><a href="https://hellohost.net/members/aff.php?aff=240"><h1>Hellohost高速国外虚拟主机、VPS / VPN，SSH 服务</h1></a>
<a href="http://s.click.taobao.com/t_1?i=rW6U4XI1uZBy%2BA%3D%3D&amp;p=mm_14340546_0_0&amp;n=11"><h1>空间,虚拟主机,香港空间,韩国空间,ASP空间,PHP空间,免备案100M</h1></a><img width="1" height="1" src="https://blogger.googleusercontent.com/tracker/2650586977828626569-8825891723602858475?l=avparty.blogspot.com" alt=""></div><div>
<a href="http://feeds.feedburner.com/~ff/blogspot/CRBRG?a=yiD_NdmG49w:tOkl9bU3ecI:yIl2AUoC8zA"><img src="http://feeds.feedburner.com/~ff/blogspot/CRBRG?d=yIl2AUoC8zA" border="0"></a>
</div><img src="http://feeds.feedburner.com/~r/blogspot/CRBRG/~4/yiD_NdmG49w" height="1" width="1">