---
layout: post
title:  "单子一瞥"
date:   2012-05-21 06:25:00
author: 
categories: program
---

## 单子一瞥
### by 
### at 2012-05-21 06:25:00
### original <http://typeof.net/mechanix/a-glance-at-monad.html>

<p>在 JavaScript 开发里我们经常会遇到一些和顺序有关的情况，​​最常见的就是异步资源加载和处理</p>
<pre><span>loadResource</span> <span>url</span><span>,</span> <span>(</span><span>resource</span><span>)</span> <span>=&gt;</span>
    <span>extractPicture</span> <span>resource</span><span>,</span> <span>(</span><span>picture</span><span>)</span> <span>=&gt;</span>
        <span>showPicture</span> <span>picture</span><span>,</span> <span>(</span><span>result</span><span>)</span> <span>=&gt;</span> <span>null</span></pre><p>也许你会说“你个狗 invis 为啥要把你的代码写成一个楼梯？​​这样不行吗？”​​</p>
<pre><span>url</span> <span>|</span><span>loadResource</span> <span>|</span><span>extractPicture</span> <span>|</span><span>showPicture</span></pre><p>我倒是很想写成这样，​​多简单，​​多清楚，​​可是人家 API 是异步的啊！​​我要是照上面这么写，​​动不了啊！​​</p>
<p>另一个案例是列表综合。​​通常来说列表综合是数组上的“平映射”，​​即：​​</p>
<pre><span>def</span> <span>ncat</span><span>(</span><span>a</span><span>,</span> <span>b</span><span>)</span> <span>=</span> <span>[</span><span>]</span><span>.</span><span>concat</span><span>(</span><span>a</span><span>,</span> <span>b</span><span>)</span>
<span>def</span> <span>flatmap</span><span>(</span><span>a</span><span>,</span> <span>f</span><span>)</span> <span>=</span> <span>a</span><span>.</span><span>map</span><span>(</span><span>f</span><span>)</span><span>.</span><span>reduce</span><span>(</span><span>ncat</span><span>,</span> <span>[</span><span>]</span><span>)</span>

<span>flatmap</span> <span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>,</span> <span>5</span><span>]</span><span>,</span> <span>(</span><span>x</span><span>)</span> <span>=&gt;</span>
    <span>flatmap</span> <span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>,</span> <span>5</span><span>]</span><span>,</span> <span>(</span><span>y</span><span>)</span> <span>=&gt;</span>
        <span>[</span><span>x</span> <span>*</span> <span>y</span><span>]</span></pre><p>上面这个式子的计算结果是一个 25 个元素的数组。​​</p>
<p>另一个有趣的案例是“尝试性的取属性”。​​众所周知在 JavaScript 里，​​给 <code>null</code> 和 <code>undefined</code> 取属性会报异常，​​但是有时候编程时希望这个情况不报异常，​​而是返回 <code>null</code>。​​比如</p>
<pre><span>a</span><span>.</span><span>b</span><span>.</span><span>c</span><span>.</span><span>d</span><span>.</span><span>e</span></pre><p>如果 <code>a.b == null</code>，​​那么 JS 会毫不留情的给你个“试图取 <code>null</code> 的属性 <code>c</code>”的异常，​​但是经常我们需要直接得到 <code>null</code>，​​比如用在配置里的时候。​​这时我们可以用个方法来解决：​​</p>
<pre><span>def</span> <span>type</span> <span>Flexy</span><span>(</span><span>o</span><span>)</span><span>:</span>
    <span>def</span> <span>@</span><span>val</span> <span>=</span> <span>o</span>
    <span>def</span> <span>@</span><span>part</span><span>(</span><span>name</span><span>)</span> <span>=</span> <span>piecewise</span>
        <span>when</span><span>(</span><span>o</span> <span>==</span> <span>null</span> <span>or</span> <span>o</span> <span>==</span> <span>undefined</span><span>)</span> <span>new</span> <span>Flexy</span><span>(</span><span>o</span><span>)</span>
        <span>otherwise</span>                         <span>new</span> <span>Flexy</span><span>(</span><span>o</span><span>[</span><span>name</span><span>]</span><span>)</span>

<span>new</span><span>(</span><span>Flexy</span><span>(</span><span>a</span><span>)</span><span>)</span><span>.</span><span>part</span><span>(</span><span>'b'</span><span>)</span><span>.</span><span>part</span><span>(</span><span>'c'</span><span>)</span><span>.</span><span>part</span><span>(</span><span>'d'</span><span>)</span><span>.</span><span>part</span><span>(</span><span>'e'</span><span>)</span><span>.</span><span>val</span></pre><p>把这个方法稍微改一改就得到：​​</p>
<pre><span>def</span> <span>type</span> <span>Flexy</span><span>(</span><span>o</span><span>)</span><span>:</span>
    <span>def</span> <span>@</span><span>val</span> <span>=</span> <span>o</span>
    <span>def</span> <span>@</span><span>part</span><span>(</span><span>name</span><span>,</span> <span>cb</span><span>)</span> <span>=</span> <span>piecewise</span>
        <span>when</span><span>(</span><span>o</span> <span>==</span> <span>null</span> <span>or</span> <span>o</span> <span>==</span> <span>undefined</span><span>)</span> <span>new</span> <span>Flexy</span><span>(</span><span>o</span><span>)</span>
        <span>otherwise</span>                         <span>new</span> <span>Flexy</span><span>(</span><span>o</span><span>[</span><span>name</span><span>]</span><span>)</span>

<span>new</span><span>(</span><span>Flexy</span><span>(</span><span>a</span><span>)</span><span>)</span><span>.</span><span>part</span> <span>'b'</span><span>,</span> <span>(</span><span>b</span><span>)</span> <span>=&gt;</span>
    <span>b</span><span>.</span><span>part</span> <span>'c'</span><span>,</span> <span>(</span><span>c</span><span>)</span> <span>=&gt;</span>
        <span>c</span><span>.</span><span>part</span> <span>'d'</span><span>,</span> <span>(</span><span>d</span><span>)</span> <span>=&gt;</span>
            <span>d</span><span>.</span><span>part</span> <span>'e'</span><span>,</span> <span>(</span><span>e</span><span>)</span> <span>=&gt;</span>
                <span>e</span></pre><p>上面的代码显示了一定的相似性：​​它们都是梯子形状的。​​（众人：……）​​为了进一步体现出这种相似性，​​把第一个例子和第三个改写成：​​</p>
<pre><span>def</span> <span>bind</span><span>(</span><span>task</span><span>,</span> <span>f</span><span>)</span> <span>=</span> <span>task</span> <span>f</span>

<span>bind</span> <span>(</span><span>loadResource</span> <span>url</span><span>)</span><span>,</span> <span>(</span><span>resource</span><span>)</span> <span>=&gt;</span>
    <span>bind</span> <span>(</span><span>extractPicture</span> <span>resource</span><span>)</span><span>,</span> <span>(</span><span>picture</span><span>)</span> <span>=&gt;</span>
        <span>bind</span> <span>(</span><span>showPicture</span> <span>picture</span><span>)</span><span>,</span> <span>(</span><span>result</span><span>)</span> <span>=&gt;</span> <span>null</span>

<span>def</span> <span>part</span><span>(</span><span>name</span><span>)</span><span>(</span><span>o</span><span>)</span><span>(</span><span>cb</span><span>)</span> <span>=</span> <span>piecewise</span>
    <span>when</span><span>(</span><span>o</span> <span>==</span> <span>null</span> <span>or</span> <span>o</span> <span>==</span> <span>undefined</span><span>)</span> <span>cb</span> <span>o</span>
    <span>otherwise</span>                         <span>cb</span> <span>o</span><span>[</span><span>name</span><span>]</span>

<span>def</span> <span>partBind</span><span>(</span><span>fPart</span><span>,</span> <span>g</span><span>)</span> <span>=</span> <span>(</span><span>a</span><span>)</span> <span>=&gt;</span> 
    <span>def</span> <span>b</span> <span>=</span> <span>fPart</span> <span>a</span>
    <span>b</span><span>(</span><span>g</span><span>)</span> <span>b</span><span>(</span><span>itself</span><span>)</span>
<span>def</span> <span>partRet</span><span>(</span><span>x</span><span>)</span> <span>=</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>x</span>

<span>def</span> <span>f</span> <span>=</span> <span>partBind</span> <span>(</span><span>part</span> <span>'b'</span><span>)</span><span>,</span> <span>(</span><span>b</span><span>)</span> <span>=&gt;</span>
    <span>partBind</span> <span>part</span><span>(</span><span>'c'</span><span>)</span><span>,</span> <span>(</span><span>c</span><span>)</span> <span>=&gt;</span>
        <span>partBind</span> <span>(</span><span>part</span> <span>'d'</span><span>)</span><span>,</span> <span>(</span><span>d</span><span>)</span> <span>=&gt;</span>
            <span>partBind</span> <span>(</span><span>part</span> <span>'e'</span><span>)</span><span>,</span> <span>(</span><span>e</span><span>)</span> <span>=&gt;</span> 
                <span>partRet</span><span>(</span><span>x</span><span>)</span>

<span>f</span> <span>[</span><span>b</span><span>:</span><span>[</span><span>c</span><span>:</span><span>[</span><span>d</span><span>:</span><span>[</span><span>e</span><span>:</span> <span>"oxox"</span><span>]</span><span>]</span><span>]</span><span>]</span></pre><p>现在可以看出来了么？​​好好比较下</p>
<pre><span>// 例 1</span>
<span>bind</span> <span>(</span><span>loadResource</span> <span>url</span><span>)</span><span>,</span> <span>(</span><span>resource</span><span>)</span> <span>=&gt;</span>
    <span>bind</span> <span>(</span><span>extractPicture</span> <span>resource</span><span>)</span><span>,</span> <span>(</span><span>picture</span><span>)</span> <span>=&gt;</span>
        <span>bind</span> <span>(</span><span>showPicture</span> <span>picture</span><span>)</span><span>,</span> <span>(</span><span>result</span><span>)</span> <span>=&gt;</span>
            <span>null</span></pre><pre><span>// 例 2</span>
<span>flatmap</span> <span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>,</span> <span>5</span><span>]</span><span>,</span> <span>(</span><span>x</span><span>)</span> <span>=&gt;</span>
    <span>flatmap</span> <span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>,</span> <span>5</span><span>]</span><span>,</span> <span>(</span><span>y</span><span>)</span> <span>=&gt;</span>
        <span>[</span><span>x</span> <span>*</span> <span>y</span><span>]</span></pre><pre><span>// 例 3</span>
<span>partBind</span> <span>(</span><span>part</span> <span>'b'</span><span>)</span><span>,</span> <span>(</span><span>b</span><span>)</span> <span>=&gt;</span>
    <span>partBind</span> <span>part</span><span>(</span><span>'c'</span><span>)</span><span>,</span> <span>(</span><span>c</span><span>)</span> <span>=&gt;</span>
        <span>partBind</span> <span>(</span><span>part</span> <span>'d'</span><span>)</span><span>,</span> <span>(</span><span>d</span><span>)</span> <span>=&gt;</span>
            <span>partBind</span> <span>(</span><span>part</span> <span>'e'</span><span>)</span><span>,</span> <span>(</span><span>e</span><span>)</span> <span>=&gt;</span> 
                <span>partRet</span><span>(</span><span>x</span><span>)</span></pre><p>如果把例 2 里的 <code>flatmap</code> 给换成 <code>bind</code>，​​例 3 里 <code>partBind</code> 也换成 <code>bind</code>，​​那上面三个例子都有下面的形式：​​</p>
<div><pre><span>bind</span> <span>x</span><span>,</span> <span>(</span><span>a</span><span>)</span> <span>=&gt;</span>
    <span>bind</span> <span>y</span><span>,</span> <span>(</span><span>b</span><span>)</span> <span>=&gt;</span>
        <span>bind</span> <span>z</span><span>,</span> <span>(</span><span>c</span><span>)</span> <span>=&gt;</span>
            <span>bind</span> <span>w</span><span>,</span> <span>(</span><span>d</span><span>)</span> <span>=&gt;</span> <span>v</span></pre></div><p>也就是说，​​对于“很多种”情况，​​我们都可以把它改写成使用 <code>bind</code> 和“楼梯”的形式。​​比如对异步资源加载，​​<code>bind</code> 形式就是：​​</p>
<pre><span>def</span> <span>bind</span><span>(</span><span>task</span><span>,</span> <span>f</span><span>)</span> <span>=</span> <span>task</span> <span>f</span></pre><p>对于列表综合，​​<code>bind</code> 形式是：​​</p>
<pre><span>def</span> <span>ncat</span><span>(</span><span>a</span><span>,</span> <span>b</span><span>)</span> <span>=</span> <span>[</span><span>]</span><span>.</span><span>concat</span><span>(</span><span>a</span><span>,</span> <span>b</span><span>)</span>
<span>def</span> <span>bind</span><span>(</span><span>a</span><span>,</span> <span>f</span><span>)</span> <span>=</span> <span>a</span><span>.</span><span>map</span><span>(</span><span>f</span><span>)</span><span>.</span><span>reduce</span><span>(</span><span>ncat</span><span>,</span> <span>[</span><span>]</span><span>)</span></pre><p>除了 <code>bind</code> 定义不同之外，​​这三种目的迥异的应用其实有着一样的形式，​​他们都会串接某种“动作”（尽管从你看来数组根本不像是“动作”）和一个返回“动作”的函数。​​所谓“单子”就是来抽象这种东西的。​​<strong>单子</strong>是一个泛型<strong>类综</strong>（Type class，​​相当于元类/接口），​​如果 <code>M</code> 是一个单子，​​则 <code>M(T)</code> 有以下接口：​​</p>
<ul><li><strong><code>return(t)</code> 方法：​​</strong>把一个 <code>T</code> 类型对象转换成 <code>M(T)</code> 类型，​​相当于从一个值生成一个平凡动作。​​</li>
<li><strong><code>bind(m, f)</code> 方法：​​</strong>把一个 <code>M(T)</code> 对象 <code>m</code> 和一个从 <code>T</code> 生成 <code>M(T)</code> 的函数 <code>f</code> <strong>绑定复合</strong>成一个新的单子 <code>M(T)</code> 对象。​​这相当于把两个动作相互连接，​​同时还能处理第一个动作的返回值。​​</li>
</ul><p>对于列表综合来说，​​<code>return(t) = [t]</code>，​​<code>bind(m, f) = m.map(f).reduce(ncat, [])</code>；​​对异步调用来说，​​<code>return(t) = (f) =&gt; f(t)</code>，​​<code>bind(task, f) = task(f)</code>。​​但是这样我们仍然得把程序写成楼梯，​​但是有了统一的形式后，​​如何“铲平”楼梯就变得容易多了。​​Moe 编译器就提供了两种内建语法，​​<code>&lt;-</code> 和 <code>!</code> 来帮你铲平楼梯，​​构建单子。​​</p>
<pre><span>table</span> <span>=&gt;</span>
    <span>x</span> <span>&lt;-</span> <span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>,</span> <span>5</span><span>]</span>
    <span>y</span> <span>&lt;-</span> <span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>,</span> <span>5</span><span>]</span>
    <span>return</span> <span>x</span> <span>*</span> <span>y</span></pre><p>这是 Moe 内建的单子原语形式，​​它引入了个新符号 <code>&lt;-</code>，​​用来表示 <code>bind</code>。​​在编译器处理后，​​它和下面的代码等价：​​</p>
<pre><span>table</span> <span>[</span><span>build</span><span>:</span> <span>fBuild</span><span>]</span>
<span>where</span> <span>fBuild</span><span>(</span><span>schemata</span><span>)</span><span>(</span><span>)</span><span>(</span><span>)</span> <span>=</span>
    <span>schemata</span><span>.</span><span>bind</span> <span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>,</span> <span>5</span><span>]</span><span>,</span> <span>(</span><span>x</span><span>)</span> <span>=&gt;</span>
        <span>schemata</span><span>.</span><span>bind</span> <span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>,</span> <span>5</span><span>]</span><span>,</span> <span>(</span><span>y</span><span>)</span> <span>=&gt;</span>
            <span>schemata</span><span>.</span><span>return</span> <span>(</span><span>x</span> <span>*</span> <span>y</span><span>)</span></pre><p>还是楼梯，​​不过这次的楼梯是编译器生成的，​​不是你人肉写的，​​啊哈哈感觉好好！​​同时可以清楚的看到，​​<code>bind</code> 和 <code>return</code> 是对象 <code>schemata</code> 的方法——符合单子的定义。​​没办法，​​JavaScript 是动态类型，​​所以不能从代码内文推断出你写的单子是哪一种，​​只能手工传入，​​索性无伤大雅，​​毕竟你写列表综合的时候也肯定觉得，​​明确写出 <code>table {...}</code> 比利用类型推断出 <code>{...}</code> 是列表综合要舒服。​​这里的 <code>table</code> 实现相当简单。​​（当然这是个简化的实现，​​Moe Prelude 里的 <code>bind</code>，​​传给 <code>bind</code> 的第一项是任意可迭代对象，​​实现也要复杂的多。）​​</p>
<pre><span>def</span> <span>table</span><span>(</span><span>G</span><span>)</span> <span>=</span> 
    <span>def</span> <span>ncat</span><span>(</span><span>a</span><span>,</span> <span>b</span><span>)</span> <span>=</span> <span>[</span><span>]</span><span>.</span><span>concat</span><span>(</span><span>a</span><span>,</span> <span>b</span><span>)</span>
    <span>def</span> <span>bind</span><span>(</span><span>a</span><span>,</span> <span>f</span><span>)</span> <span>=</span> <span>a</span><span>.</span><span>map</span><span>(</span><span>f</span><span>)</span><span>.</span><span>reduce</span><span>(</span><span>ncat</span><span>,</span> <span>[</span><span>]</span><span>)</span>
    <span>def</span> <span>ret</span><span>(</span><span>x</span><span>)</span>     <span>=</span> <span>[</span><span>x</span><span>]</span>
    <span>def</span> <span>schemata</span>   <span>=</span> <span>[</span><span>bind</span><span>:</span> <span>bind</span><span>,</span> <span>return</span><span>:</span> <span>ret</span><span>]</span>

    <span>G</span><span>.</span><span>build</span><span>(</span><span>schemata</span><span>)</span><span>(</span><span>)</span><span>(</span><span>)</span></pre><p><code>part</code> 的例子也许会有些难理解，​​那个单子是状态单子（State monad）的变体，​​状态单子 <code>State(t)</code> 是个函数，​​表示“对状态的一次修改”（其实是生成新状态啦）。​​它的 <code>return</code> 形式如下：​​</p>
<pre><span>def</span> <span>stateRet</span><span>(</span><span>t</span><span>)</span><span>(</span><span>s</span><span>)</span> <span>=</span> 
    <span>...</span>
    <span>return</span> <span>[</span><span>value</span><span>:</span> <span>t</span><span>,</span> <span>state</span><span>:</span> <span>s</span><span>]</span></pre><p>它的 <code>bind</code> 定义是这样：​​</p>
<pre><span>def</span> <span>stateBind</span><span>(</span><span>m</span><span>,</span> <span>k</span><span>)</span> <span>=</span> <span>(</span><span>s</span><span>)</span> <span>=&gt;</span>
    <span>def</span> <span>[</span><span>value</span><span>:</span> <span>a</span><span>,</span> <span>state</span><span>:</span> <span>s1</span><span>]</span> <span>=</span> <span>m</span> <span>s</span>
    <span>k</span><span>(</span><span>a</span><span>)</span> <span>s1</span></pre><p>一个状态单子实际上是对某个状态进行修改的函数，​​因此它的绑定复合就是对状态的连续修改。​​例 3 的 <code>partBind</code> 就和这里的 <code>stateBind</code> 很相似，​​事实上可以方便的改写成标准的状态单子形式：​​</p>
<pre><span>def</span> <span>part</span><span>(</span><span>name</span><span>)</span> <span>=</span> <span>(</span><span>s</span><span>)</span> <span>=&gt;</span>
    <span>if</span><span>(</span><span>s</span><span>)</span> <span>[</span><span>value</span><span>:</span> <span>s</span><span>[</span><span>name</span><span>]</span><span>,</span> <span>state</span><span>:</span> <span>s</span><span>[</span><span>name</span><span>]</span><span>]</span>
    <span>else</span>  <span>[</span><span>value</span><span>:</span> <span>s</span><span>,</span> <span>state</span><span>:</span> <span>s</span><span>]</span>
<span>def</span> <span>stateBind</span><span>(</span><span>m</span><span>,</span> <span>k</span><span>)</span> <span>=</span> <span>(</span><span>s</span><span>)</span> <span>=&gt;</span>
    <span>def</span> <span>[</span><span>value</span><span>:</span> <span>a</span><span>,</span> <span>state</span><span>:</span> <span>s1</span><span>]</span> <span>=</span> <span>m</span> <span>s</span>
    <span>k</span><span>(</span><span>a</span><span>)</span> <span>s1</span>
<span>def</span> <span>stateRet</span><span>(</span><span>x</span><span>)</span> <span>=</span> <span>(</span><span>s</span><span>)</span> <span>=&gt;</span> <span>[</span><span>value</span><span>:</span> <span>x</span><span>,</span> <span>state</span><span>:</span> <span>s</span><span>]</span>

<span>def</span> <span>f</span> <span>=</span> <span>stateBind</span> <span>part</span><span>(</span><span>'b'</span><span>)</span><span>,</span> <span>(</span><span>b</span><span>)</span> <span>=&gt;</span>
    <span>stateBind</span> <span>part</span><span>(</span><span>'c'</span><span>)</span><span>,</span> <span>(</span><span>c</span><span>)</span> <span>=&gt;</span>
        <span>stateBind</span> <span>part</span><span>(</span><span>'d'</span><span>)</span><span>,</span> <span>(</span><span>d</span><span>)</span> <span>=&gt;</span>
            <span>stateBind</span> <span>part</span><span>(</span><span>'e'</span><span>)</span><span>,</span> <span>(</span><span>e</span><span>)</span> <span>=&gt;</span> <span>stateRet</span><span>(</span><span>e</span><span>)</span>

<span>trace</span> <span>(</span><span>f</span> <span>[</span><span>b</span><span>:</span> <span>[</span><span>c</span><span>:</span> <span>[</span><span>d</span><span>:</span> <span>[</span><span>e</span><span>:</span> <span>".b.c.d.e is here!"</span><span>]</span><span>]</span><span>]</span><span>]</span><span>)</span><span>.</span><span>value</span></pre><p>（未完待续。）​​</p>