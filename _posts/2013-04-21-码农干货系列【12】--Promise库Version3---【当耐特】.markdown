---
layout: post
title:  "码农干货系列【12】--Promise库Version3 - 【当耐特】"
date:   2013-04-21 10:30:00
author: 【当耐特】
categories: program
---

## 码农干货系列【12】--Promise库Version3 - 【当耐特】
### by 【当耐特】
### at 2013-04-21 10:30:00
### original <http://www.cnblogs.com/iamzhanglei/archive/2013/04/21/3033564.html>

<p><strong>代码：</strong></p><div>          var Promise = function () {              <span>this</span>.thens = []          };          Promise.prototype = {              resolve: function () {                  <span>this</span>._handle(<span>&quot;done&quot;</span>, arguments)              },              reject: function () {                  <span>this</span>._handle(<span>&quot;fail&quot;</span>, arguments)              },              _handle: function (n, t) {                  var o, s, f, h, r, u, e, c, i;                  <span>if</span> (<span>this</span>.promiseArr) {                      <span>for</span> (i = 0, u = <span>this</span>.promiseArr.length; i &lt; u; i++) <span>this</span>.promiseArr[i].resolveCount++;                      <span>if</span> (<span>this</span>.resolveCount !== <span>this</span>.promiseArr.length &amp;&amp; n === <span>&quot;done&quot;</span>) <span>return</span>;                  }                  <span>while</span> (o = <span>this</span>.thens.shift()) {                      <span>if</span> (f = o.done, h = o.fail, n === <span>&quot;fail&quot;</span>) {                          h &amp;&amp; h.apply(<span>null</span>, t); <span>break</span>;                      }                      <span>if</span> (f.length) {                          <span>for</span> (r = [], i = 0, u = f.length; i &lt; u; i++) e = f[i].apply(<span>null</span>, t), e instanceof Promise &amp;&amp; (e.thens = <span>this</span>.thens, r.push(e));                          <span>if</span> (c = r.length, c === 0) <span>continue</span>;                          <span>else</span> {                              <span>for</span> (i = 0; i &lt; c; i++) r[i].promiseArr = r, r[i].resolveCount = 0;                              <span>break</span>;                          }                      } <span>else</span> {                          <span>if</span> (s = f.apply(<span>null</span>, t), s instanceof Promise) {                              s.thens = <span>this</span>.thens; <span>break</span>;                          }                          <span>continue</span>;                      }                  }              },              then: function (n, t) {                  <span>this</span>.thens.push({ done: n, fail: t });                  <span>return</span> <span>this</span>;              }          }</div><p><strong>更新：</strong></p><blockquote>  <p>去除了when方法，统一使用then,用then的第一个参数类型区分是单task还是多task</p>  <p>增加reject方法，处理task失败</p></blockquote><p><strong>使用：</strong></p><div>  f1()  .then(function () {  console.log(arguments)  <span>return</span> f2();  })  .then(function () {  f3();  })  .then(f4)  .then(f5)  .then(f6)  .then(f7)  .then([f8, f9, f10])  .then(f11, function () {  console.log(<span>&quot;fail&quot;</span>);  })        function f1() {      var promise = <span>new</span> Promise();      setTimeout(function () {             console.log(1);          promise.resolve(<span>&quot;from f1&quot;</span>);      }, 1500)         <span>return</span> promise;  }     function f2() {      var promise = <span>new</span> Promise();      setTimeout(function () {             console.log(2);          promise.resolve();      }, 2500)         <span>return</span> promise;  }     function f3() {      var promise = <span>new</span> Promise();      setTimeout(function () {             console.log(3);          promise.resolve();      }, 1500)         <span>return</span> promise;     }     function f4() {      var promise = <span>new</span> Promise();      setTimeout(function () {             console.log(4);          promise.resolve();      }, 1500)         <span>return</span> promise;  }  function f5() {      var promise = <span>new</span> Promise();      setTimeout(function () {             console.log(5);          promise.resolve();      }, 1500)         <span>return</span> promise;  }     function f6() {      console.log(6);  }  function f7() {      var promise = <span>new</span> Promise();      setTimeout(function () {             console.log(7);          promise.resolve();      }, 1500)         <span>return</span> promise;  }     function f8() {      var promise = <span>new</span> Promise();      setTimeout(function () {             console.log(8);          promise.resolve();      }, 1500)         <span>return</span> promise;  }     function f9() {      var promise = <span>new</span> Promise();      setTimeout(function () {             console.log(9);          promise.resolve();      }, 5500)         <span>return</span> promise;  }     function f10() {      var promise = <span>new</span> Promise();      setTimeout(function () {             console.log(10);          promise.reject();      }, 1500)         <span>return</span> promise;  }     function f11() {      var promise = <span>new</span> Promise();      setTimeout(function () {             console.log(11);          promise.resolve();      }, 1500)         <span>return</span> promise;  }</div><img src="http://www.cnblogs.com/iamzhanglei/aggbug/3033564.html?type=1" width="1" height="1" alt=""><br><p>本文链接：<a href="http://www.cnblogs.com/iamzhanglei/archive/2013/04/21/3033564.html">http://www.cnblogs.com/iamzhanglei/archive/2013/04/21/3033564.html</a>，转载请注明。</p>