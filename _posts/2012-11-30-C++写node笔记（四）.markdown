---
layout: post
title:  "C++写node笔记（四）"
date:   2012-11-30 09:42:00
author: snoopyxdy
categories: program
---

## C++写node笔记（四）
### by snoopyxdy
### at 2012-11-30 09:42:00
### original <http://snoopyxdy.blog.163.com/blog/static/601174402012103092114682>

<div>分析了官网的示例之后，我想试着写点简单点的东西，尝试下node的c++的addon的写法。<div>从简单的入手，新建一个文件夹，取名为verify，我打算从简单的但是实用的node验证模块入手，写一个C++的验证模块。本文只是开了个头，做一些简单的示例。</div><div>文件夹的目录：</div><div><pre><p>verify</p><p>/index.js</p><p>/package.json</p><p>/readme.md</p><p>/lib</p><p>    /verify.js</p><p>/addon</p><p>    /binding.gyp</p><p>    /SimpleVerify.cc</p><p>    /SimpleVerify.h</p><p>    /verify.cc</p></pre>一个简单的模块目录构成，不知道写的对不对，反正我就这么弄了，哈哈。</div><div>我们直接看下3个c++addon代码：（依葫芦画瓢的，不要取笑啊）</div><div><br></div><div><b>verify.cc:</b></div><div><pre><p>#define BUILDING_NODE_EXTENSION<br>#include &lt;node.h&gt;<br>#include "SimpleVerify.h"<br>using namespace v8;<br><br><br><br>void Init(Handle&lt;Object&gt; target) {<br><br>  target-&gt;Set(String::NewSymbol(&quot;isArray&quot;),<br>           FunctionTemplate::New(SimpleV::isArray)-&gt;GetFunction());<br><br>  target-&gt;Set(String::NewSymbol(&quot;isNumber&quot;),<br>           FunctionTemplate::New(SimpleV::isNumber)-&gt;GetFunction());<br>}<br><br>NODE_MODULE(verify, Init)</p></pre><br></div><div><span style="font-family:monospace;line-height:22px;white-space:pre"><b>SimpleVerify.h</b></span></div><div><pre><p>#ifndef SV_H<br>#define SV_H<br>#include &lt;node.h&gt;<br><br>class SimpleV {<br> public:<br>  static v8::Handle&lt;v8::Value&gt; isArray(const v8::Arguments&amp; args);<br>  static v8::Handle&lt;v8::Value&gt; isNumber(const v8::Arguments&amp; args);<br><br> private:<br>  SimpleV();<br>  ~SimpleV();<br>};<br><br>#endif</p></pre><br></div><div><b>SimpleVerify.cc</b></div><div><pre><p>#define BUILDING_NODE_EXTENSION<br>#include &lt;node.h&gt;<br>#include "SimpleVerify.h"<br><br>using namespace v8;<br><br>SimpleV::SimpleV() {};<br>SimpleV::~SimpleV() {};<br><br>Handle&lt;Value&gt; SimpleV::isArray(const Arguments&amp; args) {//定义是否是数组<br>  HandleScope scope;<br>  return scope.Close(Boolean::New(args[0]-&gt;IsArray()));<br>}<br><br>Handle&lt;Value&gt; SimpleV::isNumber(const Arguments&amp; args) {//定义是否是数字<br>  HandleScope scope;<br>  return scope.Close(Boolean::New(args[0]-&gt;IsNumber()));<br>}<br><br></p></pre><br></div><div>代码很简单，目前<span style="font-family:monospace;line-height:22px;white-space:pre">SimpleV类只有判断是否是数组和是否是数字2个方法，这2个方法都可以在v8手册上看到，当然我打算继续完善这个模块，根据node-validate的功能山寨一把，全部搬成C++的。</span></div><div><font face="monospace"><span style="white-space:pre">估计有同学说，你费这么大劲搞c++的验证模块，到底效果如何？有用吗？</span></font></div><div><span style="font-family:monospace;line-height:22px;white-space:pre">数据说明一切，</span><font face="monospace"><span style="white-space:pre">下面我们针对这2种情况做一下简单的测试，测试代码如下：</span></font></div><div><pre><p>var sv = module.exports = require('./lib/verify.js');<br><br>//利用纯js语法进行判断<br>var ia = Array.isArray;<br>console.time('js');<br>for(var j=0;j&lt;1000;j++){<br> ia([]);<br> ia('111');<br> isNaN(123);<br> isNaN('abc');<br>}<br>console.timeEnd('js')<br><br><br>//利用c++模块进行判断<br>var ia2 = sv.isArray;<br>var in2 = sv.isNumber;<br>console.time('c++');<br>for(var j=0;j&lt;1000;j++){<br> ia2([]);<br> ia2('111');<br> in2(123);<br> in2('abc');<br>}<br>console.timeEnd('c++');</p></pre>测试环境：linux虚拟机，不多介绍了，具体测试结果可能跟机器配置有关系</div><div>我们看一下多次测试的结果：</div><div><pre><p>js: 10ms<br>c++: 3ms</p><p><br></p><p>js: 9ms<br>c++: 1ms</p><p><br></p><p>js: 7ms<br>c++: 2ms</p><p><br></p><p>js: 8ms<br>c++: 0ms</p><p><br></p><p>js: 6ms<br>c++: 0ms</p></pre>我们可以看到尽管我们利用了js原生的<span style="font-family:monospace;line-height:22px;white-space:pre">isNaN和</span><span style="font-family:monospace;line-height:22px;white-space:pre">isArray这2个方法，但是从性能上来说，无疑C++验证的更快一些。</span></div><div><span style="font-family:monospace;line-height:22px;white-space:pre">可能有同学说循环1000次是否有些过了，但是我最近打算用node做接口服务，所以同时有100个接口被查询，每个接口有5-10个参数被验证的情况还是可能存在的，如果我们使用c++的addon验证模块可以至少快5ms相应给用户，当然如果一些正则等等判断可能差距的更多。</span></div><div><span style="font-family:monospace;line-height:22px;white-space:pre"><br></span></div><div><span style="font-family:monospace;line-height:22px;white-space:pre">最后补一个小教训，我在一开始先创建了binding.gyp，没有把SimpleVerify.cc文件包含进去，导致每次编译都通过，但是调用一直报错，搞了好一阵子才发现，给大家提个醒啊，不要像我这么笨了，哎~</span></div><div><span style="font-family:monospace;line-height:22px;white-space:pre"><br></span></div><div><br><br></div></div>