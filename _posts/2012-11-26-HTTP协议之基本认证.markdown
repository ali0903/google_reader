---
layout: post
title:  "HTTP协议之基本认证"
date:   2012-11-26 12:02:05
author: 
categories: program
---

## HTTP协议之基本认证
### by 
### at 2012-11-26 12:02:05
### original <http://kb.cnblogs.com/page/158829/>

<p>　　http协议是无状态的， 浏览器和web服务器之间可以通过cookie来身份识别。 桌面应用程序(比如新浪桌面客户端， skydrive客户端)跟Web服务器之间是如何身份识别呢？</p><p>　　<strong>阅读目录</strong></p><ol><li><a href="http://kb.cnblogs.com/#whats">什么是HTTP基本认证</a></li><li><a href="http://kb.cnblogs.com/#guocheng">HTTP基本认证的过程</a></li><li><a href="http://kb.cnblogs.com/#youdian">HTTP基本认证的优点</a></li><li><a href="http://kb.cnblogs.com/#everytime">每次都要进行认证</a></li><li><a href="http://kb.cnblogs.com/#secure">HTTP基本认证和HTTPS一起使用就很安全</a></li><li><a href="http://kb.cnblogs.com/#oauth">HTTP OAuth认证</a></li><li><a href="http://kb.cnblogs.com/#other">其他认证</a></li><li><a href="http://kb.cnblogs.com/#client">客户端的使用</a></li></ol><h1>　　什么是HTTP基本认证<a name="whats"></a><p>　　桌面应用程序也通过HTTP协议跟Web服务器交互， 桌面应用程序一般不会使用cookie, 而是把 "用户名+冒号+密码"用BASE64算法加密后的字符串放在http request 中的header Authorization中发送给服务端， 这种方式叫HTTP基本认证(Basic Authentication)</p><p>　　当浏览器访问使用基本认证的网站的时候， 浏览器会提示你输入用户名和密码，如下图</p><p><img style="display:block;margin-left:auto;margin-right:auto" src="http://pic002.cnblogs.com/images/2012/263119/2012092510283354.png" alt=""></p><p>　　假如用户名密码错误的话， 服务器会返回401 如下图</p><p><img style="display:block;margin-left:auto;margin-right:auto" src="http://pic002.cnblogs.com/images/2012/263119/2012092510293780.png" alt=""></p><h1>　　HTTP基本认证的过程<a name="guocheng"></a><p>　　第一步:  客户端发送http request 给服务器， </p><p>　　第二步:  因为request中没有包含Authorization header,  服务器会返回一个401 Unauthozied给客户端，并且在Response的 header &quot;WWW-Authenticate&quot; 中添加信息。</p><p><img style="display:block;margin-left:auto;margin-right:auto" src="http://pic002.cnblogs.com/images/2012/263119/2012092121494456.png" alt="" width="660"></p><p>　　第三步：客户端把用户名和密码用BASE64加密后，放在Authorization header中发送给服务器， 认证成功。</p><p>　　第四步：服务器将Authorization header中的用户名密码取出，进行验证， 如果验证通过，将根据请求，发送资源给客户端</p><p><img style="display:block;margin-left:auto;margin-right:auto" src="http://pic002.cnblogs.com/images/2012/263119/2012092121495881.png" alt="" width="660"></p><p>　　使用Fiddler Inspectors 下的Auth 选项卡，可以很方便的看到用户名和密码:</p><p><img style="display:block;margin-left:auto;margin-right:auto" src="http://pic002.cnblogs.com/images/2012/263119/2012092121505442.png" alt="" width="660"></p><h1>　　HTTP基本认证的优点<a name="youdian"></a><p>　　HTTP基本认证，简单明了。Rest API 就是经常使用基本认证的。</p><h1>　　每次都要进行认证<a name="everytime"></a><p>　　http协议是无状态的， 同一个客户端对 服务器的每个请求都要求认证。</p><h1>　　HTTP基本认证和HTTPS<a name="secure"></a><p>　　把 "用户名+冒号+密码" 用BASE64加密后的string虽然用肉眼看不出来， 但用程序很容易解密，上图可以看到Fiddler就直接给解密了。 所以这样的http request在网络上，如果用HTTP传输是很不安全的。 一般都是会用HTTPS传输，HTTPS是加密的,，所以比较安全。</p><h1>　　HTTP OAuth认证<a name="oauth"></a><div>　　OAuth对于Http来说，就是放在Authorization header中的不是用户名密码， 而是一个token。</div><div>　　微软的Skydrive 就是使用这样的方式， 如下图： </div><div><p><img style="display:block;margin-left:auto;margin-right:auto" src="http://pic002.cnblogs.com/images/2012/263119/2012092122272738.png" alt="" width="660"></p></div><h1>　　其他认证<a name="other"></a><div>　　除了基本认证(Basic Authentication), 还有摘要认证digest authentication, WSSE(WS-Security)认证</div><h1>　　客户端的使用<a name="client"></a><div>　　客户端如果要跟“使用基本认证的网站”交互。 非常很简单，把用户名密码加在Authorization header中就可以了。</div><div>　　C#</div><div><div style="background-color:#f5f5f5;border:1px solid #cccccc;padding:10px"><span>string</span> url = <span style="color:#800000">"</span><span style="color:#800000">https://testsite</span><span style="color:#800000">"</span><span style="color:#000000">;<br>HttpWebRequest req </span>=<span style="color:#000000"> (HttpWebRequest)WebRequest.Create(url);<br>NetworkCredential nc </span>= <span style="color:#0000ff">new</span> NetworkCredential(<span style="color:#800000">"</span>username<span style="color:#800000">"</span>, <span style="color:#800000">"</span>password<span style="color:#800000">"</span><span style="color:#000000">);<br>req.Credentials </span>= nc;</div><p>　　Linux下的curl</p><div style="background-color:#f5f5f5;border:1px solid #cccccc;padding:10px">curl -u username:password https://testsite/</div></div></h1></h1></h1></h1></h1></h1></h1></h1>