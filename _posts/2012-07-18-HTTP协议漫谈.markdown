---
layout: post
title:  "HTTP协议漫谈"
date:   2012-07-18 17:07:09
author: 
categories: program
---

## HTTP协议漫谈
### by 
### at 2012-07-18 17:07:09
### original <http://kb.cnblogs.com/page/140611/>

<p>　　<strong>简介</strong></p><p>　　园子里已经有不少介绍HTTP的的好文章。对HTTP的一些细节介绍的比较好，所以本篇文章不会对HTTP的细节进行深究，而是从够高和更结构化的角度将HTTP协议的元素进行分类讲解。</p><p>　　<strong>HTTP的定义和历史</strong></p><p>　　在一个网络中。传输数据需要面临三个问题:</p><p>　　1. 客户端如何知道所请求内容的位置？</p><p>　　2. 当客户端知道所请求内容的位置后，如何获取所请求的内容？</p><p>　　3. 所请求内容以何种形式组织以便被客户端所识别？</p><p>　　对于WEB来说，回答上面三种问题分别采用三种不同的技术，分别为：统一资源定位符(URIs)，超文本传输协议(HTTP)和超文本标记语言(HTML)。对于大多数WEB开发人员来说URI和HTML都是非常的熟悉。而HTTP协议在很多WEB技术中都被封装的过多使得HTTP反而最不被熟悉。</p><p>　　HTTP作为一种传输协议，也是像HTML一样随着时间不断演进的，目前流行的HTTP1.1是HTTP协议的第三个版本。</p><p>　　<strong>HTTP 0.9</strong></p><p>　　HTTP 0.9作为HTTP协议的第一个版本。是非常弱的。请求(Request)只有一行，比如:</p><blockquote>GET www.cnblogs.com</blockquote><p>　　从如此简单的请求体（没有POST方法，没有HTTP 头）可以看出，那个时代的HTTP客户端只能接收一种类型：纯文本。并且，如果得不到所请求的信息，也没有404, 500等错误出现。</p><p>　　虽然HTTP 0.9看起来如此弱，但已经能满足那个时代的需求了。</p><p>　　<strong>HTTP 1.0</strong></p><p>　　随着1996年后，WEB程序的需求，HTTP 0.9已经不能满足需求。HTTP1.0最大的改变是引入了POST方法，使得客户端通过HTML表单向服务器发送数据成为可能，这也是WEB应用程序的一个基础。另一个巨大的改变是引入了HTTP头，使得HTTP不仅能返回错误代码，并且HTTP协议所传输的内容不仅限于纯文本，还可以是图片，动画等一系列格式。</p><p>　　除此之外，还允许保持连接，既一次TCP连接后，可以多次通信，虽然HTTP1.0 默认是传输一次数据后就关闭。</p><p>　　<strong>HTTP 1.1</strong></p><p>　　2000年5月，HTTP1.1确立。HTTP1.1并不像HTTP1.0对于HTTP0.9那样的革命性。但是也有很多增强。</p><p>　　首先，增加了Host头，比如访问我的博客:</p><blockquote>GET /Careyson HTTP/1.1 Host: www.cnblogs.com</blockquote><p>　　Get后面仅仅需要相对路径即可。这看起来虽然仅仅类似语法糖的感觉，但实际上，这个提升使得在Web上的一台主机可以存在多个域。否则多个域名指向同一个IP会产生混淆。</p><p>　　此外，还引入了Range头，使得客户端通过HTTP下载时只下载内容的一部分，这使得多线程下载也成为可能。</p><p>　　还有值得一提的是HTTP1.1默认连接是一直保持的，这个概念我会在下文中具体阐述。</p><p>　　<strong>HTTP的网络层次</strong></p><p style="text-align:left">　　在Internet中所有的传输都是通过TCP/IP进行的。HTTP协议作为TCP/IP模型中应用层的协议也不例外。HTTP在网络中的层次如图1所示。　　</p><p style="text-align:center"><a href="http://images.cnblogs.com/cnblogs_com/CareySon/201204/201204271056507156.png"><img style="display:block;margin-left:auto;margin-right:auto" title="1" src="http://images.cnblogs.com/cnblogs_com/CareySon/201204/201204271056528716.png" alt="1" width="356" height="361" border="0"></a>图1.HTTP在TCP/IP中的层次</p><p style="text-align:left">　　可以看出，HTTP是基于传输层TCP协议的，而TCP是一个端到端的面向连接的协议。所谓的端到端可以理解为进程到进程之间的通信。所以HTTP在开始传输之前，首先需要建立TCP连接，而TCP连接的过程需要所谓的“三次握手”。概念如图2所示。</p><p style="text-align:center"><a href="http://images.cnblogs.com/cnblogs_com/CareySon/201204/201204271057008113.png"><img style="display:block;margin-left:auto;margin-right:auto" title="22" src="http://images.cnblogs.com/cnblogs_com/CareySon/201204/201204271057029740.png" alt="22" width="547" height="257" border="0"></a>图2.TCP连接的三次握手</p><p>　　在TCP三次握手之后，建立了TCP连接，此时HTTP就可以进行传输了。一个重要的概念是面向连接，即HTTP在传输完成之间并不断开TCP连接。在HTTP1.1中(通过Connection头设置)这是默认行为。所谓的HTTP传输完成，我们通过一个具体的例子来看。</p><p style="text-align:left">　　比如访问我的博客，使用Fiddler来截取对应的请求和响应。如图3所示。　　</p><p style="text-align:center"><a href="http://images.cnblogs.com/cnblogs_com/CareySon/201204/201204271057061249.png"><img style="display:block;margin-left:auto;margin-right:auto" title="3" src="http://images.cnblogs.com/cnblogs_com/CareySon/201204/201204271057091023.png" alt="3" width="660" height="327"></a>图3. 用fiddler抓取请求和相应</p><p>　　可以看出，虽然仅仅访问了我的博客，但所获取的不仅仅是一个HTML，而是浏览器对HTML解析的过程中，如果发现需要获取的内容，会再次发起HTTP请求去服务器获取，比如图2中的那个common2.css。这上面19个HTTP请求，只依靠一个TCP连接就够了，这就是所谓的持久连接。也是所谓的一次HTTP请求完成。</p><p>　　<strong>HTTP请求(HTTP Request)</strong></p><p>　　所谓的HTTP请求，也就是Web客户端向Web服务器发送信息，这个信息由如下三部分组成：</p><p>　　1. 请求行</p><p>　　2. HTTP头</p><p>　　3. 内容</p><p>　　一个典型的请求行比如:</p><blockquote>GET www.cnblogs.com HTTP/1.1</blockquote><p>　　请求行写法是固定的，由三部分组成，第一部分是请求方法，第二部分是请求网址，第三部分是HTTP版本。</p><p>　　第二部分HTTP头在HTTP请求可以是3种HTTP头：1. 请求头(request header)  2. 普通头(general header)  3. 实体头(entity header)</p><p>　　通常来说，由于Get请求往往不包含内容实体，因此也不会有实体头。</p><p>　　第三部分内容只在POST请求中存在，因为GET请求并不包含任何实体。</p><p style="text-align:left">　　我们截取一个具体的Post请求来看这三部分，我在一个普通的aspx页面放一个BUTTON, 当提交后会产生一个Post请求，如图4所示。</p><p style="text-align:center"><a href="http://images.cnblogs.com/cnblogs_com/CareySon/201204/201204271057105124.png"><img style="display:block;margin-left:auto;margin-right:auto" title="4" src="http://images.cnblogs.com/cnblogs_com/CareySon/201204/201204271057135389.png" alt="4" width="660" height="287"></a>图4. HTTP请求由三部分组成</p><p>　　<strong>HTTP请求方法</strong></p><p>　　虽然我们所常见的只有Get和Post方法，但实际上HTTP请求方法还有很多，比如： PUT方法，DELETE方法，HEAD方法，CONNECT方法，TRACE方法。这里我就不细说了，自行Bing。</p><p>　　这里重点说一下Get和Post方法，网上关于Get和Post的区别满天飞。但很多没有说到点子上。Get和Post最大的区别就是Post有上面所说的第三部分：内容。而Get不存在这个内容。因此就像Get和Post其名称所示那样，Get用于从服务器上取内容，虽然可以通过QueryString向服务器发信息，但这违背了Get的本意，QueryString中的信息在HTTP看来仅仅是获取所取得内容的一个参数而已。而Post是由客户端向服务器端发送内容的方式。因此具有请求的第三部分：内容。</p><p>　　<strong>HTTP响应(HTTP Response)</strong></p><p>　　当Web服务器收到HTTP请求后，会根据请求的信息做某些处理(这些处理可能仅仅是静态的返回页，或是包含Asp.net, PHP, Jsp等语言进行处理后返回)，相应的返回一个HTTP响应。HTTP响应在结构上很类似于HTTP请求，也是由三部分组成，分别为:</p><p>　　1. 状态行</p><p>　　2. HTTP头</p><p>　　3. 返回内容</p><p>　　首先来看状态行，一个典型的HTTP状态如下:</p><blockquote>HTTP/1.1 200 OK</blockquote><p>　　第一部分是HTTP版本，第二部分是响应状态码，第三部分是状态码的描述，因此也可以把第二和第三部分看成一个部分。</p><p>　　对于HTTP版本没有什么好说的，而状态码值得说一下，网上对于每个具体的HTTP状态码所代表的含义都有解释，这里我说一下分类。</p><ul><li><p>信息类 (100-199)</p></li><li><p>响应成功 (200-299)</p></li><li><p>重定向类 (300-399)</p></li><li><p>客户端错误类 (400-499)</p></li><li><p>服务端错误类 (500-599)</p></li></ul><p>　　HTTP响应中包含的头包括：1. 响应头(response header) 2. 普通头(general header) 3. 实体头(entity header)。</p><p>　　第三部分HTTP响应内容就是HTTP请求所请求的信息。这个信息可以是一个HTML，也可以是一个图片。比如我访问百度，HTTP Response如图5所示。</p><p style="text-align:center"><a href="http://images.cnblogs.com/cnblogs_com/CareySon/201204/201204271057182852.png"><img style="display:block;margin-left:auto;margin-right:auto" title="5" src="http://images.cnblogs.com/cnblogs_com/CareySon/201204/20120427105722524.png" alt="5" width="573" height="235" border="0"></a>图5.一个典型的HTTP响应</p><p>　　图5中的响应是一个HTML，当然还可以是其它类型，比如图片，如图6所示。</p><p style="text-align:center"><a href="http://images.cnblogs.com/cnblogs_com/CareySon/201204/201204271057253329.png"><img style="display:block;margin-left:auto;margin-right:auto" title="6" src="http://images.cnblogs.com/cnblogs_com/CareySon/201204/201204271057273560.png" alt="6" width="555" height="216" border="0"></a>图6.HTTP响应内容是图片</p><p>　　这里会有一个疑问，既然HTTP响应的内容不仅仅是HTML，还可以是其它类型，那么浏览器如何正确对接收到的信息进行处理？</p><p>　　这是通过媒体类型确定的(Media Type)，具体来说对应Content-Type这个HTTP头，比如图5中是text/html, 图6是image/jpeg。</p><p>　　媒体类型的格式为：大类/小类  比如图5中的html是小类，而text是大类。</p><p>　　IANA(The Internet Assigned Numbers Authority，互联网数字分配机构)定义了8个大类的媒体类型，分别是:</p><ul><li><p><tt>application </tt>(比如: <tt>application/vnd.ms-excel</tt>.)</p></li><li><p><tt>audio</tt> (比如: <tt>audio/mpeg</tt>.)</p></li><li><p><tt>image</tt> (比如: <tt>image/png</tt>.)</p></li><li><p><tt>message</tt> (比如: <tt>message/http</tt>.)</p></li><li><p><tt>model </tt>(比如: <tt>model/vrml</tt>.)</p></li><li><p><tt>multipart</tt> (比如: <tt>multipart/form-data</tt>.)</p></li><li><p><tt>text </tt>(比如: <tt>text/html</tt>.)</p></li><li><p><tt>video </tt>(比如:<tt>video/quicktime</tt>.)</p></li></ul><p>　　<strong>HTTP头</strong></p><p>　　HTTP头仅仅是一个标签而已，比如我在Aspx中加入代码:</p><blockquote>Response.AddHeader("测试头"，"测试值");</blockquote><p>　　对应的我们可以在fiddler抓到的信息如图7所示。</p><p style="text-align:center"><a href="http://images.cnblogs.com/cnblogs_com/CareySon/201204/201204271057292122.png"><img style="display:block;margin-left:auto;margin-right:auto" title="7" src="http://images.cnblogs.com/cnblogs_com/CareySon/201204/201204271057329944.png" alt="7" width="344" height="112" border="0"></a>图7.HTTP头</p><p>　　不难看出，HTTP头并不是严格要求的，仅仅是一个标签，如果浏览器可以解析就会按照某些标准（比如浏览器自身标准，W3C的标准）去解释这个头，否则不识别的头就会被浏览器无视。对服务器也是同理。假如你编写一个浏览器，你可以将上面的头解释成任何你想要的效果<img src="http://images.cnblogs.com/cnblogs_com/CareySon/201204/201204271057336663.png" alt="微笑"></p><p>　　下面我们说的HTTP头都是W3C标准的头，我不会对每个头的作用进行详细说明，关于HTTP头作用的文章在网上已经很多了，请自行Bing。HTTP头按照其不同的作用，可以分为四大类。</p><p>　　<strong>通用头(General header)</strong></p><p>　　通用头即可以包含在HTTP请求中，也可以包含在HTTP响应中。通用头的作用是描述HTTP协议本身。比如描述HTTP是否持久连接的Connection头，HTTP发送日期的Date头，描述HTTP所在TCP连接时间的Keep-Alive头，用于缓存控制的Cache-Control头等。</p><p>　　<strong>实体头(Entity header)</strong></p><p>　　实体头是那些描述HTTP信息的头。既可以出现在HTTP POST方法的请求中，也可以出现在HTTP响应中。比如图5和图6中的Content-Type和Content-length都是描述实体的类型和大小的头都属于实体头。其它还有用于描述实体的Content-Language,Content-MD5,Content-Encoding以及控制实体缓存的Expires和Last-Modifies头等。</p><p>　　<strong>请求头(HTTP Request Header)</strong></p><p>　　请求头是那些由客户端发往服务端以便帮助服务端更好的满足客户端请求的头。请求头只能出现在HTTP请求中。比如告诉服务器只接收某种响应内容的Accept头，发送Cookies的Cookie头，显示请求主机域的HOST头，用于缓存的<tt>If-Match，<tt>If-Match-Since,<tt>If-None-Match头，用于只取HTTP响应信息中部分信息的Range头，用于附属HTML相关请求引用的Referer头等。</tt></tt></tt></p><p>　　<tt><tt><tt><strong>响应头(HTTP Response Header)</strong></tt></tt></tt></p><p><tt><tt><tt>　　HTTP响应头是那些描述HTTP响应本身的头，这里面并不包含描述HTTP响应中第三部分也就是HTTP信息的头（这部分由实体头负责）。比如说定时刷新的Refresh头，当遇到503错误时自动重试的Retry-After头，显示服务器信息的Server头，设置COOKIE的Set-Cookie头，告诉客户端可以部分请求的Accept-Ranges头等。</tt></tt></tt></p><p>　　<strong>状态保持</strong></p><p>　　还有一点值得注意的是，HTTP协议是无状态的，这意味着对于接收HTTP请求的服务器来说，并不知道每一次请求来自同一个客户端还是不同客户端，每一次请求对于服务器来说都是一样的。因此需要一些额外的手段来使得服务器在接收某个请求时知道这个请求来自于某个客户端。如图8所示。</p><p style="text-align:center"><a href="http://images.cnblogs.com/cnblogs_com/CareySon/201204/201204271057358289.png"><img style="display:block;margin-left:auto;margin-right:auto" title="8" src="http://images.cnblogs.com/cnblogs_com/CareySon/201204/201204271057389982.png" alt="8" width="525" height="228" border="0"></a>图8.服务器并不知道请求1和请求2来自同一个客户端</p><p>　　<strong>通过Cookies保持状态</strong></p><p>　　为了解决这个问题，HTTP协议通过Cookies来保持状态，对于图8中的请求，如果使用Cookies进行状态控制，则变成了如图9所示。</p><p style="text-align:center"><a href="http://images.cnblogs.com/cnblogs_com/CareySon/201204/201204271057402373.png"><img style="display:block;margin-left:auto;margin-right:auto" title="9" src="http://images.cnblogs.com/cnblogs_com/CareySon/201204/201204271057427936.png" alt="9" width="570" height="248" border="0"></a>图9.通过Cookies，服务器就可以清楚的知道请求2和请求1来自同一个客户端</p><p>　　<strong>通过表单变量保持状态</strong></p><p>　　除了Cookies之外，还可以使用表单变量来保持状态，比如Asp.net就通过一个叫ViewState的Input=“hidden”的框来保持状态，比如:</p><blockquote>&lt;input type=&quot;hidden&quot; name=&quot;__VIEWSTATE&quot; value=&quot;/wEPDwUKMjA0OTM4MTAwNGRkXUfhlDv1Cs7/qhBlyZROCzlvf5U=&quot; /&gt;</blockquote><p>　　这个原理和Cookies大同小异，只是每次请求和响应所附带的信息变成了表单变量。</p><p>　　<strong>通过QueryString保持状态</strong></p><p>　　这个原理和上述两种状态保持方法原理是一样的，QueryString通过将信息保存在所请求地址的末尾来向服务器传送信息，通常和表单结合使用，一个典型的QueryString比如:</p><blockquote>www.xxx.com/xxx.aspx?var1=value&amp;var2=value2</blockquote><p>　　<strong>总结</strong></p><p>　　本文从一个比较高的视角来看HTTP协议，对于HTTP协议中的细节并没有深挖，但对于HTTP大框架有了比较系统的介绍，更多关于HTTP的细节信息，请去Bing或参看相关书籍:-)</p>