---
layout: post
title:  "模拟HTML表单上传文件（RFC 1867）"
date:   2011-03-29 22:00:32
author: jeffz@live.com (老赵)
categories: program
---

## 模拟HTML表单上传文件（RFC 1867）
### by jeffz@live.com (老赵)
### at 2011-03-29 22:00:32
### original <http://blog.zhaojie.me/2011/03/html-form-file-uploading-programming.html>

<p>如今使用HTTP协议定制API已经是十分常见的事情，在普通的GET和POST请求中传递些参数估计人人都会，但是如果我们需要上传文件呢？如果只是传递单个文件，那么将数据流POST给服务器端即可。但如果需要上传多个文件，或是在文件之外需要附带一些信息，那么又该怎么做呢？之前我遇到过一些朋友是这么打算的，他们说，不如就把文件流转化为文本，然后把它当作一个普通的字段传递。这么做自然可以“实现功能”，但缺点也很多。首先，将二进制流转化为文本会增大体积（例如最常见的BASE64编码会增大1/3的数据量）；其次，既然互联网上存在相关的协议，又为何要自定义一套规则呢？其实这便是《<a href="http://www.faqs.org/rfcs/rfc1867.html">RFC 1867 - Form-based File Upload in HTML</a>》，它是我们用HTML表单上传文件时使用的传输协议，虽然十分常用，但似乎了解它的人并不多。</p>

<h1>普通POST操作</h1>

<p>说起HTML表单，大家绝对不会陌生。例如下面这样的HTML表单：</p>

<pre><span style="color:blue">&lt;</span><span style="color:maroon">form </span><span style="color:red">action</span><span style="color:blue">=&quot;http://www.baidu.com/&quot; </span><span style="color:red">method</span><span style="color:blue">=&quot;post&quot;&gt;
    &lt;</span><span style="color:maroon">input </span><span style="color:red">type</span><span style="color:blue">=&quot;text&quot; </span><span style="color:red">name</span><span style="color:blue">=&quot;myText1&quot; /&gt;&lt;</span><span style="color:maroon">br </span><span style="color:blue">/&gt;
    &lt;</span><span style="color:maroon">input </span><span style="color:red">type</span><span style="color:blue">=&quot;text&quot; </span><span style="color:red">name</span><span style="color:blue">=&quot;myText2&quot; /&gt;&lt;</span><span style="color:maroon">br </span><span style="color:blue">/&gt;
    &lt;</span><span style="color:maroon">input </span><span style="color:red">type</span><span style="color:blue">=&quot;submit&quot; /&gt;
&lt;/</span><span style="color:maroon">form</span><span style="color:blue">&gt;
</span></pre>

<p>提交时会向服务器端发出这样的数据（已经去除部分不相关的头信息）：</p>

<pre>POST http://www.baidu.com/ HTTP/1.1
Host: www.baidu.com
Content-Length: 74
Content-Type: application/x-www-form-urlencoded

myText1=hello+world&amp;myText2=%E4%BD%A0%E5%A5%BD%E4%B8%96%E7%95%8C</pre>

<p>对于普通的HTML POST表单，它会在头信息里使用Content-Length注明内容长度。头信息每行一条，空行之后便是Body，即“内容”。此外，我们可以发现它的Content-Type是application/x-www-form-urlencoded，这意味着消息内容会经过URL编码，就像在GET请求时URL里的Query String那样。在上面的例子中，myText1里的空格被编码为加号，而myText2，您看得出这是“你好世界”这四个汉字吗？</p>

<h1>使用POST上传文件</h1>

<p>不过之前的HTML表单是无法上传文件的，因此<a href="http://www.faqs.org/rfcs/rfc1867.html">RFC 1867</a>应运而生，它的目的便是让HTML表单可以提交文件。它对HTML表单的扩展主要是：</p>

<ul>
  <li>为input标记的type属性增加一个file选项。 </li>

  <li>在POST情况下，为form标记的enctype属性定义默认值为application/x-www-form-urlencoded。 </li>

  <li>为form标记的enctype属性增加multipart/form-data选项。 </li>
</ul>

<p>于是，如果我们要使用HTML表单提交文件，则可以使用如下定义：</p>

<pre><span style="color:blue">&lt;</span><span style="color:maroon">form </span><span style="color:red">action</span><span style="color:blue">=&quot;http://www.baidu.com/&quot; </span><span style="color:red">method</span><span style="color:blue">=&quot;post&quot; </span><span style="color:red">enctype</span><span style="color:blue">=&quot;multipart/form-data&quot;&gt;
    &lt;</span><span style="color:maroon">input </span><span style="color:red">type</span><span style="color:blue">=&quot;text&quot; </span><span style="color:red">name</span><span style="color:blue">=&quot;myText&quot; /&gt;&lt;</span><span style="color:maroon">br </span><span style="color:blue">/&gt;
    &lt;</span><span style="color:maroon">input </span><span style="color:red">type</span><span style="color:blue">=&quot;file&quot; </span><span style="color:red">name</span><span style="color:blue">=&quot;upload1&quot; /&gt;&lt;</span><span style="color:maroon">br </span><span style="color:blue">/&gt;
    &lt;</span><span style="color:maroon">input </span><span style="color:red">type</span><span style="color:blue">=&quot;file&quot; </span><span style="color:red">name</span><span style="color:blue">=&quot;upload2&quot; /&gt;&lt;</span><span style="color:maroon">br </span><span style="color:blue">/&gt;
    &lt;</span><span style="color:maroon">input </span><span style="color:red">type</span><span style="color:blue">=&quot;submit&quot; /&gt;
&lt;/</span><span style="color:maroon">form</span><span style="color:blue">&gt;
</span></pre>

<p>为了实验所需，我们创建两个文件file1.txt和file2.txt，内容分别为“This is file1.”及“This is file2, it's bigger.”。在文本框里写上“hello world”，并选择这两个文件，提交，则会看到浏览器传递了如下数据：</p>

<pre>POST http://www.baidu.com/ HTTP/1.1
Host: www.baidu.com
Content-Length: 495
Content-Type: multipart/form-data; boundary=---------------------------7db2d1bcc50e6e

-----------------------------7db2d1bcc50e6e
Content-Disposition: form-data; name=&quot;myText&quot;

hello world
-----------------------------7db2d1bcc50e6e
Content-Disposition: form-data; name=&quot;upload1&quot;; filename=&quot;C:\file1.txt&quot;
Content-Type: text/plain

This is file1.
-----------------------------7db2d1bcc50e6e
Content-Disposition: form-data; name=&quot;upload2&quot;; filename=&quot;C:\file2.txt&quot;
Content-Type: text/plain

This is file2, it&#39;s longer.
-----------------------------7db2d1bcc50e6e--
</pre>

<p>这段内容比较有趣，值得细细观察。首先，第一个空行之前自然还是HTTP头，之后则是Body，而此时的Body也比之前要复杂一些。根据RFC 1867定义，我们需要选择一段数据作为“分割边界”，这个“边界数据”不能在内容其他地方出现，一般来说使用一段从概率上说“几乎不可能”的数据即可。例如，上面这段数据使用的是IE 9，而我在Chrome下则是这样的：</p>

<pre>POST http://www.baidu.com/ HTTP/1.1
Host: www.baidu.com
Content-Length: 473
Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryW49oa00LU29E4c5U

------WebKitFormBoundaryW49oa00LU29E4c5U
Content-Disposition: form-data; name=&quot;myText&quot;

hello world
------WebKitFormBoundaryW49oa00LU29E4c5U
Content-Disposition: form-data; name=&quot;upload1&quot;; filename=&quot;file1.txt&quot;
Content-Type: text/plain

This is file1.
------WebKitFormBoundaryW49oa00LU29E4c5U
Content-Disposition: form-data; name=&quot;upload2&quot;; filename=&quot;file2.txt&quot;
Content-Type: text/plain

This is file2, it&#39;s bigger.
------WebKitFormBoundaryW49oa00LU29E4c5U--
</pre>

<p>很显然它们两个选择了不同的数据“模式”作为边界——事实上，浏览器提交两次数据时，使用的边界也可能不会相同，这都没有问题。</p>

<p>选择了边界之后，便会将它放在头部的Content-Type里传递给服务器端，实际需要传递的数据便可以分割为“段”，每段便是“一项”数据。从上面的内容中大家应该都能看出数据传输的规范，因此便不做细谈了。只强调几点：</p>

<ul>
  <li>数据均无需额外编码，直接传递即可，例如您可以看出上面的示例中的“空格”均没有变成加号。至于这里您可以看到清晰地文字内容，是因为我们上传了仅仅包含可视ASCII码的文本文件，如果您上传一个普通的文件，例如图片，捕获到的数据则几乎完全不可读了。 </li>

  <li>IE和Chrome在filename的选择策略上有所不同，前者是文件的完整路径，而后者则仅仅是文件名。 </li>

  <li>数据内容以两条横线结尾，并同样以一个换行结束。在网络协议中一般都以连续的CR、LF（即\r、\n，或0x0D、Ox0A）字符作为换行，这与Windows的标准一致。如果您使用其他操作系统，则需要考虑它们的<a href="http://en.wikipedia.org/wiki/Newline">换行符</a>。 </li>
</ul>

<h1>实现</h1>

<p>了解上述策略之后，使用编程来实现文件上传也是顺理成章的事情，例如我这里便编写了一段简单的代码实现这一功能。</p>

<p>首先，我们定义一个Part类，表示每“段”，它的Write方法会写入整段数据。每段数据分为Header和Body两部分，使用WriteHeader和WriteBody两个抽象方法写入：</p>

<pre><span style="color:blue">public abstract class </span><span style="color:#2b91af">Part
</span>{
    <span style="color:blue">protected abstract void </span>WriteHeader(<span style="color:#2b91af">StreamWriter </span>writer);
    <span style="color:blue">protected abstract void </span>WriteBody(<span style="color:#2b91af">StreamWriter </span>writer);

    <span style="color:blue">public void </span>Write(<span style="color:#2b91af">StreamWriter </span>writer)
    {
        <span style="color:blue">this</span>.WriteHeader(writer);
        writer.WriteLine();
        <span style="color:blue">this</span>.WriteBody(writer);
    }
}</pre>

<p>接着便是表示普通字段的NormalPart和文件上传得FilePart：</p>

<pre><span style="color:blue">public class </span><span style="color:#2b91af">NormalPart </span>: <span style="color:#2b91af">Part
</span>{
    <span style="color:blue">public string </span>Name { <span style="color:blue">get</span>; <span style="color:blue">set</span>; }
    <span style="color:blue">public string </span>Value { <span style="color:blue">get</span>; <span style="color:blue">set</span>; }

    <span style="color:blue">protected override void </span>WriteHeader(<span style="color:#2b91af">StreamWriter </span>writer)
    {
        writer.WriteLine(<span style="color:#a31515">&quot;Content-Disposition: form-data; name=\&quot;{0}\&quot;&quot;</span>, <span style="color:blue">this</span>.Name);
    }

    <span style="color:blue">protected override void </span>WriteBody(<span style="color:#2b91af">StreamWriter </span>writer)
    {
        writer.WriteLine(<span style="color:blue">this</span>.Value);
    }
}

<span style="color:blue">public class </span><span style="color:#2b91af">FilePart </span>: <span style="color:#2b91af">Part
</span>{
    <span style="color:blue">public string </span>Name { <span style="color:blue">get</span>; <span style="color:blue">set</span>; }
    <span style="color:blue">public string </span>FilePath { <span style="color:blue">get</span>; <span style="color:blue">set</span>; }

    <span style="color:blue">protected override void </span>WriteHeader(<span style="color:#2b91af">StreamWriter </span>writer)
    {
        writer.WriteLine(
            <span style="color:#a31515">&quot;Content-Disposition: form-data; name=\&quot;{0}\&quot;; filename=\&quot;{1}\&quot;&quot;</span>,
            <span style="color:blue">this</span>.Name,
            <span style="color:#2b91af">Path</span>.GetFileName(<span style="color:blue">this</span>.FilePath));

        writer.WriteLine(<span style="color:#a31515">&quot;Content-Type: application/octet-stream&quot;</span>);
    }

    <span style="color:blue">protected override void </span>WriteBody(<span style="color:#2b91af">StreamWriter </span>writer)
    {
        <span style="color:blue">var </span>data = <span style="color:#2b91af">File</span>.ReadAllBytes(<span style="color:blue">this</span>.FilePath);
        writer.Flush();
        writer.BaseStream.Write(data, 0, data.Length);
        writer.WriteLine();
    }
}</pre>

<p>最后便是统一写入各段的Write方法，我在这里使用新建的GUID作为“边界”：</p>

<pre><span style="color:blue">static void </span>Write(<span style="color:#2b91af">StreamWriter </span>writer, <span style="color:#2b91af">IEnumerable</span>&lt;<span style="color:#2b91af">Part</span>&gt; parts)
{
    <span style="color:blue">var </span>guidBytes = <span style="color:#2b91af">Guid</span>.NewGuid().ToByteArray();
    <span style="color:blue">var </span>boundary = <span style="color:#a31515">&quot;----------------&quot; </span>+ <span style="color:#2b91af">Convert</span>.ToBase64String(guidBytes);

    <span style="color:blue">foreach </span>(<span style="color:blue">var </span>p <span style="color:blue">in </span>parts)
    {
        writer.WriteLine(boundary);
        p.Write(writer);
    }

    writer.WriteLine(boundary + <span style="color:#a31515">&quot;--&quot;</span>);
}</pre>

<p>其实就是这么简单。不过在实际情况中可能会复杂一些。例如，由于HTTP协议需要先发送头信息，因此我们需要提前计算出Content-Length再传输所有内容，不过我相信这对您来说也不会是件难事。</p>

<h1>其他</h1>

<p>世界上已经有了足够多的协议，在我看来在绝大部分情况下都无所谓使用自定义的协议。协议在制定时，往往也会考虑到安全、性能等诸多方面，有时候我们自己所谓的“顾虑”其理由也并不充分。更重要的是，使用现成的协议，我们往往都有现成的实现，对于开发和测试都会有很大帮助。</p>

<p>RFC 1867是一个很简单的协议，当然再简单也不是我这短短一篇文章可以完整描述的，其中很多细节（例如在同一个“段”中上传多个文件）就要靠您自己去挖掘了。</p>

<p><span style="color:red">广告时间：</span>nBazaar技术会议的邮件列表已经正式启用，所有用户也已添加完成。目前已经发送了第一封邮件，建议您检查一下自己的收件箱或垃圾箱，确保可以收到未来的邮件。如有任何疑问，请发邮件至<img src="http://services.nexodyne.com/email/customicon/9xaGAYDnFdYrRqAdl1tTvrs%3D/Y4fIT8s%3D/000000/ffffff/000000/0/image.png">。</p>