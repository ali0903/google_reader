---
layout: post
title:  "Git和SVN之间的五个基本区别"
date:   2012-12-18 10:33:40
author: 
categories: program
---

## Git和SVN之间的五个基本区别
### by 
### at 2012-12-18 10:33:40
### original <http://blog.jobbole.com/31444/?utm_source=rss&utm_medium=rss&utm_campaign=git%25e5%2592%258csvn%25e4%25b9%258b%25e9%2597%25b4%25e7%259a%2584%25e4%25ba%2594%25e4%25b8%25aa%25e5%259f%25ba%25e6%259c%25ac%25e5%258c%25ba%25e5%2588%25ab>

<p>英文原文：<a href="http://boxysystems.com/index.php/5-fundamental-differences-between-git-svn/">5 Fundamental differences between GIT &amp; SVN</a>，编译：<a href="http://www.aqee.net/5-fundamental-differences-between-git-svn/">外刊IT评论</a></p>
<p>如果你在读这篇文章，说明你跟大多数开发者一样对<a href="http://git-scm.com/">GIT</a>感兴趣，如果你还没有机会来试一试GIT，我想现在你就要了解它了。</p>
<p><a href="http://git-scm.com/">GIT</a>不仅仅是个版本控制系统，它也是个内容管理系统(CMS),工作管理系统等。如果你是一个具有使用SVN背景的人，你需要做一定的思想转换，来适应GIT提供的一些概念和特征。所以，这篇文章的主要目的就是通过介绍GIT能做什么、它和<a href="http://subversion.tigris.org/">SVN</a>在深层次上究竟有什么不同来帮助你认识它。</p>
<p>那好，这就开始吧…</p>
<p><strong>1.GIT是分布式的，SVN不是：</strong></p>
<p>这是GIT和其它非分布式的版本控制系统，例如SVN，CVS等，最核心的区别。如果你能理解这个概念，那么你就已经上手一半了。需要做一点声明，GIT并不是目前第一个或唯一的分布式版本控制系统。还有一些系统，例如<a href="http://www.bitkeeper.com/">Bitkeeper</a>, <a href="http://mercurial.selenic.com/">Mercurial</a>等，也是运行在分布式模式上的。但GIT在这方面做的更好，而且有更多强大的功能特征。</p>
<p>GIT跟SVN一样有自己的集中式版本库或服务器。但，GIT更倾向于被使用于分布式模式，也就是每个开发人员从中心版本库/服务器上chect out代码后会在自己的机器上克隆一个自己的版本库。可以这样说，如果你被困在一个不能连接网络的地方时，就像在飞机上，地下室，电梯里等，你仍然能够提交文件，查看历史版本记录，创建项目分支，等。对一些人来说，这好像没多大用处，但当你突然遇到没有网络的环境时，这个将解决你的大麻烦。</p>
<p>同样，这种分布式的操作模式对于开源软件社区的开发来说也是个巨大的恩赐，你不必再像以前那样做出补丁包，通过email方式发送出去，你只需要创建一个分支，向项目团队发送一个推请求。这能让你的代码保持最新，而且不会在传输过程中丢失。<a href="http://www.github.com/">GitHub.com</a>就是一个这样的优秀案例。</p>
<p>有些谣言传出来说subversion将来的版本也会基于分布式模式。但至少目前还看不出来。</p>
<p><strong>2.GIT把内容按元数据方式存储，而SVN是按文件：</strong></p>
<p><strong></strong>所有的资源控制系统都是把文件的元信息隐藏在一个类似.svn,.cvs等的文件夹里。如果你把.git目录的体积大小跟.svn比较，你会发现它们差距很大。因为,.git目录是处于你的机器上的一个克隆版的版本库，它拥有中心版本库上所有的东西，例如标签，分支，版本记录等。</p>
<p><strong>3.GIT分支和SVN的分支不同：</strong></p>
<p><strong></strong>分支在SVN中一点不特别，就是版本库中的另外的一个目录。如果你想知道是否合并了一个分支，你需要手工运行像这样的命令<em><a href="http://jan.baresovi.cz/dr/en/subversion-mergeinfo">svn propget svn:mergeinfo</a></em>，来确认代码是否被合并。感谢Ben同学指出这个特征。所以，经常会发生有些分支被遗漏的情况。</p>
<p>然而，处理GIT的分支却是相当的简单和有趣。你可以从同一个工作目录下快速的在几个分支间切换。你很容易发现未被合并的分支，你能简单而快捷的合并这些文件。</p>
<p><a href="http://blog.jobbole.com/wp-content/uploads/2012/07/Git-branch-management-strategy1.png" rel="lightbox[31444]" title="Git logo 2"><img title="Git logo 2" src="http://blog.jobbole.com/wp-content/uploads/2012/07/Git-branch-management-strategy1.png" alt="Git logo" width="500" height="209"></a></p>
<p><strong>4.GIT没有一个全局的版本号，而SVN有：</strong></p>
<p><strong></strong>目前为止这是跟SVN相比GIT缺少的最大的一个特征。你也知道，SVN的版本号实际是任何一个相应时间的源代码快照。我认为它是从CVS进化到SVN的最大的一个突破。因为GIT和SVN从概念上就不同，我不知道GIT里是什么特征与之对应。如果你有任何的线索，请在评论里奉献出来与大家共享。</p>
<p><em>更新：有些读者指出，我们可以使用GIT的SHA-1来唯一的标识一个代码快照。这个并不能完全的代替SVN里容易阅读的数字版本号。但，用途应该是相同的。</em></p>
<p><em></em><strong>5.GIT的内容完整性要优于SVN：</strong></p>
<p>GIT的内容存储使用的是<a href="http://en.wikipedia.org/wiki/SHA-1">SHA-1</a>哈希算法。这能确保代码内容的完整性，确保在遇到磁盘故障和网络问题时降低对版本库的破坏。这里有一个很好的关于GIT内容完整性的讨论 –<a href="http://stackoverflow.com/questions/964331/git-file-integrity">http://stackoverflow.com/questions/964331/git-file-integrity</a></p>
<p>GIT和SVN之间只有这五处不同吗？当然不是。我想这5个只是<strong>“最基本的”</strong>和<strong>“最吸引人”</strong>的，我只想到这5点。如果你发现有比这5点更有趣的，请共享出来，欢迎。</p>

<h2>相关文章</h2><ul><li><a href="http://blog.jobbole.com/20069/">蒋鑫：为什么 Git 比 SVN 好</a></li><li><a href="http://blog.jobbole.com/15023/">我痛恨 Git 的 10 个理由</a></li><li><a href="http://blog.jobbole.com/26112/">Git详解之六：Git工具</a></li><li><a href="http://blog.jobbole.com/23398/">阮一峰：Git分支管理策略</a></li><li><a href="http://blog.jobbole.com/25660/">Git详解之五：分布式Git</a></li><li><a href="http://blog.jobbole.com/25775/">Git详解之一：Git起步</a></li><li><a href="http://blog.jobbole.com/25808/">Git详解之二：Git基础</a></li><li><a href="http://blog.jobbole.com/26209/">Git详解之九：Git内部原理</a></li><li><a href="http://blog.jobbole.com/25944/">Git详解之四：服务器上的Git</a></li><li><a href="http://blog.jobbole.com/22647/">图解Git/图形化的Git参考手册</a></li></ul>