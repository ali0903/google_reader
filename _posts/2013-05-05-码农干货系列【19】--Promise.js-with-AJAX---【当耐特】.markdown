---
layout: post
title:  "码农干货系列【19】--Promise.js with AJAX - 【当耐特】"
date:   2013-05-05 10:12:00
author: 【当耐特】
categories: program
---

## 码农干货系列【19】--Promise.js with AJAX - 【当耐特】
### by 【当耐特】
### at 2013-05-05 10:12:00
### original <http://www.cnblogs.com/iamzhanglei/archive/2013/05/05/3060640.html>

<p><strong>更新</strong></p><blockquote>  <p>新增Promise.timeout方法，检测task执行超时并且自动reject</p></blockquote><p><strong>使用</strong></p><div>          Promise.timeout(f1(), 2000).then(f2, <span>function</span> () {              alert(<span>&quot;timeout&quot;</span>);          }).wait(5000).then(f3);          <span>function</span> f1() {              <span>var</span> promise = Promise();              setTimeout(<span>function</span> () {                     console.log(1);                  promise.resolve(<span>&quot;from f1&quot;</span>);              }, 1500)                 <span>return</span> promise;          }             <span>function</span> f2() {              <span>var</span> promise = Promise();              setTimeout(<span>function</span> () {                     console.log(2);                  promise.resolve();              }, 1500)                 <span>return</span> promise;          }             <span>function</span> f3() {              <span>var</span> promise = Promise();              setTimeout(<span>function</span> () {                     console.log(3);                  promise.resolve();              }, 1500)                 <span>return</span> promise;             }</div><p><strong>AJAX</strong></p><div>  <span>function</span> xhr(options) {      <span>var</span> promise = Promise(),          req = <span>new</span> XMLHttpRequest();         req.open(options.method || <span>'GET'</span>, options.url, <span>true</span>);         <span>// Set request headers if provided.</span>      Object.keys(options.headers || {}).forEach(<span>function</span> (key) {          req.setRequestHeader(key, options.headers[key]);      });         req.onreadystatechange = <span>function</span> (e) {          <span>if</span> (req.readyState !== 4) {              <span>return</span>;          }             <span>if</span> ([200, 304].indexOf(req.status) === -1) {              promise.reject(<span>'Server responded with a status of '</span> + req.status);          } <span>else</span> {              promise.resolve(e.target.result);          }      };         req.send(options.data || <span>void</span> 0);         <span>return</span> promise;  }</div><p>使用：</p><div>  xhr({ url: <span>&quot;xxx.php?a=xxx&quot;</span> }).then(<span>function</span> (msg) {     })</div><p>当然，promise支持等待N个AJAX都完成之后进行回掉:</p><div>  Promise(xhr({ url: <span>&quot;a.php?c=xxx&quot;</span> }), xhr({ url: <span>&quot;b.php?d=xxx&quot;</span> })).then(<span>function</span> () {     })</div><p>上面的写法的Promise.when的缺省形式。</p><p><strong>Promise.timeout with AJAX</strong></p><p>这里需要思考的是:timeout是属于AJAX还是属于Promise?</p><p>如果属于AJAX,那么就有下面这种形式：</p><div>  xxx.ajax(<span>&quot;xxx.php&quot;</span>, {      method: <span>&quot;GET&quot;</span>,      data: <span>null</span>,      onSuccess: <span>function</span> () { },      onTimeout: <span>function</span> () { },      timeout: 30000  });</div><p>如果属于Promise:</p><div>  Promise.timeout(xhr({ url: <span>&quot;xxx.php&quot;</span> }), 30000).then(      <span>function</span> () { },      <span>function</span> () { }  )</div><p><strong>更多</strong></p><p>有关promise更多信息你可以访问:</p><p><strong><a href="http://www.cnblogs.com/iamzhanglei/archive/2013/05/03/3056763.html">getting started with Promise.js（总）</a></strong></p><p>你可以<a href="http://files.cnblogs.com/iamzhanglei/promise.js">点击这里</a>下载最新版promise.js。</p><img src="http://www.cnblogs.com/iamzhanglei/aggbug/3060640.html?type=1" width="1" height="1" alt=""><br><p>本文链接：<a href="http://www.cnblogs.com/iamzhanglei/archive/2013/05/05/3060640.html">http://www.cnblogs.com/iamzhanglei/archive/2013/05/05/3060640.html</a>，转载请注明。</p>