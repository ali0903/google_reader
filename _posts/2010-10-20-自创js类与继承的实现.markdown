---
layout: post
title:  "自创js类与继承的实现"
date:   2010-10-20 17:53:36
author: joe
categories: program
---

## 自创js类与继承的实现
### by joe
### at 2010-10-20 17:53:36
### original <http://xiebiji.com/2010/10/%e8%87%aa%e5%88%9bjs%e7%b1%bb%e4%b8%8e%e7%bb%a7%e6%89%bf%e7%9a%84%e5%ae%9e%e7%8e%b0/>

<p>研究了一下js的面向对象编程，模拟了一下类定义和继承，尝试过用原型来做，但是总是做不了，后来用了别的方法，可能不是最好的方法，有见解的同学欢迎评论。</p>

<div><div><pre style="font-family:monospace"><span style="color:#003366;font-weight:bold">function</span> dump<span style="color:#009900">(</span>o<span style="color:#009900">)</span><span style="color:#009900">{</span>
	console.<span style="color:#660066">log</span><span style="color:#009900">(</span>o<span style="color:#009900">)</span><span style="color:#339933">;</span>
<span style="color:#009900">}</span>
<span style="color:#006600;font-style:italic">//模拟类和继承</span>
<span style="color:#003366;font-weight:bold">function</span> <span style="color:#003366;font-weight:bold">Class</span><span style="color:#009900">(</span>args<span style="color:#009900">)</span><span style="color:#009900">{</span>
	a<span style="color:#339933">=</span><span style="color:#003366;font-weight:bold">function</span><span style="color:#009900">(</span><span style="color:#009900">)</span><span style="color:#009900">{</span>
		<span style="color:#000066;font-weight:bold">this</span>.<span style="color:#660066">init</span><span style="color:#339933">=</span><span style="color:#003366;font-weight:bold">function</span><span style="color:#009900">(</span><span style="color:#009900">)</span><span style="color:#009900">{</span>
			<span style="color:#000066">alert</span><span style="color:#009900">(</span><span style="color:#3366cc">'没有为类建立初始化函数'</span><span style="color:#009900">)</span><span style="color:#339933">;</span>
		<span style="color:#009900">}</span>
		<span style="color:#006600;font-style:italic">//添加自定义参数</span>
		<span style="color:#000066;font-weight:bold">for</span><span style="color:#009900">(</span><span style="color:#003366;font-weight:bold">var</span> p <span style="color:#000066;font-weight:bold">in</span> args<span style="color:#009900">)</span><span style="color:#009900">{</span>
			<span style="color:#000066;font-weight:bold">this</span><span style="color:#009900">[</span>p<span style="color:#009900">]</span><span style="color:#339933">=</span>args<span style="color:#009900">[</span>p<span style="color:#009900">]</span><span style="color:#339933">;</span>
		<span style="color:#009900">}</span>
		<span style="color:#006600;font-style:italic">//初始化的时候执行</span>
		<span style="color:#000066;font-weight:bold">this</span>.<span style="color:#660066">init</span>.<span style="color:#660066">apply</span><span style="color:#009900">(</span><span style="color:#000066;font-weight:bold">this</span><span style="color:#339933">,</span>arguments<span style="color:#009900">)</span><span style="color:#339933">;</span>
	<span style="color:#009900">}</span>
 
	a.<span style="color:#660066">extend</span><span style="color:#339933">=</span><span style="color:#003366;font-weight:bold">function</span><span style="color:#009900">(</span>args<span style="color:#009900">)</span><span style="color:#009900">{</span>
		<span style="color:#006600;font-style:italic">//添加自定义参数</span>
		t<span style="color:#339933">=</span><span style="color:#003366;font-weight:bold">new</span> <span style="color:#000066;font-weight:bold">this</span><span style="color:#009900">(</span><span style="color:#009900">)</span><span style="color:#339933">;</span><span style="color:#006600;font-style:italic">//实例化一个父类，会执行父类的初始化函数</span>
		<span style="color:#000066;font-weight:bold">for</span><span style="color:#009900">(</span><span style="color:#003366;font-weight:bold">var</span> p <span style="color:#000066;font-weight:bold">in</span> args<span style="color:#009900">)</span><span style="color:#009900">{</span>
			t<span style="color:#009900">[</span>p<span style="color:#009900">]</span><span style="color:#339933">=</span>args<span style="color:#009900">[</span>p<span style="color:#009900">]</span><span style="color:#339933">;</span>
		<span style="color:#009900">}</span>
		<span style="color:#000066;font-weight:bold">return</span> <span style="color:#003366;font-weight:bold">Class</span><span style="color:#009900">(</span>t<span style="color:#009900">)</span><span style="color:#339933">;</span>
	<span style="color:#009900">}</span>
	<span style="color:#000066;font-weight:bold">return</span> a<span style="color:#339933">;</span>
<span style="color:#009900">}</span>
<span style="color:#006600;font-style:italic">//定义父类</span>
<span style="color:#003366;font-weight:bold">var</span> Parent<span style="color:#339933">=</span><span style="color:#003366;font-weight:bold">Class</span><span style="color:#009900">(</span><span style="color:#009900">{</span>
	p<span style="color:#339933">:</span><span style="color:#cc0000">1</span><span style="color:#339933">,</span>
	<span style="color:#006600;font-style:italic">//init为实例化时执行的初始化函数，雷同于php中的构造函数</span>
	init<span style="color:#339933">:</span><span style="color:#003366;font-weight:bold">function</span><span style="color:#009900">(</span><span style="color:#009900">)</span><span style="color:#009900">{</span>
		<span style="color:#000066;font-weight:bold">this</span>.<span style="color:#660066">p</span><span style="color:#339933">=</span><span style="color:#cc0000">4</span><span style="color:#339933">;</span>
		<span style="color:#000066">alert</span><span style="color:#009900">(</span><span style="color:#000066;font-weight:bold">this</span>.<span style="color:#660066">p</span><span style="color:#009900">)</span><span style="color:#339933">;</span>
	<span style="color:#009900">}</span>
<span style="color:#009900">}</span><span style="color:#009900">)</span><span style="color:#339933">;</span>
<span style="color:#006600;font-style:italic">//定义子类1</span>
<span style="color:#003366;font-weight:bold">var</span> Son<span style="color:#339933">=</span>Parent.<span style="color:#660066">extend</span><span style="color:#009900">(</span><span style="color:#009900">{</span><span style="color:#006600;font-style:italic">//继承Parent类</span>
	s<span style="color:#339933">:</span><span style="color:#cc0000">2</span><span style="color:#339933">,</span>
	init<span style="color:#339933">:</span><span style="color:#003366;font-weight:bold">function</span><span style="color:#009900">(</span>str2<span style="color:#009900">)</span><span style="color:#009900">{</span>
		<span style="color:#000066">alert</span><span style="color:#009900">(</span><span style="color:#000066;font-weight:bold">this</span>.<span style="color:#660066">s</span><span style="color:#009900">)</span><span style="color:#339933">;</span>
	<span style="color:#009900">}</span>
<span style="color:#009900">}</span><span style="color:#009900">)</span><span style="color:#339933">;</span>
<span style="color:#006600;font-style:italic">//定义子类2</span>
<span style="color:#003366;font-weight:bold">var</span> Son2<span style="color:#339933">=</span>Son.<span style="color:#660066">extend</span><span style="color:#009900">(</span><span style="color:#009900">{</span>
	s2<span style="color:#339933">:</span><span style="color:#cc0000">3</span><span style="color:#339933">,</span>
	init<span style="color:#339933">:</span><span style="color:#003366;font-weight:bold">function</span><span style="color:#009900">(</span>str3<span style="color:#009900">)</span><span style="color:#009900">{</span>
		<span style="color:#000066">alert</span><span style="color:#009900">(</span><span style="color:#000066;font-weight:bold">this</span>.<span style="color:#660066">s</span><span style="color:#009900">)</span><span style="color:#339933">;</span>
	<span style="color:#009900">}</span>
<span style="color:#009900">}</span><span style="color:#009900">)</span><span style="color:#339933">;</span>
 
<span style="color:#003366;font-weight:bold">var</span> p<span style="color:#339933">=</span><span style="color:#003366;font-weight:bold">new</span> Parent<span style="color:#009900">(</span><span style="color:#3366cc">'a'</span><span style="color:#009900">)</span><span style="color:#339933">;</span>
dump<span style="color:#009900">(</span>p<span style="color:#009900">)</span><span style="color:#339933">;</span>
<span style="color:#003366;font-weight:bold">var</span> s<span style="color:#339933">=</span><span style="color:#003366;font-weight:bold">new</span> Son<span style="color:#009900">(</span><span style="color:#3366cc">'b'</span><span style="color:#009900">)</span><span style="color:#339933">;</span>
dump<span style="color:#009900">(</span>s<span style="color:#009900">)</span><span style="color:#339933">;</span>
<span style="color:#003366;font-weight:bold">var</span> s2<span style="color:#339933">=</span><span style="color:#003366;font-weight:bold">new</span> Son2<span style="color:#009900">(</span><span style="color:#3366cc">'b3'</span><span style="color:#009900">)</span><span style="color:#339933">;</span>
dump<span style="color:#009900">(</span>s2<span style="color:#009900">)</span><span style="color:#339933">;</span></pre></div></div>

<p>输出的结果：</p>
<p><a href="http://xiebiji.com/wp-content/uploads/2010/10/log.jpg"><img src="http://xiebiji.com/wp-content/uploads/2010/10/log.jpg" alt="" title="log" width="273" height="262"></a></p>
<div>与本文相关的日志</div><ul><li>2008-12-22 -- <a href="http://xiebiji.com/2008/12/mootools-accordion/" title="【mootools中文实例诠释】Accordion类（折叠菜单）的使用">【mootools中文实例诠释】Accordion类（折叠菜单）的使用</a></li><li>2011-02-15 -- <a href="http://xiebiji.com/2011/02/js%e4%b8%adhtml%e5%ad%97%e7%ac%a6%e4%b8%b2%e6%a0%bc%e5%bc%8f%e5%8c%96%e5%87%bd%e6%95%b0/" title="js中html字符串格式化函数">js中html字符串格式化函数</a></li><li>2010-05-27 -- <a href="http://xiebiji.com/2010/05/active_div/" title="多层div相互层叠激活方法（提升z-index）">多层div相互层叠激活方法（提升z-index）</a></li><li>2010-02-18 -- <a href="http://xiebiji.com/2010/02/ppk/" title="过年我也会看书的">过年我也会看书的</a></li><li>2010-01-31 -- <a href="http://xiebiji.com/2010/01/js_load/" title="实际上js文件放最后是个好方案，但有更好的方案">实际上js文件放最后是个好方案，但有更好的方案</a></li></ul>