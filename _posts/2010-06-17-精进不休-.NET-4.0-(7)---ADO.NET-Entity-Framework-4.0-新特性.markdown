---
layout: post
title:  "精进不休 .NET 4.0 (7) - ADO.NET Entity Framework 4.0 新特性"
date:   2010-06-17 09:00:00
author: webabcd
categories: program
---

## 精进不休 .NET 4.0 (7) - ADO.NET Entity Framework 4.0 新特性
### by webabcd
### at 2010-06-17 09:00:00
### original <http://www.cnblogs.com/webabcd/archive/2010/06/17/1759314.html>

<p>作者: <a href="http://www.cnblogs.com/webabcd/">webabcd</a> 发表于 2010-06-17 09:00 <a href="http://www.cnblogs.com/webabcd/archive/2010/06/17/1759314.html">原文链接</a> 阅读: 1585 评论: 4</p><a title="精进不休 .NET 4.0 - 源码下载" href="http://cid-ebc0a6c186317ea6.skydrive.live.com/self.aspx/Share/VS2010.rar">[源码下载]</a><br><br><br>
<div align="center">精进不休 .NET 4.0 (7) - ADO.NET Entity Framework 4.0 新特性</div><br><br>作者：<a title="webabcd - 专注于asp.net, Silverlight" href="http://webabcd.cnblogs.com/">webabcd</a><br><br><br>介绍<br>ADO.NET Entity Framework 4.0 的新增功能<br>
<ul style="margin:0px 0px 0px 2em"><li>对外键的支持，即把外键当做实体的一个属性来处理 </li><li>对复杂类型的支持，即实体属性可以是一个复杂类型 </li><li>将多个表映射到一个概念实体，将一个表拆为多个概念实体 </li><li>增强了 LINQ to Entities</li><li>新增了对 POCO（Plain Old CLR Object）的支持，即 Model 代码中不会有任何关于持久化的代码 </li><li>其他新特性 </li></ul><br><br>示例<br>1、外键 的 Demo<br>EntityFramework/ForeignKeys/Demo.aspx.cs<br>
<div><img alt="" src="http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif"><img src="http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif"><span>代码</span> 
<div>
<div><span style="color:#008000">/*</span><span style="color:#008000"><br> * ADO.NET Entity Framework 4.0 - 新增了对外键的支持，即把外键当做实体的一个属性来处理<br> </span><span style="color:#008000">*/</span><span style="color:#000000"><br><br></span><span style="color:#0000ff">using</span><span style="color:#000000"> System;<br></span><span style="color:#0000ff">using</span><span style="color:#000000"> System.Collections.Generic;<br></span><span style="color:#0000ff">using</span><span style="color:#000000"> System.Linq;<br></span><span style="color:#0000ff">using</span><span style="color:#000000"> System.Web;<br></span><span style="color:#0000ff">using</span><span style="color:#000000"> System.Web.UI;<br></span><span style="color:#0000ff">using</span><span style="color:#000000"> System.Web.UI.WebControls;<br><br></span><span style="color:#0000ff">namespace</span><span style="color:#000000"> DataAccess.EntityFramework.ForeignKeys<br>{<br>    </span><span style="color:#0000ff">public</span><span style="color:#000000"> </span><span style="color:#0000ff">partial</span><span style="color:#000000"> </span><span style="color:#0000ff">class</span><span style="color:#000000"> Demo : System.Web.UI.Page<br>    {<br>        </span><span style="color:#0000ff">private</span><span style="color:#000000"> Random _random </span><span style="color:#000000">=</span><span style="color:#000000"> </span><span style="color:#0000ff">new</span><span style="color:#000000"> Random();<br>        </span><span style="color:#0000ff">protected</span><span style="color:#000000"> </span><span style="color:#0000ff">void</span><span style="color:#000000"> Page_Load(</span><span style="color:#0000ff">object</span><span style="color:#000000"> sender, EventArgs e)<br>        {<br>            </span><span style="color:#008000">//</span><span style="color:#008000"> 在一个已存在的产品类别下新建一个产品（通过外键值）</span><span style="color:#008000"><br></span><span style="color:#000000">            </span><span style="color:#0000ff">using</span><span style="color:#000000"> (var ctx </span><span style="color:#000000">=</span><span style="color:#000000"> </span><span style="color:#0000ff">new</span><span style="color:#000000"> ForeignKeysEntities())<br>            {<br>                Product p </span><span style="color:#000000">=</span><span style="color:#000000"> </span><span style="color:#0000ff">new</span><span style="color:#000000"> Product<br>                {<br>                    Name </span><span style="color:#000000">=</span><span style="color:#000000"> </span><span style="color:#800000">"</span><span style="color:#800000">webabcd test</span><span style="color:#800000">"</span><span style="color:#000000"> </span><span style="color:#000000">+</span><span style="color:#000000"> _random.Next().ToString(),<br>                    ProductNumber </span><span style="color:#000000">=</span><span style="color:#000000"> _random.Next().ToString(),<br>                    StandardCost </span><span style="color:#000000">=</span><span style="color:#000000"> </span><span style="color:#800080">1</span><span style="color:#000000">,<br>                    ListPrice </span><span style="color:#000000">=</span><span style="color:#000000"> </span><span style="color:#800080">1</span><span style="color:#000000">,<br>                    SellStartDate </span><span style="color:#000000">=</span><span style="color:#000000"> DateTime.Now,<br>                    rowguid </span><span style="color:#000000">=</span><span style="color:#000000"> Guid.NewGuid(),<br>                    ModifiedDate </span><span style="color:#000000">=</span><span style="color:#000000"> DateTime.Now,<br>                    ProductCategoryID </span><span style="color:#000000">=</span><span style="color:#000000"> </span><span style="color:#800080">18</span><span style="color:#000000"><br>                };<br><br>                </span><span style="color:#008000">//</span><span style="color:#008000"> 这里需要手工 Add 这个新的 Product，然后再调用 SaveChanges()</span><span style="color:#008000"><br></span><span style="color:#000000">                ctx.Products.AddObject(p);<br>                Response.Write(ctx.SaveChanges());<br>            }<br><br>            Response.Write(</span><span style="color:#800000">"</span><span style="color:#800000">&lt;br /&gt;&lt;br /&gt;</span><span style="color:#800000">"</span><span style="color:#000000">);<br><br>            </span><span style="color:#008000">//</span><span style="color:#008000"> 在一个已存在的产品类别下新建一个产品（通过外键对象）</span><span style="color:#008000"><br></span><span style="color:#000000">            </span><span style="color:#0000ff">using</span><span style="color:#000000"> (var ctx </span><span style="color:#000000">=</span><span style="color:#000000"> </span><span style="color:#0000ff">new</span><span style="color:#000000"> ForeignKeysEntities())<br>            {<br>                Product p </span><span style="color:#000000">=</span><span style="color:#000000"> </span><span style="color:#0000ff">new</span><span style="color:#000000"> Product<br>                {<br>                    Name </span><span style="color:#000000">=</span><span style="color:#000000"> </span><span style="color:#800000">"</span><span style="color:#800000">webabcd test</span><span style="color:#800000">"</span><span style="color:#000000"> </span><span style="color:#000000">+</span><span style="color:#000000"> _random.Next().ToString(),<br>                    ProductNumber </span><span style="color:#000000">=</span><span style="color:#000000"> _random.Next().ToString(),<br>                    StandardCost </span><span style="color:#000000">=</span><span style="color:#000000"> </span><span style="color:#800080">1</span><span style="color:#000000">,<br>                    ListPrice </span><span style="color:#000000">=</span><span style="color:#000000"> </span><span style="color:#800080">1</span><span style="color:#000000">,<br>                    SellStartDate </span><span style="color:#000000">=</span><span style="color:#000000"> DateTime.Now,<br>                    rowguid </span><span style="color:#000000">=</span><span style="color:#000000"> Guid.NewGuid(),<br>                    ModifiedDate </span><span style="color:#000000">=</span><span style="color:#000000"> DateTime.Now,<br>                    ProductCategory </span><span style="color:#000000">=</span><span style="color:#000000"> ctx.ProductCategories.Single(c </span><span style="color:#000000">=&gt;</span><span style="color:#000000"> c.ProductCategoryID </span><span style="color:#000000">==</span><span style="color:#000000"> </span><span style="color:#800080">18</span><span style="color:#000000">)<br>                };<br>                <br>                </span><span style="color:#008000">//</span><span style="color:#008000"> 这里直接调用 SaveChanges() 即可，而不用再手工地 Add 这个新的 Product<br>                </span><span style="color:#008000">//</span><span style="color:#008000"> 因为与这个新的 Product 关联的那个已存在的 ProductCategory 会自动地 Add 这个新的 Product</span><span style="color:#008000"><br></span><span style="color:#000000">                Response.Write(ctx.SaveChanges());<br>            }<br>        }<br>    }<br>}</span></div></div></div><br><br>2、复杂类型的 Demo<br>EntityFramework/ComplexType/Demo.aspx.cs 
<div><img alt="" src="http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif"><img src="http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif"><span>代码</span> 
<div>
<div><span style="color:#008000">/*</span><span style="color:#008000"><br> * ADO.NET Entity Framework 4.0 - 新增了对复杂类型的支持，即实体属性可以是一个复杂类型<br> * 1、在 EDM 设计器中的实体上，点击右键，在“Add”选项中可以新建一个复杂类型<br> * 2、在 EDM 设计器中的实体上，选中多个属性后，点击右键，选择“Refactor into New Complex Type”可以合并多个属性为一个复杂类型<br> * 3、在 EDM 设计器中的“Mapping Details”窗口或“Model Broswer”窗口里，可以对复杂类型做编辑<br> * <br> * ADO.NET Entity Framework 4.0 - 对存储过程的支持有了明显的增强<br> * 表现为：可以将存储过程的返回值映射到一个自定义的复杂类型上，当然，这个复杂类型也可以根据储过程的返回值自动生成<br> </span><span style="color:#008000">*/</span><span style="color:#000000"><br><br></span><span style="color:#0000ff">using</span><span style="color:#000000"> System;<br></span><span style="color:#0000ff">using</span><span style="color:#000000"> System.Collections.Generic;<br></span><span style="color:#0000ff">using</span><span style="color:#000000"> System.Linq;<br></span><span style="color:#0000ff">using</span><span style="color:#000000"> System.Web;<br></span><span style="color:#0000ff">using</span><span style="color:#000000"> System.Web.UI;<br></span><span style="color:#0000ff">using</span><span style="color:#000000"> System.Web.UI.WebControls;<br><br></span><span style="color:#0000ff">namespace</span><span style="color:#000000"> DataAccess.EntityFramework.ComplexType<br>{<br>    </span><span style="color:#0000ff">public</span><span style="color:#000000"> </span><span style="color:#0000ff">partial</span><span style="color:#000000"> </span><span style="color:#0000ff">class</span><span style="color:#000000"> Demo : System.Web.UI.Page<br>    {<br>        </span><span style="color:#0000ff">protected</span><span style="color:#000000"> </span><span style="color:#0000ff">void</span><span style="color:#000000"> Page_Load(</span><span style="color:#0000ff">object</span><span style="color:#000000"> sender, EventArgs e)<br>        {<br>            </span><span style="color:#0000ff">using</span><span style="color:#000000"> (var ctx </span><span style="color:#000000">=</span><span style="color:#000000"> </span><span style="color:#0000ff">new</span><span style="color:#000000"> ComplexTypeEntities())<br>            {<br>                </span><span style="color:#008000">//</span><span style="color:#008000"> 这里的 Name 类型是自定义的一个复杂类型（其有三个属性，分别为FirstName, MiddleName, LastName），详见 EDM</span><span style="color:#008000"><br></span><span style="color:#000000">                Name name </span><span style="color:#000000">=</span><span style="color:#000000"> ctx.Customers.First().Name;<br><br>                Response.Write(</span><span style="color:#0000ff">string</span><span style="color:#000000">.Format(</span><span style="color:#800000">"</span><span style="color:#800000">FirstName: {0}&lt;br /&gt;MiddleName: {1}&lt;br /&gt;LastName: {2}</span><span style="color:#800000">"</span><span style="color:#000000">, name.FirstName, name.MiddleName, name.LastName));<br>            }<br><br>            Response.Write(</span><span style="color:#800000">"</span><span style="color:#800000">&lt;br /&gt;&lt;br /&gt;</span><span style="color:#800000">"</span><span style="color:#000000">);<br><br>            </span><span style="color:#0000ff">using</span><span style="color:#000000"> (var ctx </span><span style="color:#000000">=</span><span style="color:#000000"> </span><span style="color:#0000ff">new</span><span style="color:#000000"> ComplexTypeEntities())<br>            {<br>                </span><span style="color:#008000">//</span><span style="color:#008000"> 这里的 MyCustomer 类型，是存储过程 uspSelectCustomer（其概念模型为：GetCustomer()） 的返回值的映射类型</span><span style="color:#008000"><br></span><span style="color:#000000">                MyCustomer customer </span><span style="color:#000000">=</span><span style="color:#000000"> ctx.GetCustomer().First();<br>                <br>                Response.Write(</span><span style="color:#0000ff">string</span><span style="color:#000000">.Format(</span><span style="color:#800000">"</span><span style="color:#800000">CustomerID: {0}&lt;br /&gt;FirstName: {1}&lt;br /&gt;MiddleName: {2}&lt;br /&gt;LastName: {3}</span><span style="color:#800000">"</span><span style="color:#000000">, customer.CustomerID, customer.FirstName, customer.MiddleName, customer.LastName));<br>            }<br>        }<br>    }<br>}</span></div></div></div><br><br>3、将一个表拆为多个概念实体的 Demo<br>EntityFramework/TableSplitting/Demo.aspx.cs 
<div><img alt="" src="http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif"><img src="http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif"><span>代码</span> 
<div>
<div><span style="color:#008000">/*</span><span style="color:#008000"><br>1、将多个表映射到一个概念实体，原来就可以。在 EDM 设计器中将两个一对一的表映射到一个实体即可<br>2、将一个表拆为多个概念实体，原来也行，但是要在 xml 中手工配置。现在 VS2010 中只需在 EDM 设计器中做如下设置：<br>    a、新建两个实体，做好相关字段相对于原表的映射<br>    b、在这两个实体间新建一个一对一的关联<br>    c、双击这个关联线，编辑约束，指明主表和依赖表，并设置相关的主键<br></span><span style="color:#008000">*/</span><span style="color:#000000"><br><br></span><span style="color:#0000ff">using</span><span style="color:#000000"> System;<br></span><span style="color:#0000ff">using</span><span style="color:#000000"> System.Collections.Generic;<br></span><span style="color:#0000ff">using</span><span style="color:#000000"> System.Linq;<br></span><span style="color:#0000ff">using</span><span style="color:#000000"> System.Web;<br></span><span style="color:#0000ff">using</span><span style="color:#000000"> System.Web.UI;<br></span><span style="color:#0000ff">using</span><span style="color:#000000"> System.Web.UI.WebControls;<br><br></span><span style="color:#0000ff">namespace</span><span style="color:#000000"> DataAccess.EntityFramework.TableSplitting<br>{<br>    </span><span style="color:#0000ff">public</span><span style="color:#000000"> </span><span style="color:#0000ff">partial</span><span style="color:#000000"> </span><span style="color:#0000ff">class</span><span style="color:#000000"> Demo : System.Web.UI.Page<br>    {<br>        </span><span style="color:#0000ff">protected</span><span style="color:#000000"> </span><span style="color:#0000ff">void</span><span style="color:#000000"> Page_Load(</span><span style="color:#0000ff">object</span><span style="color:#000000"> sender, EventArgs e)<br>        {<br>            </span><span style="color:#008000">//</span><span style="color:#008000"> 将一个 ErrorLog 表映射到两个实体上 ErrorLog 和 ErrorLogExt，详见 EDM</span><span style="color:#008000"><br></span><span style="color:#000000">            </span><span style="color:#0000ff">using</span><span style="color:#000000"> (var ctx </span><span style="color:#000000">=</span><span style="color:#000000"> </span><span style="color:#0000ff">new</span><span style="color:#000000"> TableSplittingEntities())<br>            {<br>                ErrorLog log </span><span style="color:#000000">=</span><span style="color:#000000"> ctx.ErrorLogs.First();<br>                Response.Write(log.ErrorLogID);<br><br>                Response.Write(</span><span style="color:#800000">"</span><span style="color:#800000">&lt;br /&gt;</span><span style="color:#800000">"</span><span style="color:#000000">);<br><br>                log.ErrorLogExtReference.Load();<br>                Response.Write(log.ErrorLogExt.ErrorMessage);<br>            }<br>        }<br>    }<br>}</span></div></div></div><br><br>4、LINQ to Entities 新功能的 Demo<br>EntityFramework/LINQ2Entities/Demo.aspx.cs 
<div><img alt="" src="http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif"><img src="http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif"><span>代码</span> 
<div>
<div><span style="color:#008000">/*</span><span style="color:#008000"><br> * ADO.NET Entity Framework 4.0 - 增强了 LINQ to Entities<br> </span><span style="color:#008000">*/</span><span style="color:#000000"><br><br></span><span style="color:#0000ff">using</span><span style="color:#000000"> System;<br></span><span style="color:#0000ff">using</span><span style="color:#000000"> System.Collections.Generic;<br></span><span style="color:#0000ff">using</span><span style="color:#000000"> System.Linq;<br></span><span style="color:#0000ff">using</span><span style="color:#000000"> System.Web;<br></span><span style="color:#0000ff">using</span><span style="color:#000000"> System.Web.UI;<br></span><span style="color:#0000ff">using</span><span style="color:#000000"> System.Web.UI.WebControls;<br><br></span><span style="color:#0000ff">using</span><span style="color:#000000"> System.Data.Objects;<br></span><span style="color:#0000ff">using</span><span style="color:#000000"> System.Data.Common;<br><br></span><span style="color:#0000ff">namespace</span><span style="color:#000000"> DataAccess.EntityFramework.LINQ2Entities<br>{<br>    </span><span style="color:#0000ff">public</span><span style="color:#000000"> </span><span style="color:#0000ff">partial</span><span style="color:#000000"> </span><span style="color:#0000ff">class</span><span style="color:#000000"> Demo : System.Web.UI.Page<br>    {<br>        </span><span style="color:#0000ff">protected</span><span style="color:#000000"> </span><span style="color:#0000ff">void</span><span style="color:#000000"> Page_Load(</span><span style="color:#0000ff">object</span><span style="color:#000000"> sender, EventArgs e)<br>        {<br>            Demo1();<br>            Demo2();<br><br>            </span><span style="color:#008000">//</span><span style="color:#008000"> 支持 Single() 扩展方法了，之前的版本不支持</span><span style="color:#008000"><br></span><span style="color:#000000">        }<br><br>        </span><span style="color:#0000ff">private</span><span style="color:#000000"> </span><span style="color:#0000ff">void</span><span style="color:#000000"> Demo1()<br>        {<br>            </span><span style="color:#008000">//</span><span style="color:#008000"> ADO.NET Entity Framework 4.0 - 新增了 System.Data.Objects.EntityFunctions 和 System.Data.Objects.SqlClient.SqlFunctions<br>            </span><span style="color:#008000">//</span><span style="color:#008000"> 其作用相当于 Linq to Sql 中的 System.Data.Linq.SqlClient.SqlMethods</span><span style="color:#008000"><br></span><span style="color:#000000">            </span><span style="color:#0000ff">using</span><span style="color:#000000"> (var ctx </span><span style="color:#000000">=</span><span style="color:#000000"> </span><span style="color:#0000ff">new</span><span style="color:#000000"> LINQ2EntitiesEntities())<br>            {<br>                var products </span><span style="color:#000000">=</span><span style="color:#000000"><br>                      from p </span><span style="color:#0000ff">in</span><span style="color:#000000"> ctx.Products<br>                      </span><span style="color:#0000ff">where</span><span style="color:#000000"> System.Data.Objects.SqlClient.SqlFunctions.DateDiff(</span><span style="color:#800000">"</span><span style="color:#800000">year</span><span style="color:#800000">"</span><span style="color:#000000">, p.SellStartDate, DateTime.Now) </span><span style="color:#000000">&lt;=</span><span style="color:#000000"> </span><span style="color:#800080">10</span><span style="color:#000000"><br>                      select p;<br>                <br>                Response.Write((products </span><span style="color:#0000ff">as</span><span style="color:#000000"> System.Data.Objects.ObjectQuery).ToTraceString());<br>                Response.Write(</span><span style="color:#800000">"</span><span style="color:#800000">&lt;br /&gt;</span><span style="color:#800000">"</span><span style="color:#000000">);<br>                Response.Write(</span><span style="color:#800000">"</span><span style="color:#800000">十年内销售的产品数量为：</span><span style="color:#800000">"</span><span style="color:#000000"> </span><span style="color:#000000">+</span><span style="color:#000000"> products.Count());<br>            }<br><br>            Response.Write(</span><span style="color:#800000">"</span><span style="color:#800000">&lt;br /&gt;&lt;br /&gt;</span><span style="color:#800000">"</span><span style="color:#000000">);<br><br>            </span><span style="color:#008000">//</span><span style="color:#008000"> 上面的示例如果写成 esql 就是如下的写法。当然这个原来就支持。</span><span style="color:#008000"><br></span><span style="color:#000000">            </span><span style="color:#0000ff">using</span><span style="color:#000000"> (var ctx </span><span style="color:#000000">=</span><span style="color:#000000"> </span><span style="color:#0000ff">new</span><span style="color:#000000"> LINQ2EntitiesEntities())<br>            {<br>                </span><span style="color:#0000ff">string</span><span style="color:#000000"> esql </span><span style="color:#000000">=</span><span style="color:#000000"> </span><span style="color:#800000">"</span><span style="color:#800000">select value p from LINQ2EntitiesEntities.Products as p where SqlServer.DATEDIFF(&#39;year&#39;, p.SellStartDate, SqlServer.GETDATE()) &lt;= 10</span><span style="color:#800000">"</span><span style="color:#000000">;<br>                </span><span style="color:#008000">//</span><span style="color:#008000"> string esql = &quot;using SqlServer; select value p from LINQ2EntitiesEntities.Products as p where DATEDIFF(&#39;year&#39;, p.SellStartDate, GETDATE()) &lt;= 10&quot;;</span><span style="color:#008000"><br></span><span style="color:#000000"><br>                ObjectQuery</span><span style="color:#000000">&lt;</span><span style="color:#000000">Product</span><span style="color:#000000">&gt;</span><span style="color:#000000"> products </span><span style="color:#000000">=</span><span style="color:#000000"> ctx.CreateQuery</span><span style="color:#000000">&lt;</span><span style="color:#000000">Product</span><span style="color:#000000">&gt;</span><span style="color:#000000">(esql);<br><br>                Response.Write(products.ToTraceString());<br>                Response.Write(</span><span style="color:#800000">"</span><span style="color:#800000">&lt;br /&gt;</span><span style="color:#800000">"</span><span style="color:#000000">);<br>                Response.Write(</span><span style="color:#800000">"</span><span style="color:#800000">十年内销售的产品数量为：</span><span style="color:#800000">"</span><span style="color:#000000"> </span><span style="color:#000000">+</span><span style="color:#000000"> products.Count());<br>            }<br><br>            Response.Write(</span><span style="color:#800000">"</span><span style="color:#800000">&lt;br /&gt;&lt;br /&gt;</span><span style="color:#800000">"</span><span style="color:#000000">);<br>        }<br><br>        </span><span style="color:#0000ff">private</span><span style="color:#000000"> </span><span style="color:#0000ff">void</span><span style="color:#000000"> Demo2()<br>        {<br>            </span><span style="color:#008000">//</span><span style="color:#008000"> 使用 esql 的方式调用 sql 中的用户自定义函数</span><span style="color:#008000"><br></span><span style="color:#000000">            </span><span style="color:#0000ff">using</span><span style="color:#000000"> (var ctx </span><span style="color:#000000">=</span><span style="color:#000000"> </span><span style="color:#0000ff">new</span><span style="color:#000000"> LINQ2EntitiesEntities())<br>            {<br>                </span><span style="color:#0000ff">string</span><span style="color:#000000"> esql </span><span style="color:#000000">=</span><span style="color:#000000"> </span><span style="color:#800000">"</span><span style="color:#800000">select value top(1) LINQ2EntitiesModel.Store.ufnGetFullName(c.firstName, c.middleName, c.lastName) from LINQ2EntitiesEntities.Customers as c</span><span style="color:#800000">"</span><span style="color:#000000">;<br><br>                ObjectQuery</span><span style="color:#000000">&lt;</span><span style="color:#0000ff">string</span><span style="color:#000000">&gt;</span><span style="color:#000000"> customers </span><span style="color:#000000">=</span><span style="color:#000000"> ctx.CreateQuery</span><span style="color:#000000">&lt;</span><span style="color:#0000ff">string</span><span style="color:#000000">&gt;</span><span style="color:#000000">(esql);<br><br>                Response.Write((customers </span><span style="color:#0000ff">as</span><span style="color:#000000"> System.Data.Objects.ObjectQuery).ToTraceString());<br>                Response.Write(</span><span style="color:#800000">"</span><span style="color:#800000">&lt;br /&gt;</span><span style="color:#800000">"</span><span style="color:#000000">);<br><br>                </span><span style="color:#0000ff">foreach</span><span style="color:#000000"> (var customerName </span><span style="color:#0000ff">in</span><span style="color:#000000"> customers.ToList())<br>                {<br>                    Response.Write(customerName);<br>                    Response.Write(</span><span style="color:#800000">"</span><span style="color:#800000">&lt;br /&gt;</span><span style="color:#800000">"</span><span style="color:#000000">);<br>                }<br>            }<br><br>            Response.Write(</span><span style="color:#800000">"</span><span style="color:#800000">&lt;br /&gt;&lt;br /&gt;</span><span style="color:#800000">"</span><span style="color:#000000">);<br><br>            </span><span style="color:#008000">//</span><span style="color:#008000"> clr 的方式调用 sql 的用户自定义函数。具体实现见 MyClass 类</span><span style="color:#008000"><br></span><span style="color:#000000">            </span><span style="color:#0000ff">using</span><span style="color:#000000"> (var ctx </span><span style="color:#000000">=</span><span style="color:#000000"> </span><span style="color:#0000ff">new</span><span style="color:#000000"> LINQ2EntitiesEntities())<br>            {<br>                var customers </span><span style="color:#000000">=</span><span style="color:#000000"><br>                    from c </span><span style="color:#0000ff">in</span><span style="color:#000000"> ctx.Customers<br>                    select MyClass.GetFullName(c.FirstName, c.MiddleName, c.LastName);<br>                customers </span><span style="color:#000000">=</span><span style="color:#000000"> customers.Take(</span><span style="color:#800080">1</span><span style="color:#000000">);<br><br>                Response.Write((customers </span><span style="color:#0000ff">as</span><span style="color:#000000"> System.Data.Objects.ObjectQuery).ToTraceString());<br>                Response.Write(</span><span style="color:#800000">"</span><span style="color:#800000">&lt;br /&gt;</span><span style="color:#800000">"</span><span style="color:#000000">);<br><br>                </span><span style="color:#0000ff">foreach</span><span style="color:#000000"> (var customerName </span><span style="color:#0000ff">in</span><span style="color:#000000"> customers.ToList())<br>                {<br>                    Response.Write(customerName);<br>                    Response.Write(</span><span style="color:#800000">"</span><span style="color:#800000">&lt;br /&gt;</span><span style="color:#800000">"</span><span style="color:#000000">);<br>                }<br>            }<br>        }<br>        <br>        </span><span style="color:#0000ff">public</span><span style="color:#000000"> </span><span style="color:#0000ff">static</span><span style="color:#000000"> </span><span style="color:#0000ff">class</span><span style="color:#000000"> MyClass<br>        {<br>            <br>            </span><span style="color:#008000">//</span><span style="color:#008000"> System.Data.Objects.DataClasses.EdmFunction(string namespaceName, string functionName) - 将 sql 中的指定的用户自定义函数映射到 clr 的方法上<br>            </span><span style="color:#008000">//</span><span style="color:#008000">     string namespaceName - SSDL（存储模型）的命名空间，可以在 edmx 文件中找到这个值<br>            </span><span style="color:#008000">//</span><span style="color:#008000">     string functionName - sql 中的用户自定义函数名</span><span style="color:#008000"><br></span><span style="color:#000000">            [System.Data.Objects.DataClasses.EdmFunction(</span><span style="color:#800000">"</span><span style="color:#800000">LINQ2EntitiesModel.Store</span><span style="color:#800000">"</span><span style="color:#000000">, </span><span style="color:#800000">"</span><span style="color:#800000">ufnGetFullName</span><span style="color:#800000">"</span><span style="color:#000000">)]<br>            </span><span style="color:#808080">///</span><span style="color:#008000"> </span><span style="color:#808080">&lt;summary&gt;</span><span style="color:#008000"><br>            </span><span style="color:#808080">///</span><span style="color:#008000"> 此方法的参数要与其所映射的 sql 用户自定义函数的参数相匹配<br>            </span><span style="color:#808080">///</span><span style="color:#008000"> 此方法只可用于 linq 表达式，方法内不用做任何实现<br>            </span><span style="color:#808080">///</span><span style="color:#008000"> </span><span style="color:#808080">&lt;/summary&gt;</span><span style="color:#808080"><br></span><span style="color:#000000">            </span><span style="color:#0000ff">public</span><span style="color:#000000"> </span><span style="color:#0000ff">static</span><span style="color:#000000"> </span><span style="color:#0000ff">string</span><span style="color:#000000"> GetFullName(</span><span style="color:#0000ff">string</span><span style="color:#000000"> firstName, </span><span style="color:#0000ff">string</span><span style="color:#000000"> middleName, </span><span style="color:#0000ff">string</span><span style="color:#000000"> lastName)<br>            {<br>                </span><span style="color:#0000ff">throw</span><span style="color:#000000"> </span><span style="color:#0000ff">new</span><span style="color:#000000"> NotSupportedException(</span><span style="color:#800000">"</span><span style="color:#800000">You can only call this method as part of a LINQ expression</span><span style="color:#800000">"</span><span style="color:#000000">);<br>            }<br>        }<br>    }<br>}<br></span></div></div></div><br><br>5、POCO 的 Demo<br>Demo.aspx 
<div><img alt="" src="http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif"><img src="http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif"><span>代码</span> 
<div>
<div><span style="background-color:#ffff00;color:#000000">&lt;%</span><span style="background-color:#f5f5f5;color:#000000">@ Page Language</span><span style="background-color:#f5f5f5;color:#000000">=</span><span style="background-color:#f5f5f5;color:#800000">"</span><span style="background-color:#f5f5f5;color:#800000">C#</span><span style="background-color:#f5f5f5;color:#800000">"</span><span style="background-color:#f5f5f5;color:#000000"> AutoEventWireup</span><span style="background-color:#f5f5f5;color:#000000">=</span><span style="background-color:#f5f5f5;color:#800000">"</span><span style="background-color:#f5f5f5;color:#800000">true</span><span style="background-color:#f5f5f5;color:#800000">"</span><span style="background-color:#f5f5f5;color:#000000"> CodeBehind</span><span style="background-color:#f5f5f5;color:#000000">=</span><span style="background-color:#f5f5f5;color:#800000">"</span><span style="background-color:#f5f5f5;color:#800000">Demo.aspx.cs</span><span style="background-color:#f5f5f5;color:#800000">"</span><span style="background-color:#f5f5f5;color:#000000"> Inherits</span><span style="background-color:#f5f5f5;color:#000000">=</span><span style="background-color:#f5f5f5;color:#800000">"</span><span style="background-color:#f5f5f5;color:#800000">POCODemo.Demo</span><span style="background-color:#f5f5f5;color:#800000">"</span><span style="background-color:#f5f5f5;color:#000000"> </span><span style="background-color:#ffff00;color:#000000">%&gt;</span><span style="color:#000000"><br><br></span><span style="color:#0000ff">&lt;!</span><span style="color:#ff00ff">DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span><span style="color:#0000ff">&gt;</span><span style="color:#000000"><br></span><span style="color:#0000ff">&lt;</span><span style="color:#800000">html </span><span style="color:#ff0000">xmlns</span><span style="color:#0000ff">="http://www.w3.org/1999/xhtml"</span><span style="color:#0000ff">&gt;</span><span style="color:#000000"><br></span><span style="color:#0000ff">&lt;</span><span style="color:#800000">head </span><span style="color:#ff0000">runat</span><span style="color:#0000ff">="server"</span><span style="color:#0000ff">&gt;</span><span style="color:#000000"><br>    </span><span style="color:#0000ff">&lt;</span><span style="color:#800000">title</span><span style="color:#0000ff">&gt;&lt;/</span><span style="color:#800000">title</span><span style="color:#0000ff">&gt;</span><span style="color:#000000"><br></span><span style="color:#0000ff">&lt;/</span><span style="color:#800000">head</span><span style="color:#0000ff">&gt;</span><span style="color:#000000"><br></span><span style="color:#0000ff">&lt;</span><span style="color:#800000">body</span><span style="color:#0000ff">&gt;</span><span style="color:#000000"><br>    </span><span style="color:#0000ff">&lt;</span><span style="color:#800000">form </span><span style="color:#ff0000">id</span><span style="color:#0000ff">="form1"</span><span style="color:#ff0000"> runat</span><span style="color:#0000ff">="server"</span><span style="color:#0000ff">&gt;</span><span style="color:#000000"><br>    </span><span style="color:#0000ff">&lt;</span><span style="color:#800000">div</span><span style="color:#0000ff">&gt;</span><span style="color:#000000"><br>        ADO.NET Entity Framework 4.0 - 新增了对 POCO（Plain Old CLR Object）的支持，即 Model 代码中不会有任何关于持久化的代码<br>        </span><span style="color:#0000ff">&lt;</span><span style="color:#800000">ul</span><span style="color:#0000ff">&gt;</span><span style="color:#000000"><br>            </span><span style="color:#0000ff">&lt;</span><span style="color:#800000">li</span><span style="color:#0000ff">&gt;</span><span style="color:#000000">1、线上有 POCO 的 T4（Text Template Transformation Toolkit）模板</span><span style="color:#0000ff">&lt;/</span><span style="color:#800000">li</span><span style="color:#0000ff">&gt;</span><span style="color:#000000"><br>            </span><span style="color:#0000ff">&lt;</span><span style="color:#800000">li</span><span style="color:#0000ff">&gt;</span><span style="color:#000000">2、在 EDM 设计器上单击右键，选择“Add Code Generation Item”，在线上模板中选择“ADO.NET C# POCO Entity Generator”模板生成即可</span><span style="color:#0000ff">&lt;/</span><span style="color:#800000">li</span><span style="color:#0000ff">&gt;</span><span style="color:#000000"><br>            </span><span style="color:#0000ff">&lt;</span><span style="color:#800000">li</span><span style="color:#0000ff">&gt;</span><span style="color:#000000">3、在 EF 中，POCO 与非 POCO 不能在一个项目中共存，因为非 POCO 的 EF 在 assembly 级别上会有如下声明</span><span style="color:#0000ff">&lt;</span><span style="color:#800000">br </span><span style="color:#0000ff">/&gt;</span><span style="color:#000000"><br>                using System.Data.Objects.DataClasses;</span><span style="color:#0000ff">&lt;</span><span style="color:#800000">br </span><span style="color:#0000ff">/&gt;</span><span style="color:#000000"><br>                [assembly: EdmSchemaAttribute()]</span><span style="color:#0000ff">&lt;</span><span style="color:#800000">br </span><span style="color:#0000ff">/&gt;</span><span style="color:#000000"><br>                而 POCO 不需要这个声明，所以一个程序集内不能既有 POCO 又有非 POCO </span><span style="color:#0000ff">&lt;/</span><span style="color:#800000">li</span><span style="color:#0000ff">&gt;</span><span style="color:#000000"><br>            </span><span style="color:#0000ff">&lt;</span><span style="color:#800000">li</span><span style="color:#0000ff">&gt;</span><span style="color:#000000">4、具体的 POCO 代码，详见本例中的由 POCO 模板生成的代码 </span><span style="color:#0000ff">&lt;/</span><span style="color:#800000">li</span><span style="color:#0000ff">&gt;</span><span style="color:#000000"><br>        </span><span style="color:#0000ff">&lt;/</span><span style="color:#800000">ul</span><span style="color:#0000ff">&gt;</span><span style="color:#000000"><br>    </span><span style="color:#0000ff">&lt;/</span><span style="color:#800000">div</span><span style="color:#0000ff">&gt;</span><span style="color:#000000"><br>    </span><span style="color:#0000ff">&lt;/</span><span style="color:#800000">form</span><span style="color:#0000ff">&gt;</span><span style="color:#000000"><br></span><span style="color:#0000ff">&lt;/</span><span style="color:#800000">body</span><span style="color:#0000ff">&gt;</span><span style="color:#000000"><br></span><span style="color:#0000ff">&lt;/</span><span style="color:#800000">html</span><span style="color:#0000ff">&gt;</span><span style="color:#000000"><br></span></div></div></div><br><br>6、其他新特性<br>EntityFramework/Others.aspx 
<div><img alt="" src="http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif"><img src="http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif"><span>代码</span> 
<div>
<div><span style="background-color:#ffff00;color:#000000">&lt;%</span><span style="background-color:#f5f5f5;color:#000000">@ Page Title</span><span style="background-color:#f5f5f5;color:#000000">=</span><span style="background-color:#f5f5f5;color:#800000">"</span><span style="background-color:#f5f5f5;color:#800000">其它，一笔带过</span><span style="background-color:#f5f5f5;color:#800000">"</span><span style="background-color:#f5f5f5;color:#000000"> Language</span><span style="background-color:#f5f5f5;color:#000000">=</span><span style="background-color:#f5f5f5;color:#800000">"</span><span style="background-color:#f5f5f5;color:#800000">C#</span><span style="background-color:#f5f5f5;color:#800000">"</span><span style="background-color:#f5f5f5;color:#000000"> MasterPageFile</span><span style="background-color:#f5f5f5;color:#000000">=</span><span style="background-color:#f5f5f5;color:#800000">"</span><span style="background-color:#f5f5f5;color:#800000">~/Site.Master</span><span style="background-color:#f5f5f5;color:#800000">"</span><span style="background-color:#f5f5f5;color:#000000"> AutoEventWireup</span><span style="background-color:#f5f5f5;color:#000000">=</span><span style="background-color:#f5f5f5;color:#800000">"</span><span style="background-color:#f5f5f5;color:#800000">true</span><span style="background-color:#f5f5f5;color:#800000">"</span><span style="background-color:#f5f5f5;color:#000000"><br>    CodeBehind</span><span style="background-color:#f5f5f5;color:#000000">=</span><span style="background-color:#f5f5f5;color:#800000">"</span><span style="background-color:#f5f5f5;color:#800000">Others.aspx.cs</span><span style="background-color:#f5f5f5;color:#800000">"</span><span style="background-color:#f5f5f5;color:#000000"> Inherits</span><span style="background-color:#f5f5f5;color:#000000">=</span><span style="background-color:#f5f5f5;color:#800000">"</span><span style="background-color:#f5f5f5;color:#800000">DataAccess.EntityFramework.Others</span><span style="background-color:#f5f5f5;color:#800000">"</span><span style="background-color:#f5f5f5;color:#000000"> </span><span style="background-color:#ffff00;color:#000000">%&gt;</span><span style="color:#000000"><br><br></span><span style="color:#0000ff">&lt;</span><span style="color:#800000">asp:Content </span><span style="color:#ff0000">ID</span><span style="color:#0000ff">="Content1"</span><span style="color:#ff0000"> ContentPlaceHolderID</span><span style="color:#0000ff">="head"</span><span style="color:#ff0000"> runat</span><span style="color:#0000ff">="server"</span><span style="color:#0000ff">&gt;</span><span style="color:#000000"><br></span><span style="color:#0000ff">&lt;/</span><span style="color:#800000">asp:Content</span><span style="color:#0000ff">&gt;</span><span style="color:#000000"><br></span><span style="color:#0000ff">&lt;</span><span style="color:#800000">asp:Content </span><span style="color:#ff0000">ID</span><span style="color:#0000ff">="Content2"</span><span style="color:#ff0000"> ContentPlaceHolderID</span><span style="color:#0000ff">="ContentPlaceHolder1"</span><span style="color:#ff0000"> runat</span><span style="color:#0000ff">="server"</span><span style="color:#0000ff">&gt;</span><span style="color:#000000"><br>    </span><span style="color:#0000ff">&lt;</span><span style="color:#800000">p</span><span style="color:#0000ff">&gt;</span><span style="color:#000000"><br>        1、T4 模板引擎（微软的一个代码生成引擎） - Text Template Transformation Toolkit<br>    </span><span style="color:#0000ff">&lt;/</span><span style="color:#800000">p</span><span style="color:#0000ff">&gt;</span><span style="color:#000000"><br>    </span><span style="color:#0000ff">&lt;</span><span style="color:#800000">p</span><span style="color:#0000ff">&gt;</span><span style="color:#000000"><br>        2、增强了 EDM 设计器<br>    </span><span style="color:#0000ff">&lt;/</span><span style="color:#800000">p</span><span style="color:#0000ff">&gt;</span><span style="color:#000000"><br>    </span><span style="color:#0000ff">&lt;</span><span style="color:#800000">p</span><span style="color:#0000ff">&gt;</span><span style="color:#000000"><br>        3、对 Model-First 的支持，即根据概念模型生成存储模型和映射模型<br>        </span><span style="color:#0000ff">&lt;</span><span style="color:#800000">ul</span><span style="color:#0000ff">&gt;</span><span style="color:#000000"><br>            </span><span style="color:#0000ff">&lt;</span><span style="color:#800000">li</span><span style="color:#0000ff">&gt;</span><span style="color:#000000">在概念模型（EDM 设计器）上单击右键，选择“ Generate Database from Model”，即可生成数据库脚本</span><span style="color:#0000ff">&lt;/</span><span style="color:#800000">li</span><span style="color:#0000ff">&gt;</span><span style="color:#000000"><br>            </span><span style="color:#0000ff">&lt;</span><span style="color:#800000">li</span><span style="color:#0000ff">&gt;</span><span style="color:#000000"><br>                在 EDM 设计器中，与 Model-First 相关的字段属性说明<br>                </span><span style="color:#0000ff">&lt;</span><span style="color:#800000">ul</span><span style="color:#0000ff">&gt;</span><span style="color:#000000"><br>                    </span><span style="color:#0000ff">&lt;</span><span style="color:#800000">li</span><span style="color:#0000ff">&gt;</span><span style="color:#000000">StoreGeneratedPattern - 该字段所对应的数据库中的列属性（有三种：无，自增，通过计算而来）</span><span style="color:#0000ff">&lt;/</span><span style="color:#800000">li</span><span style="color:#0000ff">&gt;</span><span style="color:#000000"><br>                    </span><span style="color:#0000ff">&lt;</span><span style="color:#800000">li</span><span style="color:#0000ff">&gt;</span><span style="color:#000000">FixedLength - FixedLength=true 对应 nchar, FixedLength=false 对应 nvarchar</span><span style="color:#0000ff">&lt;/</span><span style="color:#800000">li</span><span style="color:#0000ff">&gt;</span><span style="color:#000000"><br>                    </span><span style="color:#0000ff">&lt;</span><span style="color:#800000">li</span><span style="color:#0000ff">&gt;</span><span style="color:#000000">Unicode - 是否是 Unicode 编码。比如字符串如果是非 Unicode 则对应 varchar，如果是 Unicode 则对应 nvarchar</span><span style="color:#0000ff">&lt;/</span><span style="color:#800000">li</span><span style="color:#0000ff">&gt;</span><span style="color:#000000"><br>                    </span><span style="color:#0000ff">&lt;</span><span style="color:#800000">li</span><span style="color:#0000ff">&gt;</span><span style="color:#000000">Max Length - 最大字符数。对应 varchar(n) 或 nvarchar(n) 中的 n</span><span style="color:#0000ff">&lt;/</span><span style="color:#800000">li</span><span style="color:#0000ff">&gt;</span><span style="color:#000000"><br>                </span><span style="color:#0000ff">&lt;/</span><span style="color:#800000">ul</span><span style="color:#0000ff">&gt;</span><span style="color:#000000"><br>            </span><span style="color:#0000ff">&lt;/</span><span style="color:#800000">li</span><span style="color:#0000ff">&gt;</span><span style="color:#000000"><br>        </span><span style="color:#0000ff">&lt;/</span><span style="color:#800000">ul</span><span style="color:#0000ff">&gt;</span><span style="color:#000000"><br>    </span><span style="color:#0000ff">&lt;/</span><span style="color:#800000">p</span><span style="color:#0000ff">&gt;</span><span style="color:#000000"><br>    </span><span style="color:#0000ff">&lt;</span><span style="color:#800000">p</span><span style="color:#0000ff">&gt;</span><span style="color:#000000"><br>        4、Code Only - 在 POCO 的基础上，连 EDM 也不需要了（即不用再做概念模型，映射模型，存储模型的配置）， 纯写代码即可，可惜在 EF 4.0 的正式版里这个功能被去掉了<br>    </span><span style="color:#0000ff">&lt;/</span><span style="color:#800000">p</span><span style="color:#0000ff">&gt;</span><span style="color:#000000"><br>    </span><span style="color:#0000ff">&lt;</span><span style="color:#800000">p</span><span style="color:#0000ff">&gt;</span><span style="color:#000000"><br>        5、 改进了 SQL 语句的生成<br>    </span><span style="color:#0000ff">&lt;/</span><span style="color:#800000">p</span><span style="color:#0000ff">&gt;</span><span style="color:#000000"><br>    </span><span style="color:#0000ff">&lt;</span><span style="color:#800000">p</span><span style="color:#0000ff">&gt;</span><span style="color:#000000"><br>        6、Lazy Loading - 支持延迟加载，相关设置 context.ContextOptions.DeferredLoadingEnabled = true; 其默认值就是 true<br>    </span><span style="color:#0000ff">&lt;/</span><span style="color:#800000">p</span><span style="color:#0000ff">&gt;</span><span style="color:#000000"><br>    </span><span style="color:#0000ff">&lt;</span><span style="color:#800000">p</span><span style="color:#0000ff">&gt;</span><span style="color:#000000"><br>        7、Explicit Loading - 显示加载，看下面的例子<br>        </span><span style="color:#0000ff">&lt;</span><span style="color:#800000">ul</span><span style="color:#0000ff">&gt;</span><span style="color:#000000"><br>            </span><span style="color:#0000ff">&lt;</span><span style="color:#800000">li</span><span style="color:#0000ff">&gt;</span><span style="color:#000000">加载导航属性的方法如下（当然 Include 也可以达到同样的效果）context.LoadProperty(category, &quot;Products&quot;);</span><span style="color:#0000ff">&lt;/</span><span style="color:#800000">li</span><span style="color:#0000ff">&gt;</span><span style="color:#000000"><br>            </span><span style="color:#0000ff">&lt;</span><span style="color:#800000">li</span><span style="color:#0000ff">&gt;</span><span style="color:#000000">上面那个方法（包括 Include）不太好，因为如果实体集名称写错的话 runtime 的时候是才能发现，所以为了避免写错可以使用如下方法 context.LoadProperty(category, c =&gt; c.Products);</span><span style="color:#0000ff">&lt;/</span><span style="color:#800000">li</span><span style="color:#0000ff">&gt;</span><span style="color:#000000"><br>        </span><span style="color:#0000ff">&lt;/</span><span style="color:#800000">ul</span><span style="color:#0000ff">&gt;</span><span style="color:#000000"><br>    </span><span style="color:#0000ff">&lt;/</span><span style="color:#800000">p</span><span style="color:#0000ff">&gt;</span><span style="color:#000000"><br>    </span><span style="color:#0000ff">&lt;</span><span style="color:#800000">p</span><span style="color:#0000ff">&gt;</span><span style="color:#000000"><br>        8、几种自带的 T4 模板的说明<br>        </span><span style="color:#0000ff">&lt;</span><span style="color:#800000">ul</span><span style="color:#0000ff">&gt;</span><span style="color:#000000"><br>            </span><span style="color:#0000ff">&lt;</span><span style="color:#800000">li</span><span style="color:#0000ff">&gt;</span><span style="color:#000000">ADO.NET EntityObject Generator - 把 edmx 文件中的内联代码摘出来</span><span style="color:#0000ff">&lt;/</span><span style="color:#800000">li</span><span style="color:#0000ff">&gt;</span><span style="color:#000000"><br>            </span><span style="color:#0000ff">&lt;</span><span style="color:#800000">li</span><span style="color:#0000ff">&gt;</span><span style="color:#000000">ADO.NET POCO Entity Generator - 生成 POCO（Plain Old CLR Object） 实体，其包括每个表所映射的实体及一个Context，POCO 中不会包含持久化相关的代码（这个模板非内置，可以在线上模板中找到）</span><span style="color:#0000ff">&lt;/</span><span style="color:#800000">li</span><span style="color:#0000ff">&gt;</span><span style="color:#000000"><br>            </span><span style="color:#0000ff">&lt;</span><span style="color:#800000">li</span><span style="color:#0000ff">&gt;</span><span style="color:#000000">ADO.NET Self-Tracking Entity Generator - POCO 的加强版，在 POCO 的基础上增加了实体状态自跟踪的功能</span><span style="color:#0000ff">&lt;/</span><span style="color:#800000">li</span><span style="color:#0000ff">&gt;</span><span style="color:#000000"><br>        </span><span style="color:#0000ff">&lt;/</span><span style="color:#800000">ul</span><span style="color:#0000ff">&gt;</span><span style="color:#000000"><br>    </span><span style="color:#0000ff">&lt;/</span><span style="color:#800000">p</span><span style="color:#0000ff">&gt;</span><span style="color:#000000"><br>    </span><span style="color:#0000ff">&lt;</span><span style="color:#800000">p</span><span style="color:#0000ff">&gt;</span><span style="color:#000000"><br>        9、新建 EDM 的时候，在向导中有一个选项“pluralize or singularize generated object names”，其意思为：生成对应的 Model 时，实体名称自动用单数形式，实体集名称自动用复数形式<br>    </span><span style="color:#0000ff">&lt;/</span><span style="color:#800000">p</span><span style="color:#0000ff">&gt;</span><span style="color:#000000"><br></span><span style="color:#0000ff">&lt;/</span><span style="color:#800000">asp:Content</span><span style="color:#0000ff">&gt;</span><span style="color:#000000"><br><br><br></span></div></div></div><br><br>OK <br><a title="精进不休 .NET 4.0 - 源码下载" href="http://cid-ebc0a6c186317ea6.skydrive.live.com/self.aspx/Share/VS2010.rar">[源码下载]</a> <img src="http://www.cnblogs.com/webabcd/aggbug/1759314.html?type=1" width="1" height="1" alt=""><p>评论: 4　<a href="http://www.cnblogs.com/webabcd/archive/2010/06/17/1759314.html#pagedcomment">查看评论</a>　<a href="http://www.cnblogs.com/webabcd/archive/2010/06/17/1759314.html#commentform">发表评论</a></p><p><a href="http://a4.yeshj.com/rd/35721/">众里寻你千百度，百度期待您的加盟</a></p><hr><p>最新新闻：<br>· <a href="http://news.cnblogs.com/n/66460/">谷歌搜索：实时搜索算法仍需优化</a><span style="color:gray">(2010-06-17 17:14)</span><br>· <a href="http://news.cnblogs.com/n/66459/">微软：WP7和下一代Xbox是最酷的产品</a><span style="color:gray">(2010-06-17 17:12)</span><br>· <a href="http://news.cnblogs.com/n/66458/">新一代Hotmail正式上线</a><span style="color:gray">(2010-06-17 17:10)</span><br>· <a href="http://news.cnblogs.com/n/66457/">围观：Apple Store 上海店即将开幕</a><span style="color:gray">(2010-06-17 16:55)</span><br>· <a href="http://news.cnblogs.com/n/66456/">10 个强大的开源 Web 流量分析工具</a><span style="color:gray">(2010-06-17 16:50)</span><br></p><p>编辑推荐：<a href="http://www.cnblogs.com/miloyip/archive/2010/06/14/Kinematics_ParticleSystem.html">用JavaScript玩转游戏物理：运动学模拟与粒子系统</a><br></p><p>网站导航：<a href="http://www.cnblogs.com">博客园首页</a>  <a href="http://home.cnblogs.com/">个人主页</a>  <a href="http://news.cnblogs.com">新闻</a>  <a href="http://home.cnblogs.com/ing/">闪存</a>  <a href="http://home.cnblogs.com/group/">小组</a>  <a href="http://space.cnblogs.com/q/">博问</a>  <a href="http://space.cnblogs.com">社区</a>  <a href="http://kb.cnblogs.com">知识库</a></p>