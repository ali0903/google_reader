---
layout: post
title:  "前端工程打开速度优化的循序渐进总结"
date:   2013-05-09 16:20:00
author: 旁观者
categories: program
---

## 前端工程打开速度优化的循序渐进总结
### by 旁观者
### at 2013-05-09 16:20:00
### original <http://www.udpwork.com/item/9811.html>

<div>创建人：<a href="http://weibo.com/yunzheng">@郑昀</a></div>

<br>
<div>更新日期：2013年5月8日 分类:<a href="http://www.cnblogs.com/zhengyun_ustc/category/398069.html">前端技术</a></div>

<br>
<div> </div>

<br>
<div><strong>优化的重要指标：</strong>
</div>

<br>
<div>
<br>
<ul>
<br>
<li>页面打开速度（Fully Loaded）</li>

<br>
<ul>
<br>
<li>网站首页（或列表页）之 First View ：打开速度应在 3秒+0.5秒 内；</li>

<br>
<li>对 Repeat View 时的各项指标暂不作要求；</li>

<br>
</ul>

<br>
<li>首屏打开时间（Start Render）</li>

<br>
<ul>
<br>
<li>网站首页（或列表页） 之 First View ：首屏渲染速度应在 1秒+0.5秒 内；</li>

<br>
</ul>

<br>
<li>文档解析完毕时间（Document Complete）：</li>

<br>
<ul>
<br>
<li>对此指标暂不作要求。</li>

<br>
</ul>

<br>
</ul>

<br>
</div>

<br>
<div>指标测试方法参考附录A。</div>

<br>
<div><strong>提纲：</strong>
</div>

<br>
<div><ol>
<br>
<li>遵循常规优化建议</li>

<br>
<li>外联内联js/css的位置摆放建议</li>

<br>
<li>combo handler的引入</li>

<br>
<li>图片无损压缩的优化</li>

<br>
<li>减少 dom elements 的数量</li>

<br>
<li>引入 textarea/script 元素做延迟解析异步渲染</li>

<br>
</ol>
</div>

<br>
<div></div>

<br>
<div><strong>优化第一阶段：遵循常规优化建议</strong>
</div>

<br>
<div>本阶段所使用工具参考附录B。</div>

<br>
<div>常规优化建议：</div>

<br>
<div><ol>
<br>
<li><strong>javascript 外联文件引用放在 html 文档底部</strong>
：具体如何摆放内联JS/CSS和外联JS/CSS，请参考 优化第二阶段；</li>

<br>
<li><strong>css 外联文件引用在 html 文档头部</strong>
：位于 header 内；</li>

<br>
<li><strong>http 静态资源尽量用多个子域名</strong>
：充分利用现代浏览器的多线程并发下载能力。浏览器的多线程下载能力，参考 附录C；</li>

<br>
</ol>
<ul>
<br>
<li>具体建议：</li>

<br>
<ul>
<br>
<li>JS、CSS、CSS背景图片、CSSSprite图片分散在 s0～s2.55tuanimg.com 下；</li>

<br>
<li>业务类图片分散在 p0～p3.55tuanimg.com 下；</li>

<br>
</ul>

<br>
</ul>

<br>
<li>服务器端提供 html 文档和 http 静态资源时，<strong>尽量开启 gzip 压缩</strong>
；</li>

<br>
<ul>
<br>
<li>json/xml 等格式的文本响应，也建议开启 gzip ；</li>

<br>
<li>jepg/png 等图片，可以选择不开启 gzip，因为可能服务器端图片无损压缩算法已经很强悍了，不需要依赖于 gzip；</li>

<br>
</ul>

<br>
<li>在 js、css、image 等资源响应的 http headers 里，<strong>设置 expires、last-modified</strong>
；</li>

<br>
<ul>
<br>
<li>含义参考 附录D；</li>

<br>
<li><a href="http://www.cnblogs.com/zhengyun_ustc/">郑昀</a>实例示范：</li>

<br>
<li>Nginx设置示范：</li>

<br>
<ul>
<br>
<li>
<br>
<table border="1" cellspacing="0" cellpadding="2">
<td><br>
<tbody>
<br>
<tr>
<br>
<td>
<br>
<div>
<br>
<p>location ~ .*\.(js|css)${</p>

<br>
<p>expires 30d;</p>

<br>
<p>}</p>

<br>
<p>location ~ .*\.(gif|jpg|jpeg|png|bmp)${</p>

<br>
<p>expires 1M;</p>

<br>
<p>}</p>

<br>
</div>

<br>
</td>

<td><br>
</td></tr>

<td><br>
</td></tbody>

<td><br>
</td></td></table>

<br>
</li>

<br>
</ul>

<br>
</ul>

<br>
<li><strong>尽量减少 HTTP Requests 的数量</strong>
；</li>

<br>
<ul>
<br>
<li>通过 combo handler 合并 js 和 css 的下载，参考 优化第三阶段；</li>

<br>
<li>本阶段请尽量减少外联 js/css 文件数，尽量减少 ajax 调用；</li>

<br>
</ul>

<br>
<li><strong>js/css 的 minify</strong>
：可统一通过 combo handler 做到压缩加合并；</li>

<br>
<li><strong>减少不必要的 301/302 跳转</strong>
：别让页面打开时间浪费在302多次跳转上（每次可能几十毫秒）；</li>

<br>
<li>请<strong>大量使用 CSS Sprites</strong>
：这样做可以大大地减少CSS背景图片的HTTP请求次数；</li>

<br>
<li><strong>首屏不需要展示的较大尺寸图片，请使用 LazyLoad</strong>
 ；</li>

<br>
<li><strong>避免404错误</strong>
：请求一个外联 js 失败时获得的404错误，不但会堵塞并行的下载，而且浏览器会尝试分析404响应的内容，来辨识它是否是有用的Javascript代码；</li>

<br>
<li><strong>减少 cookies 的大小</strong>
：尽量减少 cookies 的体积对减少用户获得响应的时间十分重要；</li>

<br>
<ul>
<br>
<li>去除不必要的 cookie ；</li>

<br>
<li>尽量减少 cookie 的大小；</li>

<br>
<li>留心将 cookie 设置在适当的域名下，避免影响到其他网站；</li>

<br>
<li>设置适当的过期时间。一个较早的过期时间或者不设置过期时间会更快地删除 cookie，从而减少响应时间。</li>

<br>
</ul>

<br>
<li><strong>使用无 cookies 的域</strong>
：</li>

<br>
<ul>
<br>
<li>当浏览其请求一个静态图片并一同发送 cookie 时，服务器并不需要这些 cookies 。这样只是毫无益处地创建了多余的网络流量。应当保证静态资源在请求时没有携带 cookies，所以需要把你的静态资源放在另一个子域名下。</li>

<br>
<li>如果你的域名是 www.example.org，你可以将你的静态资源放在 static.example.org 中。如果你把 cookie 设置在顶级域名 example.org 上而不是 www.example.org，那么所有发送至 static.example.org 的请求会包括那些 cookies。在 这种情况下，你可以用一个全新的没有 cookie 的域名来放置你的静态资源。</li>

<br>
</ul>

<br>
<li><strong>避免使用 javascript 来定位布局</strong>
；</li>

<br>
</div>

<br>

<br>
<div> </div>

<br>
<div><strong>优化第二阶段：外联内联js/css的位置摆放建议</strong>
</div>

<br>
<div>玉伯定义的加载和阻塞三定律如下：
<br>
<div>
<br>
<ul>
<br>
<li><strong>定律一：资源是否下载依赖 JS 执行结果——</strong>
<strong>JS 有可能会修改 DOM。</strong>
典型的，可能会有 document.write。这意味着，在当前 JS 加载和执行完成前，后续所有资源的下载有可能是没必要的。这是 JS 阻塞后续资源下载的根本原因。</li>

<br>
<li><strong>定律二：JS 执行依赖 CSS 最新渲染——</strong>
<strong>JS 的执行有可能依赖最新样式。</strong>
比如，可能会有 var width = $('#id').width(). 这意味着，JS 代码在执行前，浏览器必须保证在此 JS 之前的所有 css（无论外链还是内嵌）都已下载和解析完成。这是 CSS 阻塞后续 JS 执行的根本原因。</li>

<br>
<li><strong>定律三：现代浏览器存在 prefetch 优化——</strong>
 现代浏览器在竞争中，在 UI update 线程之外，还会开启另一个线程，对后续 JS 和 CSS 提前下载（注意，仅提前下载，并不执行）。有了 prefetch 优化，这意味着，在不存在任何阻塞的情况下，理论上 JS 和 CSS 的下载时机都非常优先，和位置无关。</li>

<br>
</ul>

<br>
<div>根据三定律，<a href="http://www.cnblogs.com/zhengyun_ustc/">郑昀</a>认为：</div>

<br>
</div>

<br>
</div>

<br>
<div>
<br>
<p>一，如果真的需要把外联js和css放在head里，那也需要从下面这种排序</p>

<br>
<p>1.         外联js</p>

<br>
<p><strong>2.         </strong>
<strong>外联css</strong>
</p>

<br>
<p>3.         外联js</p>

<br>
<p>统一为：</p>

<br>
<p><strong>1.         </strong>
<strong>外联css</strong>
</p>

<br>
<p>2.         外联js</p>

<br>
<p>3.         外联js</p>

<br>
<p><strong>不要script</strong>
<strong>和css</strong>
<strong>交替混编。</strong>
</p>

<br>
<p> </p>

<br>
<p>原因是，据有人称：『</p>

<br>
<p>从Firefox 4+开始，对prefetch的策略有些许调整，调整在于 head 中 css 与 js 的位置。</p>

<br>
<p>css 在外联 js 后面时，可能会在 script 后面的 css 加载好之前，提前进行首次渲染。</p>

<br>
<p>然后等后面的 css 加载好后，再次更新 Render Tree 并进行渲染，造成页面闪烁现象。</p>

<br>
<p>即，各种优化策略，似乎随着浏览器版本不同，头可能发生细微差异。</p>

<br>
<p>』</p>

<br>
<p><strong>所以<a href="http://www.cnblogs.com/zhengyun_ustc/">郑昀</a>认为，保守做法是，js </strong>
<strong>和 css </strong>
<strong>不要在 head </strong>
<strong>里交替混编，统一为先外联css</strong>
<strong>再外联js</strong>
<strong>！</strong>
</p>

<br>
<p><strong> </strong>
</p>

<br>
<p>二，但只有万不得已时，才会在 head 里放外联js，否则请把外联js放置到&lt;/body&gt;前。</p>

<br>
<p>原因是张克军的《<a href="http://hikejun.com/blog/2012/02/02/js%E5%92%8Ccss%E7%9A%84%E9%A1%BA%E5%BA%8F%E5%85%B3%E7%B3%BB/">js和css的顺序关系</a>》指出：</p>

<br>
<div>    只要 head 里出现外联js，无论如何放，css文件都不能和body里的请求并行。</div>

<br>
<div>    body 里 dom 渲染取决于 head 里的js执行完。</div>

<br>
<p>外联js放在页面最后，高级浏览器会自动做优化（prefetch），你不用担心，它也可能会提前下载。</p>

<br>
<p> </p>

<br>

<br>
<div> </div>

<br>
<div><strong>优化第三阶段：combo handler 的引入</strong>
</div>

<br>
<div><strong>背景</strong>
</div>

<br>
<div>Combo Handler 是 Yahoo! 开发的一个 Apache 模块，它实现了开发人员简单方便地通过URL来合并JavaScript和CSS文件，从而大大减少文件请求数。</div>

<br>
<div><strong>目的</strong>
</div>

<br>
<div>它满足 Yahoo! 前端优化第一条原则：Minimize HTTP Requests，来减少三路握手和HTTP请求的发送次数。</div>

<br>
<div><strong>国内实例</strong>
</div>

<br>
<div>
<br>
<div>淘宝网首页meta里多个js合并的声明：</div>

<br>
<div>
<br>
<pre>&lt;script src=&quot;http://a.tbcdn.cn/??s/kissy/1.2.0/kissy-min.js,p/global/1.0/global-min.js,p/fp/2012/core.js,p/fp/2012/fp/module.js,p/fp/2012/fp/util.js,p/fp/2012/fp/directpromo.js?t=2012062320120712.js&quot; data-fp-timestamp=&quot;20120703&quot;&gt;&lt;/script&gt;</pre>
<br>
<pre>js之间用英文逗号或&amp;符号分隔。此src的Response是多个js文件的内容拼装。</pre>
<br>
<pre>国内的 Combo Script 支持</pre>
<br>
<pre>淘宝李晶-拔赤在 https://github.com/jayli/combo 下发布了combo.php和minfy.php，能够做到合并文件(不压缩)，以及合并且压缩。</pre>
<br>
<pre>文件列表： - combo.php 合并文件，不压缩 - minify.php 合并压缩文件 - cssmin.php 压缩css - jsmin.php 压缩js - cb.php 淘宝CDN合并文件策略的模拟</pre>
<br>
<pre>脚本使用: - 要求php5及以上版本 - 程序在找不到本地文件的情况下，会去指定的cdn上找同名文件 - 程序会自动转义-min文件为源文件，因此要约定-min文件和原文件要成对出现 - 需要定义combo.php和minify.php中的$YOUR_CDN变量 - 如果只是合并压缩local文件，则不必重置$YOUR_CDN变量 - 这里提供cb.php，用来实现tbcdn的开发环境的模拟,apache的配置在cb.php中</pre>
<br>
<pre>CDN上的 Combo Handler支持</pre>
<br>
<pre>1）2008年7月YUI Team宣布在YAHOO! CDN上对YUI JavaScript组件提供Combo Handler服务。</pre>
<br>
<pre>2）淘宝CDN支持Combo Handler，用逗号分隔js/css，用两个问号来触发combo特性：</pre>
<br>
<div> - http://a.tbcdn.cn/??1.js,2.js</div>

<br>
<div> - http://a.tbcdn.cn/subdir/??1/js,2.js</div>

<br>
<div>用一个问号来添加时间戳，如：</div>

<br>
<div>- http://a.tbcdn.cn/??fp/directpromo.js?t=2012062320120712</div>

<br>
</div>

<br>
</div>

<br>
 
<br>
<div>为了避免 CDN 缓存错误的版本，combo上线的访问策略是：</div>

<br>
<div>
<br>
<div>1）静态文件传到服务器端；</div>

<br>
<div>2）部署人员使用线上静态文件服务器的IP地址直接请求combo服务，挨个儿combo请求一次；</div>

<br>
<div>3）部署人员确认上面的请求都成功、内容无误后，再换成CDN地址再次请求，确保CDN缓存正确的文件内容。</div>

<br>
</div>

<br>
<div> </div>

<br>
</div>

<br>

<br>
<div> </div>

<br>
<div><strong>优化第四阶段：图片无损压缩的优化</strong>
</div>

<br>
<div>
<br>
<div>页面上的各种图片是否有优化的余地，推荐使用 <a href="https://developers.google.com/speed/pagespeed/insights">PageSpeed</a> 检测一下。</div>

<br>
<div>下面的建议来自于冯凯。</div>

<br>
<div>由于专卖店等各种业务上传的图片有 jpeg、png 和 gif 等格式，因此三种格式都需要优化：</div>

<br>
<div>1）jpegtran和jpegoptim的压缩效果几乎完全相同。</div>

<br>
<div>但jpegtran有progressive编码（渐进式的展示，先显示模糊的，再逐步清晰），而且通常（84%的概率）对于大图片（10k+）压缩比更高。</div>

<br>
<div>虽然我们的大部分页面已经改成延迟加载了，但对于非延迟加载的页面，效果明显更好。</div>

<br>
<div>经测试，pagespeed 并没有按照 progressive 方式提供建议。</div>

<br>
<div> </div>

<br>
<div>2）测试了png的几种压缩方式，压缩效果各异。测试的一张图片 optipng 只压缩了约5%，但其他几种达到了20%+</div>

<br>
<div>经测试，pagespeed上给出的可压缩比例是按照optipng给出的。</div>

<br>
<div>pngout据说采用了不同的编码，因此对小图片压缩效果更好。用imageoptim测试确实略优，但命令行上还没找到合适的调用参数。</div>

<br>
<div>目前决定采用pngcrush。</div>

<br>
<div>对于采用png8，以大幅压缩的方法，我们不做技术处理。</div>

<br>
<div> </div>

<br>
<div>3）gif就采用gifsicle做压缩。</div>

<br>
<div>大部分情况下，我们不建议采用gif图片。对于单帧gif更应该用png格式替代。</div>

<br>
<div>这里我们暂不考虑通过技术处理来吧单帧gif转换成png。</div>

<br>
<div> </div>

<br>
<div>4）采用php的exec调用shell脚本的方式来执行这些bin文件。</div>

<br>
</div>

<br>
<div> </div>

<br>
<div>参考资料：</div>

<br>
<div>
<br>
<div>
<br>
<ul>
<br>
<li><a href="http://www.slideshare.net/stoyan/image-optimization-for-the-web-at-phpworks-presentation">stoyan，image-optimization-for-the-web-at-phpworks-presentation</a>，幻灯片；</li>

<br>
<li><a href="http://hi.baidu.com/thinkinginlamp/item/fe313017a77ba90fb98a1acb">老王，优化图片</a>，2009；</li>

<br>
</ul>

<br>
</div>

<br>
</div>

<br>
<div> </div>

<br>
<div>
<br>
<div> </div>

<br>
<div><strong>优化第五阶段：减少 DOM Elements 的数量</strong>
</div>

<br>
<div>
<br>
<div>据<a href="http://lifesinger.wordpress.com/2011/09/23/bigrender-for-taobao-item/">玉伯说</a>，对于典型的淘宝商品详情页，经测试发现，<strong>每增加一个 DOM 节点，会导致首屏渲染时间延迟约 0.5ms</strong>
。</div>

<br>
</div>

<br>
</div>

<br>
<div>
<br>
<div>2011年时，我们首页一个商品节点包含了<strong>21</strong>
个DOM节点，充满了大量的em、strong、span。</div>

<br>
</div>

<br>
<div>
<br>
<div>所以前端开发部门必须与产品部交互设计人员积极沟通，而不仅仅是在她们提供的交互设计稿件上切图，必须在简化视觉元素和精简DOM节点上表达自己的意见。</div>

<br>
</div>

<br>
<div>2012年，简化设计后，首页一个商品节点包含<strong>13</strong>
个节点。</div>

<br>
<div> </div>

<br>
<div>
<br>
<div>
<br>
<div> </div>

<br>
<div><strong>优化第六阶段：引入 textarea/script 元素做延迟解析异步渲染</strong>
</div>

<br>
<div>
<br>
<div><strong>textarea 延迟渲染原理</strong>
</div>

<br>
</div>

<br>
</div>

<br>
<div>
<br>
<div>据<a href="http://lifesinger.wordpress.com/2011/09/23/bigrender-for-taobao-item/">玉伯介绍</a>，HTML 元素中有一种 RCDATA elements，含 textarea 和 title 。</div>

<br>
<div>RCDATA指的是，Replaceable Character Data。</div>

<br>
<div>如果用隐藏的 textarea 来存放 html 代码，textarea 中的内容会按照 RCDATA 规则来解析：</div>

<br>
<div><ol>
<br>
<li>遇到 &amp; 时，会尽可能得到实体字符。</li>

<br>
<li>遇到 &lt;/textarea(\s|\\|&gt;) 时，会结束解析。</li>

<br>
<li>其他都直接作为 textarea 的内容。</li>

<br>
</ol>

<br>
<div><img src="http://images.cnblogs.com/cnblogs_com/zhengyun_ustc/255879/o_clipboard03.png" alt="http://images.cnblogs.com/cnblogs_com/zhengyun_ustc/255879/o_clipboard03.png"></div>

<br>
</div>

<br>
<div>获取也非常简单：</div>

<br>
<div><img src="http://images.cnblogs.com/cnblogs_com/zhengyun_ustc/255879/o_clipboard04.png" alt="http://images.cnblogs.com/cnblogs_com/zhengyun_ustc/255879/o_clipboard04.png"></div>

<br>
<div>据<a href="http://yiminghe.iteye.com/blog/654487">yiminghe介绍</a>，对于屏幕外延迟渲染的 html 存放在隐藏(visibility:hidden)的 textarea 中，并且该 textarea 占据本该渲染的位置，监控窗体滚动，当textarea进入可见区域，将该 textarea 内的 value， 插入到 textarea 之前，并删除掉 textarea 。</div>

<br>
<div> </div>

<br>
<div>这样，把大量不需要在首屏展示的html代码分模块放入一个一个的 textarea 里，<strong>大大减少了DOM节点数</strong>
，从而给浏览器合理的喘息（UI Update）时间，<strong>等首屏真正在显示器上绘制出来后</strong>
，再得到 textarea.value ，填充回 DOM Tree。</div>

<br>
<div> </div>

<br>
<div>textarea+datalazyload，相对于其他延迟加载异步渲染解决方案，最大好处，还是减少首屏绘制时的DOM节点总数。</div>

<br>
<div> </div>

<br>
<div><strong>参考资料：</strong>
</div>

<br>
<div>
<br>
<ul>
<br>
<li>玉伯（王保平，id@lifesinger）《<a href="http://lifesinger.wordpress.com/2011/09/23/bigrender-for-taobao-item/">淘宝详情页的 BigRender 优化与存放大块 HTML 内容的最佳方式</a>》（需翻墙）</li>

<br>
<li>BigRender所依赖的<a href="https://github.com/kissyteam/kissy/blob/master/src/datalazyload/src/datalazyload.js">“数据延迟加载组件”datalazyload</a></li>

<br>
<li>yiminghe《<a href="http://yiminghe.iteye.com/blog/654487">数据延迟加载组件</a>》</li>

<br>
</ul>

<br>
</div>

<br>
</div>

<br>
<div>
<br>
<div><strong>script 延迟渲染原理</strong>
 <strong>
<br>
</strong>

<br>
<div>玉伯在《<a href="http://lifesinger.wordpress.com/2011/09/23/bigrender-for-taobao-item/">淘宝详情页的 BigRender 优化与存放大块 HTML 内容的最佳方式</a>》中提到，</div>

<br>
<div>与前面说的 textarea 存放 html 代码一样，你也可以用 script 来存放，目的都是减少 DOM 节点数。</div>

<br>
<div>浏览器在拿到 html 代码时，首次 Tokenization — Tree Construction 的速度就会大大加快。</div>

<br>
<div><img src="http://images.cnblogs.com/cnblogs_com/zhengyun_ustc/255879/o_clipboard026.png" alt="http://images.cnblogs.com/cnblogs_com/zhengyun_ustc/255879/o_clipboard026.png"></div>

<br>
<div> </div>

<br>
<div><strong>某网是怎么实践的</strong>
</div>

<br>
<div>
<br>
<div>在某网商品详情页上，HTML 文档底部遍布着这样的代码：</div>

<br>

<br>

<br>

<br>

<br>
</div>

<br>
<div><img src="http://images.cnblogs.com/cnblogs_com/zhengyun_ustc/255879/o_clipboard027.png" alt="http://images.cnblogs.com/cnblogs_com/zhengyun_ustc/255879/o_clipboard027.png"></div>

<br>

<br>

<br>

<br>

<br>
</div>

<br>

<br>

<br>

<br>

<br>
</div>

<br>

<br>

<br>

<br>

<br>
</div>

<br>
<div>
<br>
<div><strong>注意这些 script 的 type 是 text/x-template ，</strong>
这是YUI类库自己定义的元素type。</div>

<br>
<div>你可以注意到，LABjs 也玩过这个小技巧，也是自己定义了一个元素 type“text/cache”， 由于浏览器不认识这种 type，就会主动忽略这个 HTML元素。</div>

<br>
<div> </div>

<br>
<div><strong>什么时候取出这些隐藏HTML代码呢？</strong>
</div>

<br>
<div>那就要用到这些 script 的 id 了。</div>

<br>
<div><a href="http://yuilibrary.com/yui/docs/app/app-todo.html">YUI的教程上</a>是这么获得 HTML 代码：</div>

<br>
<div>    template: Y.one('#todo-item-template').<strong>getHTML</strong>
(),</div>

<br>
<div>某网的做法是：</div>

<br>
<div>比如id=<a>search-path-markup的script，</a></div>

<br>
<div><a>也是用Y.one来拿：</a></div>

<br>
<div><img src="http://images.cnblogs.com/cnblogs_com/zhengyun_ustc/255879/o_clipboard028.png" alt="http://images.cnblogs.com/cnblogs_com/zhengyun_ustc/255879/o_clipboard028.png"></div>

<br>
<div><a>然后用_6e.getContent()方法：</a></div>

<br>
<div><img src="http://images.cnblogs.com/cnblogs_com/zhengyun_ustc/255879/o_clipboard029.png" alt="http://images.cnblogs.com/cnblogs_com/zhengyun_ustc/255879/o_clipboard029.png"></div>

<br>
<div>某网由于走的是 YUI3.0 体系，所以可以利用 script 存放html代码技巧，让商品详情页首屏更快地渲染出来。</div>

<br>

<br>

<br>

<br>

<br>
</div>

<br>
<div> </div>

<br>
<div><strong>我们的实践</strong>
</div>

<br>
<div>在商品详情页上，我们把很多不需要首屏渲染的 html 代码放入了类似于</div>

<br>
<div>&lt;textarea id=&quot;goodsAll_info&quot;  style=&quot;display:none;&quot;&gt;&lt;/textarea&gt;</div>

<br>
<div>的隐藏 textarea 里了。</div>

<br>
<div>然后在 html 文档底部，放内联 js 来读取：</div>

<br>
<div>
<br>
<div>&lt;script type=&quot;text/javascript&quot;&gt;</div>

<br>
<div>$(function(){</div>

<br>
<div>var area = document.getElementById(&quot;goodsAll_info&quot;).value;</div>

<br>
<div>document.getElementById(&quot;goodsAll_info_div&quot;).innerHTML = area;</div>

<br>
<div>});</div>

<br>
<div>&lt;/script&gt; </div>

<br>

<br>

<br>

<br>

<br>
</div>

<br>
<div> </div>

<br>
<div><strong> </strong>
</div>

<br>

<br>
<div> </div>

<br>
<div><strong>附录A：页面打开速度和首屏打开时间的测量</strong>
</div>

<br>
<div>推荐工具：</div>

<br>
<div><ol>
<br>
<li>推荐使用 <a href="http://www.webpagetest.org/">http://www.webpagetest.org/</a> 评测，由于它受限于并发测试和带宽，所以资源下载速度较差，只能作为与竞争对手对比测试的依据；</li>

<br>
</ol>
<ul>
<br>
<li>Test Location 请选择亚洲的中国江苏节点；</li>

<br>
<li>Browser 请选择 Firefox、IE9、Chrome等现代浏览器；</li>

<br>
<li>如下图所示：</li>

<br>
<li><a href="http://www.cnblogs.com/zhengyun_ustc/">郑昀</a></li>

<br>

<br>

<br>

<br>

<br>
</ul>

<br>
<li>运维部的每周博睿检测数据报告，<strong>我们以博睿的数据为准</strong>
；</li>

<br>
<ul>
<br>
<li>博睿从它的各地监测节点以及不同电信链路访问，得到一个响应速度的平均值；</li>

<br>

<br>

<br>

<br>

<br>
</ul>

<br>
<li>Google PageSpeed <a href="https://developers.google.com/speed/pagespeed/insights">https://developers.google.com/speed/pagespeed/insights</a> 的 Critical Path Explorer；</li>

<br>

<br>

<br>

<br>

<br>
</div>

<br>
<div><strong>附录B：能提出常规优化建议的工具</strong>
</div>

<br>
<div>推荐工具：</div>

<br>
<div><ol>
<br>
<li>Firefox插件 YSlow! ；</li>

<br>
<li>Google PageSpeed <a href="https://developers.google.com/speed/pagespeed/insights">https://developers.google.com/speed/pagespeed/insights</a> ；</li>

<br>

<br>

<br>

<br>

<br>
</ol>
</div>

<br>
<div>
<br>
<div><strong>附录C：浏览器多线程下载能力一览</strong>
</div>

<br>
<div>参考怪飞的文章《<a href="http://www.planabc.net/2010/05/07/connections_per_server_supported_by_current_browsers/">各浏览器的并行连接数（同域名）</a> 》：</div>

<br>
<div>
<br>
<table border="0" cellspacing="6" cellpadding="4">
<td><br>
<tbody>
<br>
<tr>
<br>
<td>Browser</td>

<td><br>
<td>HTTP/1.1</td>

<td><br>
<td>HTTP/1.0</td>

<td><br>

<br>

<br>

<br>

<br>
</td></td></td></tr>

<td><br>
<tr>
<br>
<td>IE 6,7</td>

<td><br>
<td>2</td>

<td><br>
<td>4</td>

<td><br>

<br>

<br>

<br>

<br>
</td></td></td></tr>

<td><br>
<tr>
<br>
<td>IE 8</td>

<td><br>
<td>6</td>

<td><br>
<td>6</td>

<td><br>

<br>

<br>

<br>

<br>
</td></td></td></tr>

<td><br>
<tr>
<br>
<td>Firefox 3+</td>

<td><br>
<td>6</td>

<td><br>
<td>6</td>

<td><br>

<br>

<br>

<br>

<br>
</td></td></td></tr>

<td><br>
<tr>
<br>
<td>Safari 3+</td>

<td><br>
<td>4</td>

<td><br>
<td>4</td>

<td><br>

<br>

<br>

<br>

<br>
</td></td></td></tr>

<td><br>
<tr>
<br>
<td>Chrome 3+</td>

<td><br>
<td>4</td>

<td><br>
<td>4</td>

<td><br>

<br>

<br>

<br>

<br>
</td></td></td></tr>

<td><br>
<tr>
<br>
<td>Chrome 11+</td>

<td><br>
<td>6</td>

<td><br>
<td>？</td>

<td><br>

<br>

<br>

<br>

<br>
</td></td></td></tr>

<td><br>
<tr>
<br>
<td>Opera 10+</td>

<td><br>
<td>4</td>

<td><br>
<td>4</td>

<td><br>

<br>

<br>

<br>

<br>
</td></td></td></tr>

<td><br>
<tr>
<br>
<td>Opera 11+</td>

<td><br>
<td>16</td>

<td><br>
<td>？</td>

<td><br>

<br>

<br>

<br>

<br>
</td></td></td></tr>

<td><br>

<br>

<br>

<br>

<br>
</td></td></td></td></td></td></td></td></td></tbody>

<td><br>

<br>

<br>

<br>

<br>
</td></td></table>

<br>

<br>

<br>

<br>

<br>
</div>

<br>

<br>

<br>

<br>

<br>
</div>

<br>
<div>
<br>
<div><strong>附录D：expires和last-modified概念</strong>
</div>

<br>
<div>1）Expires</div>

<br>

<br>

<br>

<br>

<br>
</div>

<br>
<div>
<br>
<div>给出的日期/时间后，被响应认为是过时。如Expires: Thu, 02 Apr 2009 05:14:08 GMT</div>

<br>
<div>需和Last-Modified结合使用。用于控制请求文件的有效时间，当请求数据在有效期内时客户端浏览器从缓存请求数据而不是服务器端. 当缓存中数据失效或过期，才决定从服务器更新数据。</div>

<br>
<div>2）Last-Modified和Expires</div>

<br>
<div>Last-Modified标识能够节省一点带宽，但是还是逃不掉发一个HTTP请求出去，而且要和Expires一起用。而Expires标识却使得浏览器干脆连HTTP请求都不用发，比如当用户F5或者点击Refresh按钮的时候就算对于有Expires的URI，一样也会发一个HTTP请求出去，所以，Last-Modified还是要用的，而 且要和Expires一起用。</div>

<br>

<br>

<br>

<br>

<br>
</div>

<br>
<div> </div>

<br>
<div></div>

<br>
<div>赠图一枚：</div>

<br>
<div><a href="http://weibo.com/zhenghedao">@正和岛标准</a>：【看图】做事感觉特别困难的时候，可能收获也会特别巨大。</div>

<br>
<div>
<br>
<div><img src="http://ww2.sinaimg.cn/large/873ceaf9jw1e3nuqnezkrj.jpg"></div>

<br>
 </div>

<br>
<div><a href="http://weibo.com/2767576517" title="烈火在线">@烈火在线</a>：每次看产品经理发来的文档，都是这种感觉。。。</div>

<br>
<div>
<br>
<div><img src="http://ww2.sinaimg.cn/large/a4f5ddc5jw1e439m1389mj20dm092q3j.jpg"></div>

<br>
<div> </div>

<br>
</div>
<img src="http://www.cnblogs.com/zhengyun_ustc/aggbug/3069239.html?type=1"><p><a href="http://www.cnblogs.com/zhengyun_ustc/archive/2013/05/09/frontendoptimize.html">本文链接</a></p>

			<div style="margin-top:8px;padding:6px 0;border-top:1px solid #3cf">
				<div style="text-align:center;margin:16px 0;padding:6px;border:0px dashed #999;font-family:arial;font-size:26px;font-weight:bold">
	<a href="http://www.udpwork.com/item/9811.html#review_form" title="不喜欢" style="text-decoration:none">
		<img src="http://www.udpwork.com//images/thumb_down24.gif" alt="">
		<span style="color:#f33">0</span>
	</a>
	   
	<a href="http://www.udpwork.com/item/9811.html#review_form" title="喜欢" style="text-decoration:none">
		<img src="http://www.udpwork.com//images/thumb_up24.gif" alt="">
		<span style="color:#3c3">0</span>
	</a>
</div>				<p>
					由 <a href="http://www.udpwork.com/">udpwork.com</a> 聚合
					|
					<a href="http://www.udpwork.com/item/9811.html#reviews">评论: 0</a>
					|
					<a href="http://www.jikenow.com/">要! 要! 即刻! Now!</a>
				</p>
			</div>