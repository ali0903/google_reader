---
layout: post
title:  "Haskell语言为什么值得你去学习"
date:   2013-03-12 00:06:38
author: Aqee
categories: program
---

## Haskell语言为什么值得你去学习
### by Aqee
### at 2013-03-12 00:06:38
### original <http://www.aqee.net/why-haskell-is-worth-learning/>

<p>当我向一些新手推荐学习Haskell语言时，得到的反应通常是：“为什么要学Haskell？”，“这是一种实用的语言吗？”或者“这是一种我可以真正<em>用</em>的语言吗？”我的回答是明确的<strong>YES</strong>。</p>
<p>Haskell并不是我工作时的主要语言(我基本上是为嵌入式系统写C程序)，但我仍然发现Haskell难以置信的有用。虽然我的工作从来不用Haskell，我仍然认为花时间去学习它是值得的。那么，为什么要学习Haskell语言呢？</p>
<h3>1. Haskell语言能很好的帮助运用C语言</h3>
<p>事实证明，Haskell语言是一种非常强大的工具，能帮助你写好C程序。我使用Haskell能做的事情经常是我平时认为用常规方法根本不可行的事。</p>
<p>比如说，我的同事想在代码库里找到所有用在<code>if</code>条件语句里的叫做<code>foo</code>的变量。感谢神奇的<a href="http://hackage.haskell.org/package/language-c-0.4.2">language-c</a>程序包以及Haskell语言的泛型，我可以写出一个Haskell函数，让它接受一个预处理的C源代码路径作为输入值，输出找到的位置(如果有的话)，就像下面：</p>
<div>
<table>
<tbody>
<tr>
<td>
<pre style="font-family:monospace">parseAndFindFoos <span style="color:#339933;font-weight:bold">::</span> FilePath <span style="color:#339933;font-weight:bold">-&gt;</span> <span style="color:#cccc00;font-weight:bold">IO</span> <span style="color:green">(</span><span style="color:#cccc00;font-weight:bold">Either</span> ParseError <span style="color:green">[</span>Position<span style="color:green">]</span><span style="color:green">)</span>

parseAndFindFoos path <span style="color:#339933;font-weight:bold">=</span> liftM <span style="color:green">(</span><span style="font-weight:bold">fmap</span> findFooLocations<span style="color:green">)</span> <span style="color:green">(</span>parseCFilePre path<span style="color:green">)</span>

findFooLocations input <span style="color:#339933;font-weight:bold">=</span> <span style="font-weight:bold">fmap</span> posOf <span style="color:green">(</span>listify isIfOfInterest input<span style="color:green">)</span>

isIfOfInterest <span style="color:green">(</span>CIf cond <span style="color:#339933;font-weight:bold">_</span> <span style="color:#339933;font-weight:bold">_</span> <span style="color:#339933;font-weight:bold">_</span><span style="color:green">)</span> <span style="color:#339933;font-weight:bold">=</span> <span style="font-weight:bold">not</span> <span style="color:green">(</span><span style="font-weight:bold">null</span> <span style="color:green">(</span>listify isFooIdent cond<span style="color:green">)</span><span style="color:green">)</span>

isFooIdent <span style="color:green">(</span>Ident name <span style="color:#339933;font-weight:bold">_</span> <span style="color:#339933;font-weight:bold">_</span><span style="color:green">)</span> <span style="color:#339933;font-weight:bold">=</span> name <span style="color:#339933;font-weight:bold">==</span> <span style="background-color:#3cb371">"foo"</span></pre>
</td>
</tr>
</tbody>
</table>
</div>
<p>如果不包括类型标识，只有4行Haskell代码！类型标识通常用来做推导，它通常会被当作说明放到doc里。</p>
<p>这只是一个用在文章里起说明作用的小例子。我使用Haskell语言做了远比这复杂多的任务，例如从全局声明或函数里提取名称和类型，或执行变换，往符合条件的表达式里插入日志函数或边界检查代码。你找不出多少其它语言能像Haskell语言那样让你又快又简洁的完成这种事情。</p>
<h3>我并非是唯一一个在C语言开发中使用Haskell语言的人</h3>
<p>我的一个同事开发了一个神奇的工具，叫做<a href="https://github.com/sw17ch/plunge">plunge</a>，它能让你比较预处理的C代码和源代码，显示出源代码中的每行出现在经过预处理的代码的什么位置。</p>
<p>同样，还有：</p>
<ul>
<li><a href="http://hackage.haskell.org/package/atom">atom</a> – 一种Haskell语言开发的面向领域编程语言(DSL)，能够执行编译调度，在限定的内存使用和准确的时间里编译编译代码。</li>
<li><a href="http://hackage.haskell.org/package/copilot-2.1.0">copilot</a> – 一种用Haskell开发的流式(例如无限长列表)DSL，可以编译进嵌入式C程序中。</li>
<li><a href="http://hackage.haskell.org/package/improve">ImProv</a> – 用Haskell写的一种命令式编程语言，用于高保障性应用。</li>
</ul>
<p>还有很多。</p>
<h3>2. Haskell语言会改变你思维的方式</h3>
<p>我真切的认为，学习Heskell编程能够立即直接带来的在编程方式上的附加效应就是，它会永远的改变你编程思考的方式。没错，没错，我知道这听起来像那种不疼不痒的、含糊的废话，但我是很严肃的！学习Haskell语言已经对我编程方式、我思考的方式产生了大量的影响，比任何我在学校里学的任何东西的影响都大，比任何我工作上的经验的作用都大。</p>
<p>你是否尝试过写出一个复杂的函数，但里面不含任何的可变变量？头次尝试这样写是十分痛苦的。但一旦你有了一些经验，不仅你会发现它会变得很容易，而且你会开始认识到，你的函数可以分割成更小的片段，比你最初想象的更小。那些复杂的函数将会变的完全不是那么复杂；它们可以变成由三个简单函数组成的函数！</p>
<p>这就像是，你只用右脚踢足球，但有一天，你的教练禁止你使用右脚。起初你怎么踢都觉得别扭。但最终你左脚变的和你的右脚一样厉害，你最终成为了一名更优秀的足球运动员。</p>
<p>Haskell语言是如此的与众不同，以至于它会<em>迫使</em>你用完全不同的方式思考你的程序。这就是它是一种很难学的语言的原因之一，但同样也是为什么学习它能获得这么多益处的原因。</p>
<h3>3.Haskell语言陡峭的学习曲线是件好事</h3>
<p>在学习Haskell语言时，人们最常见的抱怨是它陡峭的学习曲线。人们的感觉是对的，它<em>的确</em>具有一个陡峭的学习曲线。它给你的感觉就像是完全重新学习编程。它需要你费点功夫来忘掉你直觉上想用的那种编程模式。没有可变变量！静态类型！我的神呀，它可以把一个函数当成参数，并返回这个函数！怎么会有这种事！？</p>
<p>Haskell语言的难点并不是那些复杂的东西，而是那些简单的东西。比如Monads；Monads是<em>出奇的简单</em>。它就是一种数据类型，它的实例由两个非常简单的函数实现。大部分的实现都只有一、两行代码！领会这些隐式的，有用的，强大的东西会花去你大量的努力。深奥的东西需要花时间去学。这很正常。这意味着你在学一些值得学的知识。</p>
<blockquote><p>“只是因为三轮车好学，你就要一辈子骑三轮车吗？” – Douglas Englebart</p></blockquote>
<hr>本文由<a href="http://www.aqee.net">外刊IT评论网</a>(<a href="http://www.aqee.net">www.aqee.net</a>)原创发表，文章地址：<a href="http://www.aqee.net/why-haskell-is-worth-learning/" rel="bookmark">Haskell语言为什么值得你去学习</a><br><img src="http://www1.feedsky.com/t1/723979197/aqee-net/feedsky/s.gif?r=http://www.aqee.net/why-haskell-is-worth-learning/" border="0" height="0" width="0">