---
layout: post
title:  "螺旋数组算法[上篇]--直接模拟算法"
date:   2010-12-21 12:57:00
author: 徐少侠
categories: program
---

## 螺旋数组算法[上篇]--直接模拟算法
### by 徐少侠
### at 2010-12-21 12:57:00
### original <http://www.cnblogs.com/Chinese-xu/archive/2010/12/21/1912542.html>

<p><font size="3" face="Times New Roman">
<p><strong><font size="4">引子：</font></strong></p>
<p>螺旋矩阵是一个比较经典的算法练习题。多数场景下要求练习者编写程序按螺旋方式填充一个边长为N (N&gt;0) 的二维整形数组。如图</p>
<p><img alt="" src="http://images.cnblogs.com/cnblogs_com/Chinese-xu/201012/20101219211738495.png"></p>
<p>另外，还有的是将1至于螺旋中心，或者逆时针方向演进的。之所以今天发文讨论这个螺旋数组，主要有以下几点：</p>
<p>1、螺旋数组是一个经典习题</p>
<p>2、很多初级程序员至今没有找到理想的解。</p>
<p>由于缺乏正确的程序设计“世界观”，很多初级程序员无法独立探寻比单纯模拟更为巧妙地解，本系列也是为了总结一些常规的分析方法。</p>
<p>3、履行对园友的承诺</p>
<p>本人之前曾在园子里承诺过要发布一个能直接按坐标计算对应值的螺旋矩阵算法，结果迟迟没有成文。并且本人有一个解法至今在网上没有看见有相同或类似的解。因此发布一下，为广大算法爱好者做贡献。</p>
<p>4、为广大被面试的同学出口恶气</p>
<p>用螺旋数组做面试题，我听说过很多次。是不是在1小时内写不出来就是水平差呢？我感觉未必，我会用努力证明所有现有的算法都是有问题的，不优雅的。当你手握“标准”答案的时候，批评对方能力不足是太轻松的事情了。</p>
<p><strong><font size="4">场景简介</font></strong></p>
<p>大多数的题目是这样的</p>
<p><a href="http://www.cnblogs.com/Chinese-xu/admin/file:///C:/Users/v-wix/AppData/Local/Temp/WindowsLiveWriter-429641856/supfiles1F48B86/image4.png"><img style="background-image:none;border-right-width:0px;padding-left:0px;padding-right:0px;display:inline;border-top-width:0px;border-bottom-width:0px;border-left-width:0px;padding-top:0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chinese-xu/Matrix1.PNG" width="402" height="215"></a></p>
<p><strong><font size="4">常规思路</font></strong></p>
<p>是人都知道这个螺旋矩阵里面是有规律的，但是这规律却也不是像打印星号直角三角形那么容易发现。</p>
<p>因此多数程序员都是采用“<font style="background-color:#ffc000">直接模拟算法</font>”。</p>
<p>所谓直接模拟算法，就是很直白得把问题中提出的需求直接用代码方式模拟完成。</p>
<p>其实在多如牛毛的中小型项目中，用这种思路去实现客户需求的做法不说100%吧，95%是一定的。这是一个问题。</p>
<p>回到我们的这个需求，自然就是用一个大循环产生1到N平方的所有整数，然后在循环体内精确地判断矩形的四个边界，并调整实际的X，Y坐标，然后对目标数组的对应位置进行赋值</p>
<p><strong><font size="4">参考代码</font></strong></p>
<p>以下代码收集自网络, 没有验证过</p>
<p><a title="http://www.cppblog.com/issayandfaye/archive/2009/11/15/100976.html" href="http://www.cppblog.com/issayandfaye/archive/2009/11/15/100976.html"><font color="#669966">http://www.cppblog.com/issayandfaye/archive/2009/11/15/100976.html</font></a></p>
<p><font color="#669966"><img align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/ContractedBlock.gif" width="11" height="16"><img align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/ExpandedBlockStart.gif" width="11" height="16"><span></span></font><span>#include&lt;stdio.h&gt;<br>#include&lt;string.h&gt;<br>#define MAX_SIZE 100<br><span style="color:#0000ff">const</span>  <span style="color:#0000ff">int</span>  intx[]= {0,1,0,-1};<br><span style="color:#0000ff">const</span>  <span style="color:#0000ff">int</span>  inty[]= {1,0,-1,0};<br><span style="color:#0000ff">int</span>  main() <br>{ <br>    <span style="color:#0000ff">int</span>  dir,i,j,n,data,x,y,nextx,nexty;<br>    <span style="color:#0000ff">int</span>  arr[MAX_SIZE][MAX_SIZE];<br>    <span style="color:#008000">/**/</span><span style="color:#008000">/*Read size*/</span><br>    <span style="color:#0000ff">printf</span>("<span style="color:#8b0000">please input the size\n</span>");<br>    <span style="color:#0000ff">scanf</span>("<span style="color:#8b0000">%d</span>&quot;,&amp;n);<br>    <span style="color:#008000">/**/</span><span style="color:#008000">/*Init*/</span><br>   x= y= 0;<br>   dir= 0;<br>   memset(arr,0,<span style="color:#0000ff">sizeof</span>(arr));<br>    <span style="color:#008000">/**/</span><span style="color:#008000">/*fill*/</span><br>    <span style="color:#0000ff">for</span>(data=1; data&lt;=n*n; data++)<br>   {<br>       arr[x][y]= data;<br>       nextx= x+intx[dir];<br>       nexty= y+inty[dir];<br>        <span style="color:#0000ff">if</span>(arr[nextx][nexty] || nextx&gt;=n || nexty&gt;=n || nextx&lt;0 || nexty&lt;0)<br>       {<br>           dir++;<br>            <span style="color:#0000ff">if</span>(dir==4)dir=0;<br>       }<br>       x+= intx[dir];<br>       y+= inty[dir];<br>   }<br>    <span style="color:#0000ff">for</span>(i=0; i&lt;n; i++)<br>   {<br>        <span style="color:#0000ff">for</span>(j=0; j&lt;n; j++)<br>            <span style="color:#0000ff">printf</span>("<span style="color:#8b0000">%d\t</span>",arr[i][j]);<br>        <span style="color:#0000ff">printf</span>("<span style="color:#8b0000">\n</span>");<br>   }<br>}</span></p>
<p><a title="http://www.cnblogs.com/drizzlecrj/archive/2007/04/10/706784.html" href="http://www.cnblogs.com/drizzlecrj/archive/2007/04/10/706784.html"><font color="#669966">http://www.cnblogs.com/drizzlecrj/archive/2007/04/10/706784.html</font></a></p>
<p><font color="#669966"></font>
<div><pre><font color="#669966"><img align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/ContractedBlock.gif" width="11" height="16"><img align="top" src="http://www.cnblogs.com/Images/OutliningIndicators/ExpandedBlockStart.gif" width="11" height="16"><span></span></font><span><span style="color:#0000ff">void</span> Simulate(<span style="color:#0000ff">int</span> n)
{
    <span style="color:#0000ff">int</span> x, y;
    x = y = (n - 1) / 2; <span style="color:#008000">//1的位置</span>
    data[x][y] = 1;
    <span style="color:#0000ff">int</span> len = 1;
    <span style="color:#0000ff">int</span> count = 0;
    <span style="color:#0000ff">int</span> num = 2;
    DIRECTION dir = RIGHT;
    <span style="color:#0000ff">while</span>(num  &lt;= n * n)
    {
        <span style="color:#0000ff">for</span>(<span style="color:#0000ff">int</span> i = 0; i &lt; len; i++)
        {
            <span style="color:#0000ff">switch</span>(dir)
            {
            <span style="color:#0000ff">case</span> LEFT:
                --y;    <span style="color:#0000ff">break</span>;
            <span style="color:#0000ff">case</span> RIGHT:
                ++y;     <span style="color:#0000ff">break</span>;
            <span style="color:#0000ff">case</span> UP:
                --x;    <span style="color:#0000ff">break</span>;
            <span style="color:#0000ff">case</span> DOWN:
                ++x;    <span style="color:#0000ff">break</span>;
            <span style="color:#0000ff">default</span>:    <span style="color:#0000ff">break</span>;
            }
            data[x][y] = num++;
        }
        count++;
        <span style="color:#0000ff">if</span>(count == 2)
        {
            count = 0;
            len++;    
        }
        dir = (DIRECTION)((dir + 1) % 4);
    }
}</span><br> </pre></div>
<p> </p>
<p><strong><font size="4">算法点评</font></strong></p>
<p>直接模拟算法能解决很多问题,写起来还特别快速.</p>
<p><strong><font size="3">优点</font></strong></p>
<p>算法思想直观, 实现简单, 在成功精确控制边界变量时很有成就感。</p>
<p><font size="3"><strong>缺点</strong></font></p>
<p>由于对目标数组的访问不是线性的, 在50%的情况下是跨行访问, 在数组尺寸较大时会出现细微性能问题。这个可以参考老赵的文章</p>
<h4><a href="http://www.cnblogs.com/JeffreyZhao/archive/2009/01/22/system-architecture-and-program-performance.html"><font color="#669966">计算机体系结构与程序性能</font></a> 。我就是从那里学来的。</h4>
<p><strong><font size="4"></font></strong> </p>
<p><strong><font size="4">但是</font></strong></p>
<p>从园友　<a href="http://home.cnblogs.com/u/drizzlecrj/"><font color="#669966">农夫三拳</font></a> 2007年的文章 <a href="http://www.cnblogs.com/drizzlecrj/archive/2007/04/10/706784.html"><font color="#669966">面试题-螺旋矩阵(模拟)</font></a> 中我们就已经可以发现其实可以找到一定的数学规律，因此下一篇我们开始讨论究竟有多少隐藏的意义在这个螺旋数组当中。</p>
<p><strong><font size="4">本篇总结</font></strong></p>
<p>以下是个人牢骚，时间宝贵或不愿意听牢骚的情直接无视。</p>
<p>直接模拟算法，是我们广大程序员最熟悉的码代码的模式。而且它的确能胜任很多工作场合。错不在这个模式，在于我们的思维模式。</p>
<p>当思维模式成为思维定式，框死了我们的思想，从而感觉这个世界就是这样的，编码就是如此的，老子已经有5年编码经验了，老鸟了…..</p>
<p>那么，不幸的是，<font color="#ff0000">我们已经失去进步的机会了</font>。</p>
<p>有很多事情我们不敢做，要么没时间做，但是如果连想都不敢想，甚至从来没主动尝试去想。</p>
<p>那么，没有自主思想的人，就是机器人，难听点的是僵尸。</p>
<p> </p>
<p><strong><font size="4">导读：</font></strong></p>
<p>螺旋数组算法[上篇]--直接模拟算法</p>
<p><a href="http://www.cnblogs.com/Chinese-xu/archive/2010/12/21/1912829.html"><font color="#000080">螺旋数组算法[中篇]--常规数学分析</font></a></p>
<p>螺旋数组算法[下篇]--努力接近需求的本质 预计12/23日发布</p></p></font><img src="http://www.cnblogs.com/Chinese-xu/aggbug/1912542.html?type=1" width="1" height="1" alt=""><p>作者: <a href="http://www.cnblogs.com/Chinese-xu/">徐少侠</a> 发表于 2010-12-21 12:57 <a href="http://www.cnblogs.com/Chinese-xu/archive/2010/12/21/1912542.html">原文链接</a></p><p>评论: 8　<a href="http://www.cnblogs.com/Chinese-xu/archive/2010/12/21/1912542.html#pagedcomment">查看评论</a>　<a href="http://www.cnblogs.com/Chinese-xu/archive/2010/12/21/1912542.html#commentform">发表评论</a></p><hr><p>最新新闻：<br>· <a href="http://news.cnblogs.com/n/85345/">中国移动称明年与铁通继续合作 暗示铁通仍独立</a><span style="color:gray">(2010-12-21 20:27)</span><br>· <a href="http://news.cnblogs.com/n/85343/">百度发信提醒站长 称黑客靠黑掉网站实施作弊</a><span style="color:gray">(2010-12-21 20:23)</span><br>· <a href="http://news.cnblogs.com/n/85342/">Verizon确认将在明年CES推出最新4G产品</a><span style="color:gray">(2010-12-21 20:14)</span><br>· <a href="http://news.cnblogs.com/n/85341/">谷歌收购Groupon遭拒 目光瞄向较小团购网站</a><span style="color:gray">(2010-12-21 20:07)</span><br>· <a href="http://news.cnblogs.com/n/85339/">苹果应用程序商店删除为维基解密募捐软件</a><span style="color:gray">(2010-12-21 19:24)</span><br></p><p>编辑推荐：<a href="http://www.cnblogs.com/hongru/archive/2010/12/21/1912820.html">离开了HTML5，面对“流体力学”，我只能旁观了...</a><br></p><p>网站导航：<a href="http://www.cnblogs.com">博客园首页</a>  <a href="http://home.cnblogs.com/">我的园子</a>  <a href="http://news.cnblogs.com">新闻</a>  <a href="http://home.cnblogs.com/ing/">闪存</a>  <a href="http://home.cnblogs.com/group/">小组</a>  <a href="http://space.cnblogs.com/q/">博问</a>  <a href="http://kb.cnblogs.com">知识库</a></p></p>