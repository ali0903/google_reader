---
layout: post
title:  "newLISP你也行 --- 流"
date:   2012-04-05 16:21:19
author: address-withheld@my.opera.com.invalid (F0)
categories: program
---

## newLISP你也行 --- 流
### by address-withheld@my.opera.com.invalid (F0)
### at 2012-04-05 16:21:19
### original <http://my.opera.com/freewinger/blog/show.dml/44440462>

<span>  <span>#############################################################################</span><br>
  <span># </span><span>Name:newLISP你也行</span><span> </span><span>---</span><span> 流</span><br>
  <span># </span><span>Author:黄登</span><span>(</span><span>winger</span><span>)</span><br>
  <span># </span><span>Project:http://code.google.com/p/newlisp-you-can-do</span><br>
  <span># </span><span>Gtalk:free.winger@gmail.com</span><br>
  <span># </span><span>Gtalk-Group:zen0code@appspot.com</span><br>
  <span># </span><span>Blog:http://my.opera.com/freewinger/blog/</span><br>
  <span># </span><span>QQ-Group:31138659</span><br>
  <span># 大道至简 </span><span>--</span><span> </span><span>newLISP</span><br>
  <span>#</span><br>
  <span># </span><span>Copyright</span><span> </span><span>2012</span><span> 黄登</span><span>(</span><span>winger</span><span>)</span><span> </span><span>All</span><span> </span><span>rights</span><span> </span><span>reserved.</span><br>
  <span># </span><span>Permission</span><span> </span><span>is</span><span> </span><span>granted</span><span> </span><span>to</span><span> </span><span>copy,</span><span> </span><span>distribute</span><span> </span><span>and/or</span><br>
  <span># </span><span>modify</span><span> </span><span>this</span><span> </span><span>document</span><span> </span><span>under</span><span> </span><span>the</span><span> </span><span>terms</span><span> </span><span>of</span><span> </span><span>the</span><span> </span><span>GNU</span><span> </span><span>Free</span><span> </span><span>Documentation</span><span> </span><span>License,</span><br>
  <span># </span><span>Version</span><span> </span><span>1.2</span><span> </span><span>or</span><span> </span><span>any</span><span> </span><span>later</span><span> </span><span>version</span><span> </span><span>published</span><span> </span><span>by</span><span> </span><span>the</span><span> </span><span>Free</span><span> </span><span>Software</span><span> </span><span>Foundation</span><span>;</span><br>
  <span># </span><span>with</span><span> </span><span>no</span><span> </span><span>Invariant</span><span> </span><span>Sections,</span><span> </span><span>no</span><span> </span><span>Front-Cover</span><span> </span><span>Texts,and</span><span> </span><span>no</span><span> </span><span>Back-Cover</span><span> </span><span>Texts.</span><br>
  <span>#############################################################################</span><br>
  <br>
  <br>
  <br>
  <span>    浩瀚环宇</span><span>,星辰流彻,冥冥之中,自有规律.</span><br>
  <br>
  <span>    这一节</span><span>,我们要学会如何在</span><span> </span><span>newLISP</span><span> 中控制代码运行轨迹</span><span>.</span><br>
  <br>
  <br>
  <span>    </span><span>(</span><span>keyword</span><span> </span><span>expression1</span><span> </span><span>expression2</span><span> </span><span>expression3</span><span> </span><span>...</span><span>)</span><br>
  <br>
  <span>    这就是所有流控制语句的原型</span><span>.</span><br>
  <span>    根据</span><span>keyword计算的不同,执行后面不同的表达式.一切还是list.</span><br>
  <br>
  <br>
  <span>一</span><span>.</span><span> 判断</span><span>:if...</span><br>
  <br>
  <span>    先让我们看个简单的判断</span><span>.</span><br>
  <br>
  <span>(</span><span>if</span><span> 饿了</span><span>?</span><span> </span><span>(</span><span>吃饭</span><span>)</span><span> </span><span>)</span><br>
  <span>;(if hunger? (eat))</span><br>
  <br>
  <br>
  <span>    如果 饿了</span><span>?</span><span> 这个</span><span>symbol计算后的结果是</span><span> </span><span>true</span><span> </span><span>,那就执行第三个元素,</span><span> </span><span>(</span><span>吃饭</span><span>)</span><span> </span><span>.</span><br>
  <span>这里得注意一点</span><span>,newLISP</span><span> 里各位是可以完美使用中文的</span><span>,不管是函数还是symbol.你想把</span><br>
  <span>所有的代码写成中文的也行</span><span>,不过不利于和国外的同学交流.在这里还有个约定俗成的写法</span><br>
  <span>就是</span><span>,如果某个是判断true</span><span> </span><span>false</span><span> 的</span><span>,在定义这个函数的时候,就会在函数后面加个</span><span> </span><span>?</span><span> 号</span><span>.</span><br>
  <span>    下面就是个导弹发射的案例</span><span>.</span><br>
  <br>
  <br>
  <span>(</span><span>if</span><span> </span><span>x</span><span> </span><span>1</span><span>)</span><br>
  <span>; 如果 x 是 true 列表返回 1</span><br>
  <span>(</span><span>if</span><span> </span><span>1</span><span> </span><span>(</span><span>launch-missile</span><span>))</span><br>
  <span>; missiles 导弹 are launched 发射, 因为 1 是 true</span><br>
  <span>(</span><span>if</span><span> </span><span>0</span><span> </span><span>(</span><span>launch-missile</span><span>))</span><br>
  <span>; missiles 导弹 are launched 发射, 因为 0 也是 true</span><br>
  <span>(</span><span>if</span><span> </span><span>nil</span><span> </span><span>(</span><span>launch-missile</span><span>))</span><br>
  <span>;-&gt; nil, 这次无法发射了, 因为 nil 是 false</span><br>
  <span>(</span><span>if</span><span> </span><span>&#39;()</span><span> </span><span>(</span><span>launch-missile</span><span>))</span><br>
  <span>;-&gt; 还是无法发射 因为 () 也是false</span><br>
  <br>
  <br>
  <span>    我们可以使用任何的表达式作为判断条件</span><span>.</span><br>
  <br>
  <br>
  <span>(</span><span>if</span><span> </span><span>(</span><span>&gt;</span><span> </span><span>4</span><span> </span><span>3</span><span>)</span><span> </span><span>(</span><span>launch-missile</span><span>))</span><br>
  <span>;-&gt;  4 &gt; 3 计算的结果是true , 所以 导弹被发射了</span><br>
  <span>(</span><span>if</span><span> </span><span>(</span><span>&gt;</span><span> </span><span>4</span><span> </span><span>3</span><span>)</span><span> </span><span>(</span><span>println</span><span> </span><span>&quot;4 is bigger than 3&quot;</span><span>))</span><br>
  <span>&quot;4 is bigger than 3&quot;</span><br>
  <br>
  <br>
  <span>    这里大家也许会疑惑</span><span>,什么是</span><span> </span><span>true</span><span> 呢</span><span>.</span><br>
  <span>    </span><span>true</span><span> 就是除了 </span><span>nil</span><span> 和空列表 </span><span>()</span><span> 外的任何值</span><span>.</span><br>
  <span>    那什么是 </span><span>nil</span><span> 呢</span><span>.</span><br>
  <span>    就是那些不存在的或者未被赋值的</span><span>,或者被判断为错误的</span><span>(</span><span>比如</span><span>2</span><span> 小于 </span><span>1</span><span>)</span><span>.</span><br>
  <span>    可以用</span><span>nil?</span><span> 这个函数来判断</span><span>,某个元素是否是</span><span> </span><span>nil</span><span> </span><span>.</span><br>
  <span>    同样 </span><span>true?</span><span> 可以判断某个元素是否是 </span><span>true</span><span> </span><span>.</span><br>
  <span>    但是 </span><span>nl里头没有</span><span> </span><span>false这个关键字.</span><br>
  <br>
  <span>&gt;</span><span>(</span><span>true?</span><span> </span><span>-1</span><span>)</span><br>
  <span>true</span><br>
  <br>
  <span>&gt;</span><span>(</span><span>nil?</span><span> </span><span>(</span><span>&lt;</span><span> </span><span>3</span><span> </span><span>2</span><span>))</span><br>
  <span>true</span><br>
  <span>;因为3 小于2 是 错误的 所以 (&lt; 3 2 ) 返回了nil 所以nil? 判断 这个元素是nil</span><br>
  <span>;nil? 只是用来判断后面的元素是否是nil ,这里是,那当然要返回true了</span><br>
  <span>;你可以把true理解为真 除了true外 其他都不是true.好像很废话-!-</span><br>
  <br>
  <br>
  <span>(</span><span>if</span><span> </span><span>snark</span><span> </span><span>(</span><span>launch-missile</span><span>))</span><br>
  <span>;-&gt; nil ; 发射失败,因为 snark 这个symbol没有赋值</span><br>
  <span>(</span><span>if</span><span> </span><span>boojum</span><span> </span><span>(</span><span>launch-missile</span><span>))</span><br>
  <span>;-&gt; nil ; 同样失败 因为boojum也没有值</span><br>
  <span>(</span><span>if</span><span> </span><span>false</span><span> </span><span>(</span><span>launch-missile</span><span>))</span><br>
  <span>;-&gt; nil ; 一样 false 也没听说过</span><br>
  <br>
  <br>
  <br>
  <span>    有花不见叶，叶生不见花，生生世世，花叶两相错。</span><span>---</span><span> 彼岸花</span><br>
  <br>
  <br>
  <span>    现在我们给</span><span>if</span><span> 加上第三个表达式</span><span>.</span><br>
  <span>    在文章里你可以把表达式</span><span>,元素这些东西看成一个东西:数据.在他们要计算的时候,我</span><br>
  <span>会用表达式表示</span><span>,在他们不需要计算的时候我用元素表示.但是计算的目的是为了得到数据</span><br>
  <span>,所以表达式和元素之间是可以互相替换的.All</span><span> </span><span>Is</span><span> </span><span>Data.</span><br>
  <br>
  <span>(</span><span>if</span><span> </span><span>x</span><span> </span><span>1</span><span> </span><span>2</span><span>)</span><br>
  <span>; 如果 x 为 true, 返回 1, 否则返回 2</span><br>
<span><span>- </span><span>(</span><span>if</span><span> </span><span>1</span></span><br>
<span>  <span>(</span><span>launch-missile</span><span>)</span><br>
  <span>(</span><span>cancel-alert</span><span>))</span><br></span>
  <span>; 导弹发射成功</span><br>
<span><span>- </span><span>(</span><span>if</span><span> </span><span>nil</span></span><br>
<span>  <span>(</span><span>launch-missile</span><span>)</span><br>
  <span>(</span><span>cancel-alert</span><span>))</span><br></span>
  <span>; 导弹发射不成功 ,跳出终止警告.</span><br>
<span><span>- </span><span>(</span><span>if</span><span> </span><span>false</span></span><br>
<span>  <span>(</span><span>launch-missile</span><span>)</span><br>
  <span>(</span><span>cancel-alert</span><span>))</span><br></span>
  <span>; 导弹发射不成功 ,跳出终止警告.</span><br>
  <br>
  <br>
  <span>下面的是是在平常编码中经常用到一种形式</span><br>
  <br>
  <br>
<span><span>- </span><span>(</span><span>if</span><span> </span><span>(</span><span>and</span><span> </span><span>socket</span><span> </span><span>(</span><span>net-confirm-request</span><span>))</span><span> </span><span>;判断socket是否成功,request是否符合请求</span></span><br>
<span>  <span>(</span><span>net-flush</span><span>)</span><span> </span><span>; 如果2个条件都符合 执行 (net-flush)</span><br>
  <span>(</span><span>finish</span><span> </span><span>&quot;could not connect&quot;</span><span>))</span><span> </span><span>; 如果有一个条件不符合,发出错误提示</span><br></span>
  <br>
  <br>
  <span>    人生的每一条路都是自己选得</span><span>,不幸的是你必须选,幸运的是你有千万条路可以选.</span><br>
  <span>    </span><span>if</span><span> 同样可以有</span><span>N个判断-执行语句.</span><br>
  <span>    只要判断为真则执行后面的语句</span><span>,然后返回.</span><br>
  <br>
  <br>
<span><span>- </span><span>(</span><span>if</span></span><br>
<span>  <span>    </span><span>(</span><span>&lt;</span><span> </span><span>x</span><span> </span><span>0</span><span>)</span><span> </span><span>(</span><span>define</span><span> </span><span>a</span><span> </span><span>&quot;impossible&quot;</span><span>)</span><br>
  <span>    </span><span>(</span><span>&lt;</span><span> </span><span>x</span><span> </span><span>10</span><span>)</span><span> </span><span>(</span><span>define</span><span> </span><span>a</span><span> </span><span>&quot;small&quot;</span><span>)</span><br>
  <span>    </span><span>(</span><span>&lt;</span><span> </span><span>x</span><span> </span><span>20</span><span>)</span><span> </span><span>(</span><span>define</span><span> </span><span>a</span><span> </span><span>&quot;medium&quot;</span><span>)</span><br>
  <span>    </span><span>(</span><span>&gt;=</span><span> </span><span>x</span><span> </span><span>20</span><span>)</span><span> </span><span>(</span><span>define</span><span> </span><span>a</span><span> </span><span>&quot;large&quot;</span><span>)</span><br>
  <span>)</span><br></span>
  <br>
  <br>
  <span>    这和传统</span><span>LISP中的cond很像,但是少了括号.更加的灵活,这也是nl的一个特点,更随意</span><br>
  <span>,更方便.</span><br>
  <br>
  <span>    如果你在条件判断为</span><span>true</span><span> 后</span><span>,想执行多个语句怎么办?</span><br>
  <span>    一种方法是使用</span><span>when</span><br>
  <br>
  <br>
<span><span>- </span><span>(</span><span>when</span><span> </span><span>(</span><span>&gt;</span><span> </span><span>x</span><span> </span><span>0</span><span>)</span></span><br>
<span>  <span>    </span><span>(</span><span>define</span><span> </span><span>a</span><span> </span><span>&quot;positive&quot;</span><span>)</span><br>
  <span>    </span><span>(</span><span>define</span><span> </span><span>b</span><span> </span><span>&quot;not zero&quot;</span><span>)</span><br>
  <span>    </span><span>(</span><span>define</span><span> </span><span>c</span><span> </span><span>&quot;not negative&quot;</span><span>))</span><br></span>
  <br>
  <br>
  <span>    还有种方法就是使用代码块</span><span>Blocks.下面马上就会说.</span><br>
  <br>
  <br>
<span><span>- </span><span>(</span><span>if</span></span><br>
<span>  <span>    </span><span>(</span><span>&lt;</span><span> </span><span>x</span><span> </span><span>0</span><span>)</span><span> </span><span>(</span><span>begin</span><span> </span><span>(</span><span>define</span><span> </span><span>a</span><span> </span><span>&quot;impossible&quot;</span><span>)</span><span> </span><span>(</span><span>define</span><span> </span><span>b</span><span> </span><span>&quot;OMG&quot;</span><span>))</span><br>
  <span>    </span><span>(</span><span>&lt;</span><span> </span><span>x</span><span> </span><span>10</span><span>)</span><span> </span><span>(</span><span>define</span><span> </span><span>a</span><span> </span><span>&quot;small&quot;</span><span>)</span><br>
  <span>    </span><span>(</span><span>&lt;</span><span> </span><span>x</span><span> </span><span>20</span><span>)</span><span> </span><span>(</span><span>define</span><span> </span><span>a</span><span> </span><span>&quot;medium&quot;</span><span>)</span><br>
  <span>    </span><span>(</span><span>&gt;=</span><span> </span><span>x</span><span> </span><span>20</span><span>)</span><span> </span><span>(</span><span>define</span><span> </span><span>a</span><span> </span><span>&quot;large&quot;</span><span>)</span><br>
  <span>)</span><br></span>
  <span>;如果x 小于 0 就同时定义了  a 和 b 两个symbol.</span><br>
  <br>
  <br>
  <span>    之前我们说过</span><span>nl会把列表中的第一个元素作为函数.如果他的第一个元素是列表,那nl</span><br>
  <span>就会先计算这个列表</span><span>,然后把返回值作为函数应用到后面的元素中.</span><br>
  <br>
  <br>
  <span>(</span><span>define</span><span> </span><span>x</span><span> </span><span>1</span><span>)</span><br>
  <br>
  <span>((</span><span>if</span><span> </span><span>(</span><span>&lt;</span><span> </span><span>x</span><span> </span><span>5</span><span>)</span><span> </span><span>+</span><span> </span><span>*</span><span>)</span><span> </span><span>3</span><span> </span><span>4</span><span>)</span><span> </span><span>; 第一个列表用来抉择是用  + 还是 *?</span><br>
  <br>
  <span>7</span><span> </span><span>; 这里执行的是 +</span><br>
  <br>
  <br>
  <br>
  <span>    内嵌列表 </span><span>(</span><span>if</span><span> </span><span>(</span><span>&lt;</span><span> </span><span>x</span><span> </span><span>5</span><span>)</span><span> </span><span>+</span><span> </span><span>*</span><span>)</span><span>  通过 </span><span>(</span><span>&lt;</span><span> </span><span>x</span><span> </span><span>5</span><span>)</span><span> 的值来决定是返回</span><span>+</span><span> 还是 </span><span>*</span><span> </span><span>.这一切都</span><br>
  <span>得由 </span><span>x</span><span> 的值来决定</span><span>.</span><br>
  <br>
  <br>
  <span>(</span><span>define</span><span> </span><span>x</span><span> </span><span>10</span><span>)</span><br>
  <span>;-&gt; 10</span><br>
  <br>
  <span>((</span><span>if</span><span> </span><span>(</span><span>&lt;</span><span> </span><span>x</span><span> </span><span>5</span><span>)</span><span> </span><span>+</span><span> </span><span>*</span><span>)</span><span> </span><span>3</span><span> </span><span>4</span><span>)</span><br>
  <br>
  <span>12</span><span> </span><span>; 执行了 * 乘法操作</span><br>
  <br>
  <br>
  <span>    因为我们可以动态的决定使用什么函数</span><span>,所以在写出的代码就会灵活很多.</span><br>
  <br>
  <br>
  <span>(</span><span>if</span><span> </span><span>(</span><span>&lt;</span><span> </span><span>x</span><span> </span><span>5</span><span>)</span><span> </span><span>(</span><span>+</span><span> </span><span>3</span><span> </span><span>4</span><span>)</span><span> </span><span>(</span><span>*</span><span> </span><span>3</span><span> </span><span>4</span><span>))</span><br>
  <br>
  <br>
  <span>    可以写成这样</span><span>:</span><br>
  <br>
  <br>
  <span>((</span><span>if</span><span> </span><span>(</span><span>&lt;</span><span> </span><span>x</span><span> </span><span>5</span><span>)</span><span> </span><span>+</span><span> </span><span>*</span><span>)</span><span> </span><span>3</span><span> </span><span>4</span><span>)</span><br>
  <br>
  <br>
  <span>    整个过程类似下面</span><span>:</span><br>
  <br>
  <br>
  <span>;-&gt; ((if (&lt; x 5) + *) 3 4)</span><br>
  <span>;-&gt; ((if true + *) 3 4)</span><br>
  <span>;-&gt; (+ 3 4)</span><br>
  <span>;-&gt; 7</span><br>
  <br>
  <br>
  <span>    在</span><span>nl里,任何的表达式都是会返回值的.包括if</span><span> 表达式</span><span>.</span><br>
  <br>
  <br>
  <span>(</span><span>define</span><span> </span><span>x</span><span> </span><span>(</span><span>if</span><span> </span><span>flag</span><span> </span><span>1</span><span> </span><span>-1</span><span>))</span><span> </span><span>; x is 是 1 或者 -1</span><br>
  <span>;(set &#39;x (if flag 1 -1))  ;我在赋值symbol的时候一般用set,定义函数的时用define</span><br>
  <br>
<span><span>- </span><span>(</span><span>define</span><span> </span><span>result</span></span><br>
<span><span><span>- </span><span>    </span><span>(</span><span>if</span></span><br>
<span>  <span>        </span><span>(</span><span>&lt;</span><span> </span><span>x</span><span> </span><span>0</span><span>)</span><span>     </span><span>&quot;impossible&quot;</span><br>
  <span>        </span><span>(</span><span>&lt;</span><span> </span><span>x</span><span> </span><span>10</span><span>)</span><span>    </span><span>&quot;small&quot;</span><br>
  <span>        </span><span>(</span><span>&lt;</span><span> </span><span>x</span><span> </span><span>20</span><span>)</span><span>    </span><span>&quot;medium&quot;</span><br>
  <span>                    </span><span>&quot;large&quot;</span><span>))</span><br></span>
  <br>
  <span>    </span><span>result的值依赖于x的值.如果x大于等于20将会返回</span><span> </span><span>&quot;large&quot;</span><span>.如果没有</span><span> </span><span>&quot;large&quot;</span><span> 这</span><br>
  <span>个表达式</span><span>,而x又大于20呢?自己测试下吧~~~~</span><span> 想知道为什么可以查手册</span><span>.</span><br>
  <br>
  <br>
  <br>
  <br>
  <span>二</span><span>.</span><span> 循环</span><span>Looping</span><br>
  <br>
  <span>    当你需要重复劳动的时候</span><span>,就会用到循环,比如下面这些情况:</span><br>
  <br>
  <span>    操作列表中的每一个元素</span><br>
  <span>    </span><span>on</span><span> </span><span>every</span><span> </span><span>item</span><span> </span><span>in</span><span> </span><span>a</span><span> </span><span>list</span><br>
  <span>    操作字符串中的每一个元素</span><br>
  <span>    </span><span>on</span><span> </span><span>every</span><span> </span><span>item</span><span> </span><span>in</span><span> </span><span>a</span><span> </span><span>string</span><br>
  <span>    重复执行某个操作一定的次数</span><br>
  <span>    </span><span>a</span><span> </span><span>certain</span><span> </span><span>number</span><span> </span><span>of</span><span> </span><span>times</span><br>
  <span>    不断执行操作直到某个特定的情况发生才停止</span><br>
  <span>    </span><span>until</span><span> </span><span>something</span><span> </span><span>happens</span><br>
  <span>    当某个特定的条件为真时就一直执行操作</span><br>
  <span>    </span><span>while</span><span> </span><span>some</span><span> </span><span>condition</span><span> </span><span>prevails</span><br>
  <br>
  <br>
  <span>1:</span><span>  遍历列表</span><br>
  <span>    </span><span>Working</span><span> </span><span>through</span><span> </span><span>a</span><span> </span><span>list</span><br>
  <br>
  <span>    每一个</span><span>nl程序员都爱</span><span> </span><span>list</span><span> </span><span>,而dolist则可以让我们遍历操作每一个列表元素.</span><br>
  <br>
  <span>&gt;</span><span>(</span><span>sequence</span><span> </span><span>-5</span><span> </span><span>5</span><span>)</span><br>
  <span>(</span><span>-5</span><span> </span><span>-4</span><span> </span><span>-3</span><span> </span><span>-2</span><span> </span><span>-1</span><span> </span><span>0</span><span> </span><span>1</span><span> </span><span>2</span><span> </span><span>3</span><span> </span><span>4</span><span> </span><span>5</span><span>)</span><br>
  <span>;sequence 产生一个了一个从 -5 到 5 的列表</span><br>
  <br>
  <br>
  <span>    下面我们就用 </span><span>dolist</span><span> 来遍历这个列表</span><span>.</span><br>
  <br>
  <br>
  <span>(</span><span>define</span><span> </span><span>counter</span><span> </span><span>1</span><span>)</span><span> </span><span>;定义一个symbol,用来记录遍历到了第几个元素</span><br>
<span><span>- </span><span>(</span><span>dolist</span><span> </span><span>(</span><span>i</span><span> </span><span>(</span><span>sequence</span><span> </span><span>-5</span><span> </span><span>5</span><span>))</span></span><br>
<span>  <span>    </span><span>(</span><span>println</span><span> </span><span>&quot;Element &quot;</span><span> </span><span>counter</span><span> </span><span>&quot;: &quot;</span><span> </span><span>i</span><span>)</span><br>
  <span>    </span><span>(</span><span>inc</span><span> </span><span>counter</span><span>))</span><span> </span><span>; 遍历一个元素就加1</span><br></span>
  <br>
  <span>;输出结果</span><br>
  <span>Element</span><span> </span><span>1:</span><span> </span><span>-5</span><br>
  <span>Element</span><span> </span><span>2:</span><span> </span><span>-4</span><br>
  <span>Element</span><span> </span><span>3:</span><span> </span><span>-3</span><br>
  <span>Element</span><span> </span><span>4:</span><span> </span><span>-2</span><br>
  <span>Element</span><span> </span><span>5:</span><span> </span><span>-1</span><br>
  <span>Element</span><span> </span><span>6:</span><span> </span><span>0</span><br>
  <span>Element</span><span> </span><span>7:</span><span> </span><span>1</span><br>
  <span>Element</span><span> </span><span>8:</span><span> </span><span>2</span><br>
  <span>Element</span><span> </span><span>9:</span><span> </span><span>3</span><br>
  <span>Element</span><span> </span><span>10:</span><span> </span><span>4</span><br>
  <span>Element</span><span> </span><span>11:</span><span> </span><span>5</span><br>
  <span>12</span><br>
  <span>;在dolist最后一句执行的 (inc counter),作为dolist的返回值.</span><br>
  <br>
  <br>
  <span>    让我们看看 </span><span>dolist</span><span> 的语法</span><span>.</span><span>(</span><span>help</span><span>)</span><span>是个宏</span><span>,如果你下载了我的scite4newlisp,就会在</span><br>
  <span>init.lsp看到他的源码.当然在scite里输入dolist,然后按空格也会弹出提示语法.</span><br>
  <br>
  <br>
  <span>&gt;</span><span> </span><span>(</span><span>help</span><span> </span><span>dolist</span><span>)</span><br>
  <span>syntax:</span><span> </span><span>(</span><span>dolist</span><span> </span><span>(</span><span>&lt;sym&gt;</span><span>  </span><span>&lt;list&gt;</span><span> </span><span>[</span><span>&lt;exp-break&gt;</span><span>])</span><span> </span><span>&lt;body&gt;</span><span>)</span><br>
  <br>
  <br>
  <span>    </span><span>syntax中,只用</span><span> </span><span>&lt;&gt;</span><span> 括起来的是必选参数</span><span>,最外层用中括号</span><span> </span><span>[]</span><span> 括起来的</span><span>,是可选参数.</span><br>
  <span>上面的</span><span>&lt;sym&gt;</span><span> 就是一个必须提供的临时 </span><span>symbol.这个symbol的作用范围只在</span><span>(</span><span>dolist</span><span> </span><span>)</span><span>内</span><span>,</span><br>
  <span>出了</span><span>(</span><span>dolist</span><span> </span><span>)</span><span>没有任何作用</span><span>.&lt;list&gt;</span><span> 就是我们需要遍历的列表</span><span>.</span><span> </span><span>&lt;body&gt;</span><span> 就是我们要对列</span><br>
  <span>表元素进行的操作</span><span>.</span><span> </span><span>i</span><span> 作为一个临时变量</span><span>,每次遍历都加载不同的元素,</span><span> 我们每一次遍历</span><br>
  <span>的操作就是</span><span>,打印遍历次数和元素值.和</span><span> </span><span>if</span><span> 不同</span><span>,</span><span> </span><span>dolist</span><span> 可以执行很多条语句</span><span>,上面我们</span><br>
  <span>既打印又增加</span><span>counter的值.</span><br>
  <span>    上面我们用自己定义的 </span><span>counter</span><span> 存储系统的遍历次数</span><span>,其实nl内部已经提供了一个变</span><br>
  <span>$idx</span><span> 用来存储循环的次数</span><span>.</span><br>
  <br>
  <br>
<span><span>- </span><span>(</span><span>dolist</span><span> </span><span>(</span><span>i</span><span> </span><span>(</span><span>sequence</span><span> </span><span>-5</span><span> </span><span>5</span><span>))</span></span><br>
<span>  <span>    </span><span>(</span><span>println</span><span> </span><span>&quot;Element &quot;</span><span> </span><span>$idx</span><span> </span><span>&quot;: &quot;</span><span> </span><span>i</span><span>))</span><br></span>
  <br>
  <span>Element</span><span> </span><span>0:</span><span> </span><span>-5</span><br>
  <span>Element</span><span> </span><span>1:</span><span> </span><span>-4</span><br>
  <span>Element</span><span> </span><span>2:</span><span> </span><span>-3</span><br>
  <span>Element</span><span> </span><span>3:</span><span> </span><span>-2</span><br>
  <span>Element</span><span> </span><span>4:</span><span> </span><span>-1</span><br>
  <span>Element</span><span> </span><span>5:</span><span> </span><span>0</span><br>
  <span>Element</span><span> </span><span>6:</span><span> </span><span>1</span><br>
  <span>Element</span><span> </span><span>7:</span><span> </span><span>2</span><br>
  <span>Element</span><span> </span><span>8:</span><span> </span><span>3</span><br>
  <span>Element</span><span> </span><span>9:</span><span> </span><span>4</span><br>
  <span>Element</span><span> </span><span>10:</span><span> </span><span>5</span><br>
  <span>5</span><br>
  <span>;println 的最后一个参数作为返回值</span><br>
  <br>
  <br>
  <span>    还有了一个强力的函数 </span><span>map</span><span> </span><span>,也可以遍历操作整个列表.不过他会将每一个列表元素</span><br>
  <span>的操作结果</span><span>,组装成一个新的列表,并返回他.</span><br>
  <br>
  <br>
  <span>(</span><span>map</span><span> </span><span>(</span><span>fn</span><span> </span><span>(</span><span>x</span><span>)</span><span> </span><span>(</span><span>*</span><span> </span><span>x</span><span> </span><span>2</span><span>))</span><span> </span><span>(</span><span>sequence</span><span> </span><span>-5</span><span> </span><span>5</span><span>))</span><br>
  <span>;(map (lambda (x) (* x 2)) (sequence -5 5))</span><br>
  <span>(</span><span>-10</span><span> </span><span>-8</span><span> </span><span>-6</span><span> </span><span>-4</span><span> </span><span>-2</span><span> </span><span>0</span><span> </span><span>2</span><span> </span><span>4</span><span> </span><span>6</span><span> </span><span>8</span><span> </span><span>10</span><span>)</span><br>
  <br>
  <br>
  <span>    </span><span>fn是lambda的缩写,lambda用来创建匿名函数.map</span><span> 将第二个参数作为一个函数</span><span>,遍历</span><br>
  <span>后面的元素</span><span>.</span><span>(</span><span>fn</span><span> </span><span>(</span><span>x</span><span>)</span><span> </span><span>(</span><span>*</span><span> </span><span>x</span><span> </span><span>2</span><span>))</span><span>的作用就是将每一个列表值乘以</span><span>2.</span><span> </span><span>map</span><span> 将这些翻倍后的值</span><br>
  <span>再组装起来返回给我们</span><span>.</span><br>
  <br>
  <br>
  <span>(</span><span>define</span><span> </span><span>counter</span><span> </span><span>1</span><span>)</span><br>
  <span>;效果一样自己测试下输出吧</span><br>
<span><span>- </span><span>(</span><span>map</span><span> </span><span>(</span><span>fn</span><span> </span><span>(</span><span>i</span><span>)</span></span><br>
<span>  <span>    </span><span>(</span><span>println</span><span> </span><span>&quot;Element &quot;</span><span> </span><span>counter</span><span> </span><span>&quot;: &quot;</span><span> </span><span>i</span><span>)</span><br>
  <span>    </span><span>(</span><span>inc</span><span> </span><span>counter</span><span>))</span><br></span>
  <span>    </span><span>(</span><span>sequence</span><span> </span><span>-5</span><span> </span><span>5</span><span>))</span><br></span>
  <br>
  <br>
  <span>    再介绍个很实用的函数 </span><span>flat.他的作用就是把嵌套列表</span><span> </span><span>&quot;抚平&quot;</span><span> 成一个顶级列表</span><span>.</span><br>
  <br>
  <br>
  <span>&gt;</span><span> </span><span>(</span><span>flat</span><span> </span><span>&#39;((</span><span>1</span><span> </span><span>2</span><span> </span><span>3</span><span>)</span><span> </span><span>(</span><span>4</span><span> </span><span>5</span><span> </span><span>6</span><span>)))</span><br>
  <span>(</span><span>1</span><span> </span><span>2</span><span> </span><span>3</span><span> </span><span>4</span><span> </span><span>5</span><span> </span><span>6</span><span>)</span><br>
  <br>
  <br>
  <span>    这样你就不用专门写个遍历函数遍历每一个嵌套列表了</span><span>.记住他的效率比传统的递归</span><br>
  <span>手工</span><span>car,cdr递归和尾递归,快很多.速度是简洁是newLISP的两大特色.所以不用担心内部</span><br>
  <span>函数的效率</span><span>.</span><br>
  <br>
  <span>2:</span><span>  遍历字符串</span><br>
  <span>    </span><span>Working</span><span> </span><span>through</span><span> </span><span>a</span><span> </span><span>string</span><br>
  <br>
  <span>    可以说在某些时候字符串用的比</span><span>list还多,比如console里输出的全是字符串.在你刚</span><br>
  <span>开始起步的时候</span><span>,大部分时间都在接触字符串.当然nl提供了非常多的字符操作函数,这些</span><br>
  <span>函数同时也能操作</span><span>list.</span><br>
  <br>
  <br>
  <span>(</span><span>define</span><span> </span><span>alphabet</span><span> </span><span>&quot;abcdefghijklmnopqrstuvwxyz&quot;</span><span>)</span><br>
<span><span>- </span><span>(</span><span>dostring</span><span> </span><span>(</span><span>letter</span><span> </span><span>alphabet</span><span>)</span></span><br>
<span>  <span>    </span><span>(</span><span>print</span><span> </span><span>letter</span><span> </span><span>{</span><span> </span><span>}))</span><br></span>
  <br>
  <span>;遍历字符串,输出每个英文字母的ascii码.</span><br>
  <span>;{ } 相当于&quot; &quot; ,他们都是字符串的标志.</span><br>
  <br>
  <span>97</span><span> </span><span>98</span><span> </span><span>99</span><span> </span><span>100</span><span> </span><span>101</span><span> </span><span>102</span><span> </span><span>103</span><span> </span><span>104</span><span> </span><span>105</span><span> </span><span>106</span><span> </span><span>107</span><span> </span><span>108</span><span> </span><span>109</span><span> </span><span>110</span><span> </span><span>111</span><span> </span><span>112</span><span> </span><span>113</span><span> </span><span>114</span><span> </span><span>115</span><span> </span><span>116</span><br>
  <span>117</span><span> </span><span>118</span><span> </span><span>119</span><span> </span><span>120</span><span> </span><span>121</span><span> </span><span>122</span><br>
  <br>
  <br>
  <br>
  <br>
  <span>3:</span><span>  完成特定次数的操作</span><br>
  <span>    </span><span>A</span><span> </span><span>certain</span><span> </span><span>number</span><span> </span><span>of</span><span> </span><span>times</span><br>
  <br>
  <span>    如果你想重复执行某个操作指定次数</span><span>,可以使用</span><span> </span><span>dotimes</span><span> 或者 </span><span>for</span><span> </span><span>.</span><br>
  <br>
  <br>
  <span>&gt;</span><span>(</span><span>help</span><span> </span><span>dotimes</span><span>)</span><br>
  <span>(</span><span>dotimes</span><span> </span><span>(</span><span>&lt;sym-var&gt;</span><span> </span><span>&lt;int-count&gt;</span><span> </span><span>[</span><span>&lt;exp-break&gt;</span><span>])</span><span> </span><span>&lt;body&gt;</span><span>)</span><br>
  <br>
  <br>
  <span>    和 </span><span>dolist</span><span> 一样需要提供一个临时变量</span><span>&lt;sym-var&gt;,还有就是执行的次数&lt;int-count&gt;</span><br>
  <span>.&lt;body&gt;是需要执行的语句,可以多条.</span><br>
  <br>
  <br>
<span><span>- </span><span>(</span><span>dotimes</span><span> </span><span>(</span><span>c</span><span> </span><span>10</span><span>)</span></span><br>
<span>  <span>    </span><span>(</span><span>println</span><span> </span><span>c</span><span> </span><span>&quot; times 3 is &quot;</span><span> </span><span>(</span><span>*</span><span> </span><span>c</span><span> </span><span>3</span><span>)))</span><br></span>
  <br>
  <span>0</span><span> </span><span>times</span><span> </span><span>3</span><span> </span><span>is</span><span> </span><span>0</span><br>
  <span>1</span><span> </span><span>times</span><span> </span><span>3</span><span> </span><span>is</span><span> </span><span>3</span><br>
  <span>2</span><span> </span><span>times</span><span> </span><span>3</span><span> </span><span>is</span><span> </span><span>6</span><br>
  <span>3</span><span> </span><span>times</span><span> </span><span>3</span><span> </span><span>is</span><span> </span><span>9</span><br>
  <span>4</span><span> </span><span>times</span><span> </span><span>3</span><span> </span><span>is</span><span> </span><span>12</span><br>
  <span>5</span><span> </span><span>times</span><span> </span><span>3</span><span> </span><span>is</span><span> </span><span>15</span><br>
  <span>6</span><span> </span><span>times</span><span> </span><span>3</span><span> </span><span>is</span><span> </span><span>18</span><br>
  <span>7</span><span> </span><span>times</span><span> </span><span>3</span><span> </span><span>is</span><span> </span><span>21</span><br>
  <span>8</span><span> </span><span>times</span><span> </span><span>3</span><span> </span><span>is</span><span> </span><span>24</span><br>
  <span>9</span><span> </span><span>times</span><span> </span><span>3</span><span> </span><span>is</span><span> </span><span>27</span><br>
  <br>
  <br>
  <span>    </span><span>c作为计数值从0-9,这是nl里习惯.没学过编程的人可能不太习惯.那不妨这个看成你</span><br>
  <span>的生日</span><span>.如果一个人是1987年6月1日出生的.有人会在出生这天过1岁生日吗,肯定是要到</span><br>
  <span>1988年6月1日再过是吧.那1987年这年只能叫0岁.当然这只是个比喻,方便你记忆.</span><br>
  <span>    还有</span><span>[</span><span>&lt;exp-break&gt;</span><span>]</span><span>我们没用到</span><span>,很多循环函数里都有这个可选参数,这个参数的作用</span><br>
  <span>就是</span><span>,如果特定条件达成,循环则提前结束.比如:</span><br>
  <br>
  <br>
<span><span>- </span><span>(</span><span>dotimes</span><span> </span><span>(</span><span>c</span><span> </span><span>10</span><span> </span><span>(</span><span>=</span><span> </span><span>c</span><span> </span><span>4</span><span>))</span></span><br>
<span>  <span>    </span><span>(</span><span>println</span><span> </span><span>c</span><span> </span><span>&quot; times 3 is &quot;</span><span> </span><span>(</span><span>*</span><span> </span><span>c</span><span> </span><span>3</span><span>)))</span><br></span>
  <br>
  <span>0</span><span> </span><span>times</span><span> </span><span>3</span><span> </span><span>is</span><span> </span><span>0</span><br>
  <span>1</span><span> </span><span>times</span><span> </span><span>3</span><span> </span><span>is</span><span> </span><span>3</span><br>
  <span>2</span><span> </span><span>times</span><span> </span><span>3</span><span> </span><span>is</span><span> </span><span>6</span><br>
  <span>3</span><span> </span><span>times</span><span> </span><span>3</span><span> </span><span>is</span><span> </span><span>9</span><br>
  <span>true</span><br>
  <br>
  <br>
  <span>    计数器到了</span><span>4</span><span> 就退出不再继续执行下去</span><span>.</span><br>
  <span>    </span><span>dotimes</span><span> 很方便</span><span>,但是</span><span> </span><span>for</span><span> 更强大</span><span>.因为</span><span> </span><span>for</span><span> 可以更细微的控制</span><span>,开始值,结束值,和</span><br>
  <span>递进值</span><span>.</span><br>
  <br>
  <br>
<span><span>- </span><span>(</span><span>for</span><span> </span><span>(</span><span>c</span><span> </span><span>1</span><span> </span><span>-1</span><span> </span><span>.5</span><span>)</span></span><br>
<span>  <span>    </span><span>(</span><span>println</span><span> </span><span>c</span><span>))</span><br></span>
  <span>1</span><br>
  <span>0.5</span><br>
  <span>0</span><br>
  <span>-0.5</span><br>
  <span>-1</span><br>
  <span>;</span></span>