---
layout: post
title:  "一致性哈希算法"
date:   2012-08-22 10:30:56
author: snoopyxdy
categories: program
---

## 一致性哈希算法
### by snoopyxdy
### at 2012-08-22 10:30:56
### original <http://snoopyxdy.blog.163.com/blog/static/601174402012722102446720>

<div><div><b><br></b></div><b>转载至： <a rel="nofollow" href="http://blog.csdn.net/sparkliang/article/details/5279393">http://blog.csdn.net/sparkliang/article/details/5279393</a> </b><div><b><br></b></div><div><span lang="EN-US" style="color:rgb(51,51,51);font-family:Arial;line-height:26px;text-indent:28px">consistent hashing</span><span style="color:rgb(51,51,51);font-family:Arial;line-height:26px;text-indent:28px"> </span><span style="color:rgb(51,51,51);line-height:26px;text-indent:28px;font-family:宋体">算法早在</span><span style="color:rgb(51,51,51);font-family:Arial;line-height:26px;text-indent:28px"> </span><span lang="EN-US" style="color:rgb(51,51,51);font-family:Arial;line-height:26px;text-indent:28px">1997</span><span style="color:rgb(51,51,51);font-family:Arial;line-height:26px;text-indent:28px"> </span><span style="color:rgb(51,51,51);line-height:26px;text-indent:28px;font-family:宋体">年就在论文</span><span style="color:rgb(51,51,51);font-family:Arial;line-height:26px;text-indent:28px"> </span><strong style="color:rgb(51,51,51);font-family:Arial;line-height:26px;text-indent:28px"><span lang="EN-US"><a style="color:rgb(51,102,153);text-decoration:none" rel="nofollow" href="http://portal.acm.org/citation.cfm?id=258660">Consistent hashing and random trees</a> </span></strong><span style="color:rgb(51,51,51);font-family:Arial;line-height:26px;text-indent:28px"></span><span style="color:rgb(51,51,51);line-height:26px;text-indent:28px;font-family:宋体">中被提出，目前在</span><span style="color:rgb(51,51,51);font-family:Arial;line-height:26px;text-indent:28px"> </span><span lang="EN-US" style="color:rgb(51,51,51);font-family:Arial;line-height:26px;text-indent:28px">cache</span><span style="color:rgb(51,51,51);font-family:Arial;line-height:26px;text-indent:28px"> </span><span style="color:rgb(51,51,51);line-height:26px;text-indent:28px;font-family:宋体">系统中应用越来越广泛；</span></div><div><span style="color:rgb(51,51,51);line-height:26px;text-indent:28px;font-family:宋体"><br></span></div><div><h2 style="margin:0px;padding:0px;color:rgb(51,51,51);font-family:Arial;line-height:26px"><span lang="EN-US">1</span> 基本场景</h2><p style="color:rgb(51,51,51);font-family:Arial;line-height:26px;text-indent:21pt"><span style="font-family:宋体">比如你有</span> <span lang="EN-US">N</span> <span style="font-family:宋体">个</span> <span lang="EN-US">cache</span> <span style="font-family:宋体">服务器（后面简称</span> <span lang="EN-US">cache</span> <span style="font-family:宋体">），那么如何将一个对象</span> <span lang="EN-US">object</span> <span style="font-family:宋体">映射到</span> <span lang="EN-US">N</span> <span style="font-family:宋体">个</span> <span lang="EN-US">cache</span> <span style="font-family:宋体">上呢，你很可能会采用类似下面的通用方法计算</span> <span lang="EN-US">object</span> <span style="font-family:宋体">的</span> <span lang="EN-US">hash</span> <span style="font-family:宋体">值，然后均匀的映射到到</span> <span lang="EN-US">N</span> <span style="font-family:宋体">个</span> <span lang="EN-US">cache</span> <span style="font-family:宋体">；</span></p><p style="color:rgb(51,51,51);font-family:Arial;line-height:26px"><span lang="EN-US">hash(object)%N</span></p><p style="color:rgb(51,51,51);font-family:Arial;line-height:26px"><span style="font-family:宋体">一切都运行正常，再考虑如下的两种情况；</span></p><p style="color:rgb(51,51,51);font-family:Arial;line-height:26px"><span lang="EN-US">1 </span><span style="font-family:宋体">一个</span> <span lang="EN-US">cache</span> <span style="font-family:宋体">服务器</span> <span lang="EN-US">m down</span> <span style="font-family:宋体">掉了（在实际应用中必须要考虑这种情况），这样所有映射到</span> <span lang="EN-US">cache m</span> <span style="font-family:宋体">的对象都会失效，怎么办，需要把</span> <span lang="EN-US">cache m</span> <span style="font-family:宋体">从</span> <span lang="EN-US">cache</span> <span style="font-family:宋体">中移除，这时候</span> <span lang="EN-US">cache</span> <span style="font-family:宋体">是</span> <span lang="EN-US">N-1</span> <span style="font-family:宋体">台，映射公式变成了</span> <span lang="EN-US">hash(object)%(N-1)</span> <span style="font-family:宋体">；</span></p><p style="color:rgb(51,51,51);font-family:Arial;line-height:26px"><span lang="EN-US">2 </span><span style="font-family:宋体">由于访问加重，需要添加</span> <span lang="EN-US">cache</span> <span style="font-family:宋体">，这时候</span> <span lang="EN-US">cache</span> <span style="font-family:宋体">是</span> <span lang="EN-US">N+1</span> <span style="font-family:宋体">台，映射公式变成了</span> <span lang="EN-US">hash(object)%(N+1)</span> <span style="font-family:宋体">；</span></p><p style="color:rgb(51,51,51);font-family:Arial;line-height:26px;text-indent:21pt"><span lang="EN-US">1</span> <span style="font-family:宋体">和</span> <span lang="EN-US">2</span> <span style="font-family:宋体">意味着什么？这意味着突然之间几乎所有的</span> <span lang="EN-US">cache</span> <span style="font-family:宋体">都失效了。对于服务器而言，这是一场灾难，洪水般的访问都会直接冲向后台服务器；</span></p><p style="font-family:Arial;line-height:26px;text-indent:21pt"><span>再来考虑第三个问题，由于硬件能力越来越强，你可能想让后面添加的节点多做点活，显然上面的</span> <span lang="EN-US">hash</span> <span>算法也做不到。</span></p><p style="color:rgb(51,51,51);font-family:Arial;line-height:26px"><span lang="EN-US"> </span> <span style="font-family:宋体">有什么方法可以改变这个状况呢，这就是</span> <span lang="EN-US">consistent hashing...</span></p><h2 style="margin:0px;padding:0px;color:rgb(51,51,51);font-family:Arial;line-height:26px"><span lang="EN-US">2 hash</span> 算法和单调性</h2><p style="color:rgb(51,51,51);font-family:Arial;line-height:26px"><span style="font-family:宋体">　　</span> <span lang="EN-US">Hash</span> <span style="font-family:宋体">算法的一个衡量指标是单调性（</span> <span lang="EN-US">Monotonicity</span> <span style="font-family:宋体">），定义如下：</span></p><p style="font-family:Arial;line-height:26px"><span style="font-family:宋体">　　单调性是指如果已经有一些内容通过哈希分派到了相应的缓冲中，又有新的缓冲加入到系统中。哈希的结果应能够保证原有已分配的内容可以被映射到新的缓冲中去，而不会被映射到旧的缓冲集合中的其他缓冲区。</span><span lang="EN-US"></span></p><p style="color:rgb(51,51,51);font-family:Arial;line-height:26px;text-indent:21pt"><span style="font-family:宋体">容易看到，上面的简单</span> <span lang="EN-US">hash</span> <span style="font-family:宋体">算法</span> <span lang="EN-US">hash(object)%N</span> <span style="font-family:宋体">难以满足单调性要求。</span></p><h2 style="margin:0px;padding:0px;color:rgb(51,51,51);font-family:Arial;line-height:26px"><span lang="EN-US">3 consistent hashing</span> 算法的原理</h2><p style="color:rgb(51,51,51);font-family:Arial;line-height:26px;text-indent:21pt"><span lang="EN-US">consistent hashing</span> <span style="font-family:宋体">是一种</span> <span lang="EN-US">hash</span> <span style="font-family:宋体">算法，简单的说，在移除</span> <span lang="EN-US">/</span> <span style="font-family:宋体">添加一个</span> <span lang="EN-US">cache</span> <span style="font-family:宋体">时，它能够尽可能小的改变已存在</span> <span lang="EN-US">key</span> <span style="font-family:宋体">映射关系，尽可能的满足单调性的要求。</span></p><p style="color:rgb(51,51,51);font-family:Arial;line-height:26px"><span style="font-family:宋体">下面就来按照</span> <span lang="EN-US">5</span> <span style="font-family:宋体">个步骤简单讲讲</span> <span lang="EN-US">consistent hashing</span> <span style="font-family:宋体">算法的基本原理。</span></p><h3 style="margin:0px;padding:0px;color:rgb(51,51,51);font-family:Arial;line-height:26px"><span lang="EN-US">3.1</span> 环形<span lang="EN-US">hash</span> 空间</h3><p style="text-indent:21pt"><span style="color:rgb(51,51,51);font-family:宋体;line-height:26px">考虑通常的</span><font color="#333333" face="Arial"><span style="line-height:26px"> </span></font><span lang="EN-US" style="color:rgb(51,51,51);font-family:Arial;line-height:26px">hash</span><font color="#333333" face="Arial"><span style="line-height:26px"> </span></font><span style="color:rgb(51,51,51);font-family:宋体;line-height:26px">算法都是将</span><font color="#333333" face="Arial"><span style="line-height:26px"> </span></font><span lang="EN-US" style="color:rgb(51,51,51);font-family:Arial;line-height:26px">value</span><font color="#333333" face="Arial"><span style="line-height:26px"> </span></font><span style="color:rgb(51,51,51);font-family:宋体;line-height:26px">映射到一个</span><font color="#333333" face="Arial"><span style="line-height:26px"> </span></font><span lang="EN-US" style="color:rgb(51,51,51);font-family:Arial;line-height:26px">32</span><font color="#333333" face="Arial"><span style="line-height:26px"> </span></font><span style="color:rgb(51,51,51);font-family:宋体;line-height:26px">为的</span><font color="#333333" face="Arial"><span style="line-height:26px"> </span></font><span lang="EN-US" style="color:rgb(51,51,51);font-family:Arial;line-height:26px">key</span><font color="#333333" face="Arial"><span style="line-height:26px"> </span></font><span style="color:rgb(51,51,51);font-family:宋体;line-height:26px">值，也即是</span><font color="#333333" face="Arial"><span> </span></font><span lang="EN-US" style="color:rgb(51,51,51);font-family:Arial;line-height:26px">0~2^32-1</span><font color="#333333" face="Arial"><span style="line-height:26px"> </span></font><span style="color:rgb(51,51,51);font-family:宋体;line-height:26px">次方的数值空间；我们可以将这个空间想象成一个首（</span><font color="#333333" face="Arial"><span style="line-height:26px"> </span></font><span lang="EN-US" style="color:rgb(51,51,51);font-family:Arial;line-height:26px">0</span><font color="#333333" face="Arial"><span style="line-height:26px"> </span></font><span style="color:rgb(51,51,51);font-family:宋体;line-height:26px">）尾（</span><font color="#333333" face="Arial"><span style="line-height:26px"> </span></font><span lang="EN-US" style="color:rgb(51,51,51);font-family:Arial;line-height:26px">2^32-1</span><font color="#333333" face="Arial"><span style="line-height:26px"> </span></font><span style="color:rgb(51,51,51);font-family:宋体;line-height:26px">）相接的圆环，如下面图</span><font color="#333333" face="Arial"><span style="line-height:26px"> </span></font><span lang="EN-US" style="color:rgb(51,51,51);font-family:Arial;line-height:26px">1</span><font color="#333333" face="Arial"><span style="line-height:26px"> </span></font><span style="color:rgb(51,51,51);font-family:宋体;line-height:26px">所示的那样。<br><br></span></p><div style="color:rgb(51,51,51);font-family:Arial;line-height:26px;text-align:center"><img title="一致性哈希算法 - snoopyxdy - snoopyxdy的博客" alt="一致性哈希算法 - snoopyxdy - snoopyxdy的博客" style="margin:0 10px 0 0" src="http://img7.ph.126.net/m6Q1JdtMvWQDviEoUt5kxg==/3105513418066350237.jpg"></div><div style="color:rgb(51,51,51);font-family:Arial;line-height:26px;text-align:center"><span style="line-height:26px;text-indent:21pt"> </span><span style="line-height:26px;text-indent:21pt"> </span></div><div style="color:rgb(51,51,51);font-family:Arial;line-height:26px;text-align:center"><span style="line-height:26px;text-align:center;text-indent:0px;font-family:宋体">图</span><span style="line-height:26px;text-align:center;text-indent:0px"> </span><span lang="EN-US" style="line-height:26px;text-align:center;text-indent:0px">1</span><span style="line-height:26px;text-align:center;text-indent:0px"> </span><span style="line-height:26px;text-align:center;text-indent:0px;font-family:宋体">环形</span><span style="line-height:26px;text-align:center;text-indent:0px"> </span><span lang="EN-US" style="line-height:26px;text-align:center;text-indent:0px">hash</span><span style="line-height:26px;text-align:center;text-indent:0px"> </span><span style="line-height:26px;text-align:center;text-indent:0px;font-family:宋体">空间</span><span style="line-height:26px;text-indent:21pt"> </span></div><h3 style="color:rgb(51,51,51);font-family:Arial;line-height:26px;margin:0px;padding:0px;text-indent:0px"><span lang="EN-US">3.2 </span>把对象映射到<span lang="EN-US">hash</span> 空间</h3><p style="color:rgb(51,51,51);font-family:Arial;line-height:26px;text-indent:21pt"><span style="font-family:宋体">接下来考虑</span> <span lang="EN-US">4</span> <span style="font-family:宋体">个对象</span> <span lang="EN-US">object1~object4</span> <span style="font-family:宋体">，通过</span> <span lang="EN-US">hash</span> <span style="font-family:宋体">函数计算出的</span> <span lang="EN-US">hash</span> <span style="font-family:宋体">值</span> <span lang="EN-US">key</span> <span style="font-family:宋体">在环上的分布如图</span> <span lang="EN-US">2</span> <span style="font-family:宋体">所示。</span></p><p style="color:rgb(51,51,51);font-family:Arial;line-height:26px;text-indent:0px"><span lang="EN-US">hash(object1) = key1;</span></p><p style="color:rgb(51,51,51);font-family:Arial;line-height:26px;text-indent:0px"><span lang="EN-US">… …</span></p><p style="color:rgb(51,51,51);font-family:Arial;line-height:26px;text-indent:0px"><span lang="EN-US">hash(object4) = key4;</span></p><p style="color:rgb(51,51,51);font-family:Arial;line-height:26px;text-indent:0px"><span lang="EN-US"><br></span></p><p style="color:rgb(51,51,51);font-family:Arial;line-height:26px;text-indent:0px"><span lang="EN-US"></span></p><div style="text-align:center"><img title="一致性哈希算法 - snoopyxdy - snoopyxdy的博客" alt="一致性哈希算法 - snoopyxdy - snoopyxdy的博客" style="margin:0 10px 0 0" src="http://img8.ph.126.net/4BX_B_wbThuvZSwt7fNpmw==/2536089540180873308.jpg"></div><div style="text-align:center"><span lang="EN-US"><br></span></div><div style="text-align:center"><span lang="EN-US"> </span><span style="line-height:26px;text-align:center;font-family:宋体">图</span><span style="line-height:26px;text-align:center"> </span><span lang="EN-US" style="line-height:26px;text-align:center">2 4</span><span style="line-height:26px;text-align:center"> </span><span style="line-height:26px;text-align:center;font-family:宋体">个对象的</span><span style="line-height:26px;text-align:center"> </span><span lang="EN-US" style="line-height:26px;text-align:center">key</span><span style="line-height:26px;text-align:center"> </span><span style="line-height:26px;text-align:center;font-family:宋体">值分布</span></div><span style="line-height:26px;text-indent:21pt"></span><p></p><div style="text-align:center"><font color="#333333" face="宋体"><br></font></div><p></p><p style="color:rgb(51,51,51);font-family:Arial;line-height:26px;text-indent:21pt"></p><h3 style="margin:0px;padding:0px;line-height:26px;text-indent:0px"><span lang="EN-US">3.3 </span>把<span lang="EN-US">cache</span> 映射到<span lang="EN-US">hash</span> 空间</h3><p style="line-height:26px;text-indent:21pt"><span lang="EN-US">Consistent hashing</span> <span style="font-family:宋体">的基本思想就是将对象和</span> <span lang="EN-US">cache</span> <span style="font-family:宋体">都映射到同一个</span> <span lang="EN-US">hash</span> <span style="font-family:宋体">数值空间中，并且使用相同的</span><span lang="EN-US">hash</span> <span style="font-family:宋体">算法。</span></p><p style="line-height:26px;text-indent:21pt"><span style="font-family:宋体">假设当前有</span> <span lang="EN-US">A,B</span> <span style="font-family:宋体">和</span> <span lang="EN-US">C</span> <span style="font-family:宋体">共</span> <span lang="EN-US">3</span> <span style="font-family:宋体">台</span> <span lang="EN-US">cache</span> <span style="font-family:宋体">，那么其映射结果将如图</span> <span lang="EN-US">3</span> <span style="font-family:宋体">所示，他们在</span> <span lang="EN-US">hash</span> <span style="font-family:宋体">空间中，以对应的</span> <span lang="EN-US">hash</span><span style="font-family:宋体">值排列。</span></p><p style="line-height:26px;text-indent:0px"><span lang="EN-US">hash(cache A) = key A;</span></p><p style="line-height:26px;text-indent:0px"><span lang="EN-US">… …</span></p><p style="line-height:26px;text-indent:0px"><span lang="EN-US">hash(cache C) = key C;</span></p><p style="line-height:26px;text-indent:0px"><span lang="EN-US"><br></span></p><p style="line-height:26px;text-indent:0px"><span lang="EN-US"></span></p><div style="text-align:center"><img title="一致性哈希算法 - snoopyxdy - snoopyxdy的博客" alt="一致性哈希算法 - snoopyxdy - snoopyxdy的博客" style="margin:0 10px 0 0" src="http://img0.ph.126.net/ZfRdAbVzk5fqHqHxqutp4w==/2687804552627838200.jpg"></div><div style="text-align:center"><span lang="EN-US"><br></span></div><div style="text-align:center"><span lang="EN-US"> </span><span style="line-height:26px;text-align:center;font-family:宋体">图</span><span style="line-height:26px;text-align:center"> </span><span lang="EN-US" style="line-height:26px;text-align:center">3 cache</span><span style="line-height:26px;text-align:center"> </span><span style="line-height:26px;text-align:center;font-family:宋体">和对象的</span><span> </span><span lang="EN-US" style="line-height:26px;text-align:center">key</span><span style="line-height:26px;text-align:center"> </span><span style="line-height:26px;text-align:center;font-family:宋体">值分布</span></div><p></p><p style="text-align:left;line-height:26px;text-indent:0px"><span lang="EN-US"></span></p><p style="line-height:26px;text-indent:21pt"><span style="font-family:宋体"><br></span></p><p style="line-height:26px;text-indent:21pt"><span style="font-family:宋体">说到这里，顺便提一下</span> <span lang="EN-US">cache</span> <span style="font-family:宋体">的</span> <span lang="EN-US">hash</span> <span style="font-family:宋体">计算，一般的方法可以使用</span> <span lang="EN-US">cache</span> <span style="font-family:宋体">机器的</span> <span lang="EN-US">IP</span> <span style="font-family:宋体">地址或者机器名作为</span><span lang="EN-US">hash</span> <span style="font-family:宋体">输入。</span></p><h3 style="margin:0px;padding:0px;line-height:26px"><span lang="EN-US">3.4 </span>把对象映射到<span lang="EN-US">cache</span></h3><p style="line-height:26px;text-indent:21pt"><span style="font-family:宋体">现在</span> <span lang="EN-US">cache</span> <span style="font-family:宋体">和对象都已经通过同一个</span> <span lang="EN-US">hash</span> <span style="font-family:宋体">算法映射到</span> <span lang="EN-US">hash</span> <span style="font-family:宋体">数值空间中了，接下来要考虑的就是如何将对象映射到</span> <span lang="EN-US">cache</span> <span style="font-family:宋体">上面了。</span></p><p style="line-height:26px;text-indent:21pt"><span style="font-family:宋体">在这个环形空间中，如果沿着顺时针方向从对象的</span> <span lang="EN-US">key</span> <span style="font-family:宋体">值出发，直到遇见一个</span> <span lang="EN-US">cache</span> <span style="font-family:宋体">，那么就将该对象存储在这个</span> <span lang="EN-US">cache</span> <span style="font-family:宋体">上，因为对象和</span> <span lang="EN-US">cache</span> <span style="font-family:宋体">的</span> <span lang="EN-US">hash</span> <span style="font-family:宋体">值是固定的，因此这个</span> <span lang="EN-US">cache</span> <span style="font-family:宋体">必然是唯一和确定的。这样不就找到了对象和</span> <span lang="EN-US">cache</span> <span style="font-family:宋体">的映射方法了吗？！</span></p><p style="line-height:26px;text-indent:21pt"><span style="font-family:宋体">依然继续上面的例子（参见图</span> <span lang="EN-US">3</span> <span style="font-family:宋体">），那么根据上面的方法，对象</span> <span lang="EN-US">object1</span> <span style="font-family:宋体">将被存储到</span> <span lang="EN-US">cache A</span> <span style="font-family:宋体">上；</span> <span lang="EN-US">object2</span><span style="font-family:宋体">和</span> <span lang="EN-US">object3</span> <span style="font-family:宋体">对应到</span> <span lang="EN-US">cache C</span> <span style="font-family:宋体">；</span> <span lang="EN-US">object4</span> <span style="font-family:宋体">对应到</span> <span lang="EN-US">cache B</span> <span style="font-family:宋体">；</span></p><h3 style="margin:0px;padding:0px;line-height:26px"><span lang="EN-US">3.5 </span>考察<span lang="EN-US">cache</span> 的变动</h3><p style="line-height:26px;text-indent:21pt"><span style="font-family:宋体">前面讲过，通过</span> <span lang="EN-US">hash</span> <span style="font-family:宋体">然后求余的方法带来的最大问题就在于不能满足单调性，当</span> <span lang="EN-US">cache</span> <span style="font-family:宋体">有所变动时，</span><span lang="EN-US">cache</span> <span style="font-family:宋体">会失效，进而对后台服务器造成巨大的冲击，现在就来分析分析</span> <span lang="EN-US">consistent hashing</span> <span style="font-family:宋体">算法。</span></p><p style="line-height:26px;text-indent:21pt"><strong><span lang="EN-US">3.5.1 </span></strong><strong><span style="font-family:宋体">移除</span> <span lang="EN-US">cache</span></strong></p><p style="line-height:26px;text-indent:21pt"><span style="font-family:宋体">考虑假设</span> <span lang="EN-US">cache B</span> <span style="font-family:宋体">挂掉了，根据上面讲到的映射方法，这时受影响的将仅是那些沿</span> <span lang="EN-US">cache B</span> <span style="font-family:宋体">逆时针遍历直到下一个</span> <span lang="EN-US">cache</span> <span style="font-family:宋体">（</span> <span lang="EN-US">cache C</span> <span style="font-family:宋体">）之间的对象，也即是本来映射到</span> <span lang="EN-US">cache B</span> <span style="font-family:宋体">上的那些对象。</span></p><p style="line-height:26px"><span style="font-family:宋体">因此这里仅需要变动对象</span> <span lang="EN-US">object4</span> <span style="font-family:宋体">，将其重新映射到</span> <span lang="EN-US">cache C</span> <span style="font-family:宋体">上即可；参见图</span> <span lang="EN-US">4</span> <span style="font-family:宋体">。</span></p><p></p><p style="line-height:26px;text-indent:0px"><span lang="EN-US"><br></span></p><p style="line-height:26px;text-indent:0px"><span lang="EN-US"></span></p><div style="text-align:center"><img title="一致性哈希算法 - snoopyxdy - snoopyxdy的博客" alt="一致性哈希算法 - snoopyxdy - snoopyxdy的博客" style="margin:0 10px 0 0" src="http://img2.ph.126.net/q12_YjxdpbtwJHDSyk8Xrg==/2696248801929063522.jpg"></div><div style="text-align:center"><span lang="EN-US"> </span></div><div style="text-align:center"><span style="line-height:26px;text-align:center;font-family:宋体">图</span><span style="line-height:26px;text-align:center"> </span><span lang="EN-US" style="line-height:26px;text-align:center">4 Cache B</span><span style="line-height:26px;text-align:center"> </span><span style="line-height:26px;text-align:center;font-family:宋体">被移除后的</span><span style="line-height:26px;text-align:center"> </span><span lang="EN-US" style="line-height:26px;text-align:center">cache</span><span style="line-height:26px;text-align:center"> </span><span style="line-height:26px;text-align:center;font-family:宋体">映射</span></div><p></p><p style="line-height:26px;text-indent:0px"><span lang="EN-US"><br></span></p><p style="line-height:26px;text-indent:0px"><span lang="EN-US"></span></p><p style="line-height:26px;text-indent:21pt"><strong><span lang="EN-US">3.5.2 </span></strong><strong><span style="font-family:宋体">添加</span> <span lang="EN-US">cache</span></strong></p><p style="line-height:26px;text-indent:21pt"><span style="font-family:宋体">再考虑添加一台新的</span> <span lang="EN-US">cache D</span> <span style="font-family:宋体">的情况，假设在这个环形</span> <span lang="EN-US">hash</span> <span style="font-family:宋体">空间中，</span> <span lang="EN-US">cache D</span> <span style="font-family:宋体">被映射在对象</span> <span lang="EN-US">object2</span> <span style="font-family:宋体">和</span><span lang="EN-US">object3</span> <span style="font-family:宋体">之间。这时受影响的将仅是那些沿</span> <span lang="EN-US">cache D</span> <span style="font-family:宋体">逆时针遍历直到下一个</span> <span lang="EN-US">cache</span> <span style="font-family:宋体">（</span> <span lang="EN-US">cache B</span> <span style="font-family:宋体">）之间的对象（它们是也本来映射到</span> <span lang="EN-US">cache C</span> <span style="font-family:宋体">上对象的一部分），将这些对象重新映射到</span> <span lang="EN-US">cache D</span> <span style="font-family:宋体">上即可。</span></p><p style="line-height:26px"><span lang="EN-US"> </span></p><p style="line-height:26px;text-indent:21pt"><span style="font-family:宋体">因此这里仅需要变动对象</span> <span lang="EN-US">object2</span> <span style="font-family:宋体">，将其重新映射到</span> <span lang="EN-US">cache D</span> <span style="font-family:宋体">上；参见图</span> <span lang="EN-US">5</span> <span style="font-family:宋体">。</span></p><p style="line-height:26px;text-indent:21pt"><span style="font-family:宋体"><br></span></p><p style="line-height:26px;text-indent:21pt"></p><div style="text-align:center"><img title="一致性哈希算法 - snoopyxdy - snoopyxdy的博客" alt="一致性哈希算法 - snoopyxdy - snoopyxdy的博客" style="margin:0 10px 0 0" src="http://img8.ph.126.net/k-1CeeG1yROY8F2sVhbYEw==/2735373823691839018.jpg"></div><div style="text-align:center"><br></div><div style="text-align:center"> <span style="line-height:26px;text-align:center;font-family:宋体">图</span><span style="line-height:26px;text-align:center"> </span><span lang="EN-US" style="line-height:26px;text-align:center">5 </span><span style="line-height:26px;text-align:center"></span><span style="line-height:26px;text-align:center;font-family:宋体">添加</span><span style="line-height:26px;text-align:center"> </span><span lang="EN-US" style="line-height:26px;text-align:center">cache D</span><span style="line-height:26px;text-align:center"> </span><span style="line-height:26px;text-align:center;font-family:宋体">后的映射关系</span></div><p></p><p></p><p style="line-height:26px;text-indent:0px"><span lang="EN-US"></span></p><h2 style="margin:0px;padding:0px;color:rgb(51,51,51);font-family:Arial;line-height:26px"><span lang="EN-US">4 </span>虚拟节点</h2><p style="color:rgb(51,51,51);font-family:Arial;line-height:26px"><span style="font-family:宋体">考量</span> <span lang="EN-US">Hash</span> <span style="font-family:宋体">算法的另一个指标是平衡性</span> <span lang="EN-US">(Balance)</span> <span style="font-family:宋体">，定义如下：</span></p><p style="color:rgb(51,51,51);font-family:Arial;line-height:26px"><span style="font-family:宋体">平衡性</span></p><p style="color:rgb(51,51,51);font-family:Arial;line-height:26px"><span style="font-family:宋体">　　平衡性是指哈希的结果能够尽可能分布到所有的缓冲中去，这样可以使得所有的缓冲空间都得到利用。</span></p><p style="color:rgb(51,51,51);font-family:Arial;line-height:26px"><span lang="EN-US">hash</span> <span style="font-family:宋体">算法并不是保证绝对的平衡，如果</span> <span lang="EN-US">cache</span> <span style="font-family:宋体">较少的话，对象并不能被均匀的映射到</span> <span lang="EN-US">cache</span> <span style="font-family:宋体">上，比如在上面的例子中，仅部署</span> <span lang="EN-US">cache A</span> <span style="font-family:宋体">和</span> <span lang="EN-US">cache C</span> <span style="font-family:宋体">的情况下，在</span> <span lang="EN-US">4</span> <span style="font-family:宋体">个对象中，</span> <span lang="EN-US">cache A</span> <span>仅存储了</span> <span lang="EN-US">object1</span> <span style="font-family:宋体">，而</span> <span lang="EN-US">cache C</span> <span style="font-family:宋体">则存储了</span> <span lang="EN-US">object2</span> <span style="font-family:宋体">、</span> <span lang="EN-US">object3</span> <span style="font-family:宋体">和</span> <span lang="EN-US">object4</span> <span style="font-family:宋体">；分布是很不均衡的。</span></p><p style="color:rgb(51,51,51);font-family:Arial;line-height:26px;text-indent:21pt"><span style="font-family:宋体">为了解决这种情况，</span> <span lang="EN-US">consistent hashing</span> <span style="font-family:宋体">引入了“虚拟节点”的概念，它可以如下定义：</span></p><p style="color:rgb(51,51,51);font-family:Arial;line-height:26px;text-indent:21pt"><span style="font-family:宋体">“虚拟节点”（</span> <span lang="EN-US">virtual node</span> <span style="font-family:宋体">）是实际节点在</span> <span lang="EN-US">hash</span> <span style="font-family:宋体">空间的复制品（</span> <span lang="EN-US">replica</span> <span style="font-family:宋体">），一实际个节点对应了若干个“虚拟节点”，这个对应个数也成为“复制个数”，“虚拟节点”在</span> <span lang="EN-US">hash</span> <span style="font-family:宋体">空间中以</span> <span lang="EN-US">hash</span> <span style="font-family:宋体">值排列。</span></p><p style="color:rgb(51,51,51);font-family:Arial;line-height:26px;text-indent:21pt"><span style="font-family:宋体">仍以仅部署</span> <span lang="EN-US">cache A</span> <span style="font-family:宋体">和</span> <span lang="EN-US">cache C</span> <span style="font-family:宋体">的情况为例，在图</span> <span lang="EN-US">4</span> <span style="font-family:宋体">中我们已经看到，</span> <span lang="EN-US">cache</span> <span style="font-family:宋体">分布并不均匀。现在我们引入虚拟节点，并设置“复制个数”为</span> <span lang="EN-US">2</span> <span style="font-family:宋体">，这就意味着一共会存在</span> <span lang="EN-US">4</span> <span style="font-family:宋体">个“虚拟节点”，</span> <span lang="EN-US">cache A1, cache A2</span> <span style="font-family:宋体">代表了</span> <span lang="EN-US">cache A</span> <span style="font-family:宋体">；</span> <span lang="EN-US">cache C1, cache C2</span> <span style="font-family:宋体">代表了</span> <span lang="EN-US">cache C</span> <span style="font-family:宋体">；假设一种比较理想的情况，参见图</span> <span lang="EN-US">6</span> <span style="font-family:宋体">。<br><br><br><br></span></p><div style="text-align:center"><img title="一致性哈希算法 - snoopyxdy - snoopyxdy的博客" alt="一致性哈希算法 - snoopyxdy - snoopyxdy的博客" style="margin:0 10px 0 0" src="http://img3.ph.126.net/7X2EOI5vRgeRcolWY5_vJw==/1579074619364564913.jpg"></div><div style="text-align:center"><span style="line-height:26px;text-indent:21pt"><br></span></div><div style="text-align:center"><span style="line-height:26px;text-indent:21pt"> </span><span style="line-height:26px;text-indent:21pt;text-align:center;font-family:宋体">图</span><span style="line-height:26px;text-indent:21pt;text-align:center"> </span><span lang="EN-US" style="line-height:26px;text-indent:21pt;text-align:center">6 </span><span style="line-height:26px;text-indent:21pt;text-align:center"></span><span style="line-height:26px;text-indent:21pt;text-align:center;font-family:宋体">引入“虚拟节点”后的映射关系</span></div><p></p><p><span style="font-family:宋体"><br></span></p><p style="color:rgb(51,51,51);font-family:Arial;line-height:26px;text-indent:21pt"></p><p style="line-height:26px;text-indent:0px"><span style="font-family:宋体">此时，对象到“虚拟节点”的映射关系为：</span><span lang="EN-US"></span></p><p style="line-height:26px;text-indent:0px"><span lang="EN-US">objec1-&gt;cache A2</span> <span style="font-family:宋体">；</span> <span lang="EN-US">objec2-&gt;cache A1</span> <span style="font-family:宋体">；</span> <span lang="EN-US">objec3-&gt;cache C1</span> <span style="font-family:宋体">；</span> <span lang="EN-US">objec4-&gt;cache C2</span> <span style="font-family:宋体">；</span></p><p style="line-height:26px;text-indent:21pt"><span style="font-family:宋体">因此对象</span> <span lang="EN-US">object1</span> <span style="font-family:宋体">和</span> <span lang="EN-US">object2</span> <span style="font-family:宋体">都被映射到了</span> <span lang="EN-US">cache A</span> <span style="font-family:宋体">上，而</span> <span lang="EN-US">object3</span> <span style="font-family:宋体">和</span> <span lang="EN-US">object4</span> <span style="font-family:宋体">映射到了</span> <span lang="EN-US">cache C</span> <span style="font-family:宋体">上；平衡性有了很大提高。</span></p><p style="text-indent:21pt"><span style="font-family:宋体">引入“虚拟节点”后，映射关系就从</span> <span lang="EN-US">{</span> <span style="font-family:宋体">对象</span> <span lang="EN-US">-&gt;</span> <span style="font-family:宋体">节点</span> <span lang="EN-US">}</span> <span style="font-family:宋体">转换到了</span> <span lang="EN-US">{</span> <span style="font-family:宋体">对象</span> <span lang="EN-US">-&gt;</span> <span style="font-family:宋体">虚拟节点</span> <span lang="EN-US">}</span> <span style="font-family:宋体">。查询物体所在</span> <span lang="EN-US">cache</span><span style="font-family:宋体">时的映射关系如图</span> <span lang="EN-US">7</span> <span style="font-family:宋体">所示。</span></p><br><br><div style="text-align:center"><img title="一致性哈希算法 - snoopyxdy - snoopyxdy的博客" alt="一致性哈希算法 - snoopyxdy - snoopyxdy的博客" style="margin:0 10px 0 0" src="http://img9.ph.126.net/ofXzsFZaUdPlyrYQ1PAPBA==/6597363336261755429.jpg"></div><div style="text-align:center"><span style="line-height:26px;text-indent:21pt"><br></span></div><div style="text-align:center"><span style="line-height:26px;text-indent:21pt"> </span><span style="line-height:26px;text-indent:21pt;text-align:center;font-family:宋体">图</span><span style="line-height:26px;text-indent:21pt;text-align:center"> </span><span lang="EN-US" style="line-height:26px;text-indent:21pt;text-align:center">7 </span><span style="line-height:26px;text-indent:21pt;text-align:center"></span><span style="line-height:26px;text-indent:21pt;text-align:center;font-family:宋体">查询对象所在</span><span style="line-height:26px;text-indent:21pt;text-align:center"> </span><span lang="EN-US" style="line-height:26px;text-indent:21pt;text-align:center">cache</span></div><p></p><p></p><p style="text-align:center;line-height:26px;text-indent:0px"><span lang="EN-US"><br></span></p><p style="line-height:26px;text-indent:0px"><span lang="EN-US"></span></p><p style="color:rgb(51,51,51);font-family:Arial;line-height:26px;text-indent:21pt"><span style="font-family:宋体">“虚拟节点”的</span> <span lang="EN-US">hash</span> <span style="font-family:宋体">计算可以采用对应节点的</span> <span lang="EN-US">IP</span> <span style="font-family:宋体">地址加数字后缀的方式。例如假设</span> <span lang="EN-US">cache A</span> <span style="font-family:宋体">的</span> <span lang="EN-US">IP</span> <span style="font-family:宋体">地址为</span><span lang="EN-US">202.168.14.241</span> <span style="font-family:宋体">。</span></p><p style="color:rgb(51,51,51);font-family:Arial;line-height:26px"><span style="font-family:宋体">引入“虚拟节点”前，计算</span> <span lang="EN-US">cache A</span> <span style="font-family:宋体">的</span> <span lang="EN-US">hash</span> <span style="font-family:宋体">值：</span></p><p style="font-family:Arial;line-height:26px"><span lang="EN-US">Hash(“202.168.14.241”);</span></p><p style="color:rgb(51,51,51);font-family:Arial;line-height:26px"><span style="font-family:宋体">引入“虚拟节点”后，计算“虚拟节”点</span> <span lang="EN-US">cache A1</span> <span style="font-family:宋体">和</span> <span lang="EN-US">cache A2</span> <span style="font-family:宋体">的</span> <span lang="EN-US">hash</span> <span style="font-family:宋体">值：</span></p><p style="color:rgb(51,51,51);font-family:Arial;line-height:26px"><span lang="EN-US">Hash(“202.168.14.241#1”);  // cache A1</span></p><p style="color:rgb(51,51,51);font-family:Arial;line-height:26px"><span lang="EN-US">Hash(“202.168.14.241#2”);  // cache A2</span></p><h2 style="margin:0px;padding:0px;color:rgb(51,51,51);font-family:Arial;line-height:26px"><span lang="EN-US">5 </span>小结</h2><p style="color:rgb(51,51,51);font-family:Arial;line-height:26px;text-indent:21pt"><span lang="EN-US">Consistent hashing</span> <span style="font-family:宋体">的基本原理就是这些，具体的分布性等理论分析应该是很复杂的，不过一般也用不到。</span></p><p style="color:rgb(51,51,51);font-family:Arial;line-height:26px;text-indent:21pt"></p><p style="line-height:26px;text-indent:21pt"><span lang="EN-US"><a style="color:rgb(51,102,153);text-decoration:none" rel="nofollow" href="http://weblogs.java.net/blog/2007/11/27/consistent-hashing">http://weblogs.java.net/blog/2007/11/27/consistent-hashing</a> </span><span style="font-family:宋体">上面有一个</span> <span lang="EN-US">java</span> <span style="font-family:宋体">版本的例子，可以参考。</span></p><p style="line-height:26px;text-indent:21pt"><span lang="EN-US"><a style="color:rgb(51,102,153);text-decoration:none" rel="nofollow" href="http://blog.csdn.net/mayongzhan/archive/2009/06/25/4298834.aspx">http://blog.csdn.net/mayongzhan/archive/2009/06/25/4298834.aspx</a> </span><span style="font-family:宋体">转载了一个</span> <span lang="EN-US">PHP</span> <span style="font-family:宋体">版的实现代码。</span></p><p style="line-height:26px;text-indent:21pt"><span><a style="color:rgb(51,102,153);text-decoration:none" rel="nofollow" href="http://www.codeproject.com/KB/recipes/lib-conhash.aspx">http://www.codeproject.com/KB/recipes/lib-conhash.aspx</a> C语言版本<br></span></p><p style="line-height:26px;text-indent:21pt"><span style="font-family:宋体"><br></span></p><p style="line-height:26px;text-indent:0px"> </p><p style="line-height:26px;text-indent:0px"><span style="font-family:宋体">一些参考资料地址：</span></p><p style="line-height:26px;text-indent:0px"><span lang="EN-US"><a style="color:rgb(51,102,153);text-decoration:none" rel="nofollow" href="http://portal.acm.org/citation.cfm?id=258660">http://portal.acm.org/citation.cfm?id=258660</a></span></p><p style="line-height:26px;text-indent:0px"><span lang="EN-US"><a style="color:rgb(51,102,153);text-decoration:none" rel="nofollow" href="http://en.wikipedia.org/wiki/Consistent_hashing">http://en.wikipedia.org/wiki/Consistent_hashing</a></span></p><p style="line-height:26px;text-indent:0px"><span lang="EN-US"><a style="color:rgb(51,102,153);text-decoration:none" rel="nofollow" href="http://www.spiteful.com/2008/03/17/programmers-toolbox-part-3-consistent-hashing/">http://www.spiteful.com/2008/03/17/programmers-toolbox-part-3-consistent-hashing/</a></span></p><p style="line-height:26px;text-indent:0px"><span lang="EN-US"> <a style="color:rgb(51,102,153);text-decoration:none" rel="nofollow" href="http://weblogs.java.net/blog/2007/11/27/consistent-hashing">http://weblogs.java.net/blog/2007/11/27/consistent-hashing</a></span></p><p style="line-height:26px;text-indent:0px"><span lang="EN-US"><a style="color:rgb(51,102,153);text-decoration:none" rel="nofollow" href="http://tech.idv2.com/2008/07/24/memcached-004/">http://tech.idv2.com/2008/07/24/memcached-004/</a></span></p><p style="line-height:26px;text-indent:0px"><span lang="EN-US"><a style="color:rgb(51,102,153);text-decoration:none" rel="nofollow" href="http://blog.csdn.net/mayongzhan/archive/2009/06/25/4298834.aspx">http://blog.csdn.net/mayongzhan/archive/2009/06/25/4298834.aspx</a></span></p><p></p><p></p><p style="line-height:26px;text-indent:0px"><span lang="EN-US"><br></span></p><p style="line-height:26px;text-indent:0px"><span lang="EN-US"><br></span></p><p style="line-height:26px;text-indent:0px"><span lang="EN-US"><br></span></p><p style="line-height:26px;text-indent:0px"><span lang="EN-US"><br></span></p><p style="line-height:26px;text-indent:0px"><span lang="EN-US"><br></span></p><p></p><p style="color:rgb(51,51,51);font-family:Arial;line-height:26px;text-indent:21pt"><span style="font-family:宋体"><br></span></p></div><div style="text-indent:28px"></div></div>