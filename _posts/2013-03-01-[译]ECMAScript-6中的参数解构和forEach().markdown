---
layout: post
title:  "[译]ECMAScript 6中的参数解构和forEach()"
date:   2013-03-01 15:28:00
author: 紫云飞
categories: program
---

## [译]ECMAScript 6中的参数解构和forEach()
### by 紫云飞
### at 2013-03-01 15:28:00
### original <http://www.cnblogs.com/ziyunfei/archive/2013/03/01/2938290.html>

<p>原文:<a href="http://www.2ality.com/2013/02/foreach-es6.html">http://www.2ality.com/2013/02/foreach-es6.html</a></p><br><hr><br><p>本文将对ECMAScript 6中的解构(destructuring)语法做简要介绍,以及讲解一下如何利用解构来让数组方法<tt>forEach()的使用更加方便</tt>.</p><br><h3>解构</h3><br><p>ECMAScript 6中的解构特性具体是指:赋值操作的目标(可以理解为赋值语句的左值)可以是一个模式(pattern),该模式可以进入赋值操作的右值(可以是一个数组或者一个普通对象)的内部,将右值内部的某个数组元素的值(右值为数组的情况)或者某个属性的值(右值为普通对象的情况)赋值给左值模式中包含的某个变量.下面的这个例子演示了解构是如何应用在变量声明语句中的:</p><br><div style="background-color:#f5f5f5;border:1px solid #cccccc;padding:10px"><br><pre>&gt; let { first: f, last: l } = { first: &#39;Jane&#39;, last: &#39;Doe&#39;<span style="color:#000000"> };<br></span>&gt;<span style="color:#000000"> f<br></span>'Jane'<br>&gt;<span style="color:#000000"> l<br></span>'Doe'</pre><br></div><br><p>另外一个例子,你还可以交换两个变量<tt>x和</tt><tt>y的值</tt>:</p><br><div style="background-color:#f5f5f5;border:1px solid #cccccc;padding:10px"><br><pre>[x,y] = [y,x];</pre><br></div><br><p>解构特性也可以运用在形参的位置.下面的这个函数有两种形参:第一种形参(<tt>positional</tt>)是位置形参(根据形参的排列位置来传递对应的实参),剩下的形参(<tt>named1</tt>和<tt>named2</tt>)是命名形参(根据形参的名称来传递对应的实参),其中,命名形参被包装在一个称之为选项对象(options object)的对象字面量中(其实这个对象也就是第二个位置形参).</p><br><div style="background-color:#f5f5f5;border:1px solid #cccccc;padding:10px"><br><pre><span style="color:#0000ff">function</span><span style="color:#000000"> foo(positional, { named1, named2 }) {<br>    </span><span style="color:#0000ff">return</span><span style="color:#000000"> [ positional, named1, named2 ];<br>} </span></pre><br></div><br><p>调用上面的函数效果如下:</p><br><div style="background-color:#f5f5f5;border:1px solid #cccccc;padding:10px"><br><pre>&gt; foo(123, { named1: &#39;abc&#39;, named2: &#39;def&#39;<span style="color:#000000"> })<br>[ </span>123, 'abc', 'def'<span style="color:#000000"> ]<br></span>&gt; foo(123, { named2: &#39;def&#39;, named1: &#39;abc&#39;<span style="color:#000000"> })<br>[ </span>123, 'abc', 'def' ]</pre><br></div><br><p>你还可以为位置形参和命名形参指定默认参数值(也是ES6特性),拥有默认参数值的形参在函数调用时可以省略对应的传入实参 <sup><span>[1]</span></sup>.</p><br><h3>解构和forEach()</h3><br><p>ES6中的解构参数(Destructuring parameter)很适合与<tt>Array.prototype.forEach()方法配合使用,</tt>如下:</p><br><div style="background-color:#f5f5f5;border:1px solid #cccccc;padding:10px"><br><pre>let items = [ ['foo', 3], ['bar', 9<span style="color:#000000">] ];<br>items.forEach(([word, count]) </span>=&gt; console.log(word+&#39; &#39;+count));</pre><br></div><br><p>在这个例子中,<tt>forEach()方法的参数是一个箭头函数(</tt>arrow function),这也是ECMAScript 6中一种新的函数表达式的书写方式 <sup><span>[2]</span></sup>.在这个例子中,数组中的元素还可以是一个常规对象:</p><br><div style="background-color:#f5f5f5;border:1px solid #cccccc;padding:10px"><br><pre>let items = [ {word:'foo', count:3}, {word:'bar', count:9<span style="color:#000000">} ];<br>items.forEach(({word, count}) </span>=&gt; console.log(word+&#39; &#39;+count)); </pre><br></div><br><p>其中的对象子面量:</p><br><div style="background-color:#f5f5f5;border:1px solid #cccccc;padding:10px"><br><pre>{ word, count }</pre><br></div><br><p>就是下面这种常见写法的缩写形式:</p><br><div style="background-color:#f5f5f5;border:1px solid #cccccc;padding:10px"><br><pre>{ word: word, count: count }</pre><br></div><br><p>因此,你还可以把上面的语句写成:</p><br><div style="background-color:#f5f5f5;border:1px solid #cccccc;padding:10px"><br><pre>items.forEach(({word: w, count: c}) =&gt; console.log(w+&#39; &#39;+c));</pre><br></div><br><p>另外,ECMAScript 6新增的<tt>for-of循环语句中也可以使用解构 </tt><sup><span>[3]</span></sup>:</p><br><div style="background-color:#f5f5f5;border:1px solid #cccccc;padding:10px"><br><pre><span style="color:#0000ff">for</span><span style="color:#000000"> ([word, count] of items) {<br>    console.log(word</span>+' '+<span style="color:#000000">count);<br>}</span></pre><br></div><br><h3>参考文章</h3><br><ol><br><li><a href="http://www.2ality.com/2011/11/keyword-parameters.html">Keyword parameters in JavaScript and ECMAScript.next</a></li><br><li><a href="http://www.2ality.com/2012/04/arrow-functions.html">ECMAScript.next: arrow functions and method definitions</a></li><br><li><a href="http://www.2ality.com/2012/06/for-of-ff13.html">ECMAScript.next: for-of, iterators, generators</a></li><br></ol><img src="http://www.cnblogs.com/ziyunfei/aggbug/2938290.html?type=1" width="1" height="1" alt=""><p><a href="http://www.cnblogs.com/ziyunfei/archive/2013/03/01/2938290.html">本文链接</a></p>