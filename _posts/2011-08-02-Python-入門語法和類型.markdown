---
layout: post
title:  "Python 入門語法和類型"
date:   2011-08-02 14:38:00
author: 麦豆同学
categories: program
---

## Python 入門語法和類型
### by 麦豆同学
### at 2011-08-02 14:38:00
### original <http://www.cnblogs.com/mcdou/archive/2011/08/02/2125016.html>

<p><p>Python的设计目标之一是让源代码具备高度的可读性。它设计时尽量使用其它语言经常使用的标点符号和英语单词，让源代码整体看起来很整洁美观。它不像静态语言如C、Pascal那样需要重复书写声明语句，也不像它们的语法那样经常有特殊情况和惊喜。</p>
<p><span style="font-family:幼圆;font-size:14pt"><strong><span>缩进</span></strong></span></p>
<p>Python开发者有意让违反了缩进规则的程序不能通过编译，以此来强制程序员养成良好的编程习惯。并且在Python语言里，缩进而非花括号或者某种关键字，被用于表示语句块的开始和退出。增加缩进表示语句块的开始，而减少缩进则表示语句块的退出。缩进成为了语法的一部分。例如</p>
<p><span></span><code>if</code>语句：</p>
<p></p>
<div>
<pre><span style="color:#0000ff">if</span><span style="color:#000000"> age </span><span style="color:#000000">&lt;</span><span style="color:#000000"> </span><span style="color:#000000">21</span><span style="color:#000000">:<br>    </span><span style="color:#0000ff">print</span><span style="color:#000000">(</span><span style="color:#800000">"</span><span style="color:#800000">你不能買酒。</span><span style="color:#800000">"</span><span style="color:#000000">)<br>    </span><span style="color:#0000ff">print</span><span style="color:#000000">(</span><span style="color:#800000">"</span><span style="color:#800000">不過你能買口香糖。</span><span style="color:#800000">"</span><span style="color:#000000">)<br></span><span style="color:#0000ff">print</span><span style="color:#000000">(</span><span style="color:#800000">"</span><span style="color:#800000">這句話處於if語句塊的外面。</span><span style="color:#800000">"</span><span style="color:#000000">)</span></pre>
</div>
<p>根据PEP的规定，必须使用<b>4个空格</b>来表示每级缩进。使用Tab字符和其它数目的空格虽然都可以编译通过，但不符合编码规范。支持Tab字符和其它数目的空格仅仅是为了兼容很旧的Python程序和某些有问题的编辑器。</p>
<p><strong><span style="font-size:14pt">语句和控制流</span></strong></p>
<ul>
<li><strong><code>if</code>语句</strong>，当条件成立时执行语句块。经常与<code>else</code>,<code>elif</code>(相当于<code>else if</code>)配合使用。</li>
<li><strong><code>for</code>语句</strong>，遍历列表、字符串、字典、集合等迭代器，依次处理迭代器中的每个元素。</li>
<li><strong><code>while</code>语句</strong>，当条件为真时，循环执行语句块。</li>
<li><strong><code>try</code>语句</strong>。与<code>except</code>,<code>finally</code>配合使用处理在程序运行中出现的异常情况。</li>
<li><strong><code>class</code>语句</strong>。用于定义类型。</li>
<li><strong><code>def</code>语句</strong>。用于定义函数和类型的方法。</li>
<li><strong><code>pass</code>语句</strong>。表示此行为空，不执行任何操作。</li>
<li><strong><code>assert</code>语句</strong>。用于程序调试阶段时测试运行条件是否满足。</li>
<li><strong><code>with</code>语句</strong>。Python2.6以后定义的语法，在一个场景中运行语句块。比如，运行语句块前加锁，然后在语句块运行结束后释放它。</li>
<li><strong><code>yield</code>语句</strong>。在迭代器函数内使用，用于返回一个元素。自从Python 2.5版本以后。这个语句变成一个运算符。</li>
</ul>
<p><strong><span style="font-size:14pt">表达式</span></strong></p>
<p>Python的表达式写法与C/C++类似。只是在某些写法有所差别。</p>
<ul>
<li>主要的算术运算符与C/C++类似。<code>+, -, *, /, //, **, ~, %</code>分别表示加法或者取正、减法或者取负、乘法、除法、整除、乘方、取补、取模。<code>&gt;&gt;, &lt;&lt;</code>表示右移和左移。<code>&amp;, |, ^</code>表示二进制的<code>AND, OR, XOR</code>运算。<code>&gt;, &lt;, ==, !=, &lt;=, &gt;=</code>用于比较两个表达式的值，分别表示大于、小于、等于、不等于、小于等于、大于等于。在这些运算符里面，<code>~, |, ^, &amp;, &lt;&lt;, &gt;&gt;</code>必须应用于整数。</li>
<li>Python使用<code>and</code>, <code>or</code>, <code>not</code>表示逻辑运算。</li>
<li><code>is, is not</code>用于比较两个变量是否是同一个对象。<code>in, not in</code>用于判断一个对象是否属于另外一个对象。</li>
<li>Python支持"列表推导式"（list comprehension），比如计算0-9的平方和:</li>
</ul>
<div>
<pre><span style="color:#000000">&gt;&gt;&gt;</span><span style="color:#000000"> sum(x </span><span style="color:#000000">*</span><span style="color:#000000"> x </span><span style="color:#0000ff">for</span><span style="color:#000000"> x </span><span style="color:#0000ff">in</span><span style="color:#000000"> range(</span><span style="color:#000000">10</span><span style="color:#000000">))</span><span style="color:#000000">285</span></pre>
</div>
<p></p>
<ul>
<li>Python使用<code>lambda</code>表示匿名函数。匿名函数体只能是表达式。比如：</li>
</ul>
<div>
<pre><span style="color:#000000">&gt;&gt;&gt;</span><span style="color:#000000"> add</span><span style="color:#000000">=</span><span style="color:#0000ff">lambda</span><span style="color:#000000"> x, y : x </span><span style="color:#000000">+</span><span style="color:#000000"> y</span><span style="color:#000000">&gt;&gt;&gt;</span><span style="color:#000000"> add(</span><span style="color:#000000">3</span><span style="color:#000000">,</span><span style="color:#000000">2</span><span style="color:#000000">)</span><span style="color:#000000">5</span></pre>
</div>
<p></p>
<ul>
<li>Python使用<code>y if cond else x</code>表示条件表达式。意思是当<code>cond</code>为真时，表达式的值为<code>y</code>，否则表达式的值为<code>x</code>。相当于C++和Java里的<code>cond?y:x</code>。</li>
<li>Python区分列表(list)和元组(tuple)两种类型。list的写法是<code>[1,2,3]</code>，而tuple的写法是<code>(1,2,3)</code>。可以改变list中的元素，而不能改变tuple。在某些情况下，tuple的括号可以省略。tuple对于赋值语句有特殊的处理。因此，可以同时赋值给多个变量，比如：</li>
</ul>
<div>
<pre><span style="color:#000000">&gt;&gt;&gt;</span><span style="color:#000000"> x, y</span><span style="color:#000000">=</span><span style="color:#000000">1</span><span style="color:#000000">, </span><span style="color:#000000">2</span><span style="color:#000000"> </span><span style="color:#008000">#</span><span style="color:#008000">同时给x,y赋值，最终结果：x=1, y=2</span></pre>
</div>
<p>特别地，可以使用以下这种形式来交换两个变量的值：</p>
<div>
<pre><span style="color:#000000">&gt;&gt;&gt;</span><span style="color:#000000"> x, y</span><span style="color:#000000">=</span><span style="color:#000000">y, x </span><span style="color:#008000">#</span><span style="color:#008000">最终结果：y=1, x=2</span></pre>
</div>
<ul>
<li>Python使用'(单引号)和"(双引号)来表示字符串。与Perl、Unix Shell语言或者Ruby、Groovy等语言不一样，两种符号作用相同。一般地，如果字符串中出现了双引号，就使用单引号来表示字符串;反之则使用双引号。如果都没有出现，就依个人喜好选择。出现在字符串中的\(反斜杠)被解释为特殊字符，比如<code>\n</code>表示换行符。表达式前加<code>r</code>指示Python不解释字符串中出现的\。这种写法通常用于编写正则表达式或者Windows文件路径。</li>
</ul>
<ul>
<li>Python支持列表切割(list slices)，可以取得完整列表的一部分。支持切割操作的类型有<code>str, bytes, list, tuple</code>等。它的语法是<code>...[left:right]</code>或者<code>...[left:right:stride]</code>。假定<code>nums</code>变量的值是<code>[1, 3, 5, 7, 8, 13, 20]</code>，那么下面几个语句为真：</li>
</ul>
<dl><dd>
<ul>
<li><code>nums[2:5] == [5, 7, 8]</code> 从下标为2的元素切割到下标为5的元素，但不包含下标为2的元素。</li>
<li><code>nums[1:] == [3, 5, 7, 8, 13, 20]</code> 切割到最后一个元素。</li>
<li><code>nums[:-3] == [1, 3, 5, 7]</code> 从最开始的元素一直切割到倒数第3个元素。</li>
<li><code>nums[:] == [1, 3, 5, 7, 8, 13, 20]</code> 返回所有元素。改变新的列表不会影响到nums。</li>
<li><code>nums[1:5:2] == [3, 7]</code></li>
</ul>
</dd></dl>
<p><strong><span style="font-size:14pt"><code><span>函数</span></code></span></strong></p>
<p>Python的函数支持递归、默认参数值、可变参数，但不支持函数重载。为了增强代码的可读性，可以在函数后书写”文档字符串“(Documentation Strings，或者简称docstrings)，用于解释函数的作用、参数的类型与意义、返回值类型与取值范围等。可以使用内置函数<code><span style="background-color:#f9f9f9">help()</span></code>打印出函数的使用帮助。比如：</p>
<div>
<pre><span style="color:#008080">1</span> <span style="color:#000000">&gt;&gt;&gt;</span><span style="color:#000000"> </span><span style="color:#0000ff">def</span><span style="color:#000000"> randint(a, b):<br></span><span style="color:#008080">2</span> <span style="color:#000000">...     </span><span style="color:#800000">"</span><span style="color:#800000">Return random integer in range [a, b], including both end points.</span><span style="color:#800000">"</span><span style="color:#000000"><br></span><span style="color:#008080">3</span> <span style="color:#000000">...<br></span><span style="color:#008080">4</span> <span style="color:#000000"></span><span style="color:#000000">&gt;&gt;&gt;</span><span style="color:#000000"> help(randint)<br></span><span style="color:#008080">5</span> <span style="color:#000000">Help on function randint </span><span style="color:#0000ff">in</span><span style="color:#000000"> module </span><span style="color:#800080">__main__</span><span style="color:#000000">:<br></span><span style="color:#008080">6</span> <span style="color:#000000"> <br></span><span style="color:#008080">7</span> <span style="color:#000000">randint(a, b)<br></span><span style="color:#008080">8</span> <span style="color:#000000">    Return random integer </span><span style="color:#0000ff">in</span><span style="color:#000000"> range [a, b], including both end points.</span></pre>
</div>
<p><strong><span style="font-size:14pt">对象的方法</span></strong></p>
<p>对象的方法是指绑定到对象的函数。调用对象方法的语法是<span style="color:#ff6600"><code>instance.method(arguments)</code></span>。它等价于调用<span style="color:#ff6600"><code>Class.method(instance, arguments)</code></span>。当定义对象方法时，必须显式地定义第一个参数为<code>self</code>，用于访问对象的内部数据。<code>self</code>相当于C++, Java里面的<code>this</code>变量。比如：</p>
<div>
<pre><span style="color:#0000ff">class</span><span style="color:#000000"> Fish:<br>    </span><span style="color:#0000ff">def</span><span style="color:#000000"> eat(self, food):<br>        </span><span style="color:#0000ff">if</span><span style="color:#000000"> food </span><span style="color:#0000ff">is</span><span style="color:#000000"> </span><span style="color:#0000ff">not</span><span style="color:#000000"> None:<br>            self.hungry</span><span style="color:#000000">=</span><span style="color:#000000">False<br> <br></span><span style="color:#008000">#</span><span style="color:#008000">构造Fish的实例：</span><span style="color:#008000"><br></span><span style="color:#000000">f</span><span style="color:#000000">=</span><span style="color:#000000">Fish()<br></span><span style="color:#008000">#</span><span style="color:#008000">以下两种调用形式是等价的：</span><span style="color:#008000"><br></span><span style="color:#000000">Fish.eat(f, </span><span style="color:#800000">"</span><span style="color:#800000">earthworm</span><span style="color:#800000">"</span><span style="color:#000000">)<br>f.eat(</span><span style="color:#800000">"</span><span style="color:#800000">earthworm</span><span style="color:#800000">"</span><span style="color:#000000">)</span></pre>
</div>
<p>Python认识一些以”__“开始并以&quot;__&quot;结束的特殊方法名，它们用于实现运算符重载和实现多种特殊功能。</p>
<p><strong><span style="font-size:14pt">类型</span></strong></p>
<p>Python采用动态类型系统。在编译的时候，Python不会检查对象是否拥有被调用的方法或者属性，而是直至运行时，才做出检查。所以操作对象时可能会抛出异常。不过，虽然Python采用动态类型系统，它同时也是强类型的。Python禁止没有明确定义的操作，比如数字加字符串。</p>
<p>与其它面向对象语言一样，Python允许程序员定义类型。构造一个对象只需要像函数一样调用类型即可，比如，对于前面定义的<code>Fish</code>类型，使用<code>Fish()</code>。类型本身也是特殊类型<code>type</code>的对象(<code>type</code>类型本身也是<code>type</code>对象)，这种特殊的设计允许对类型进行反射编程。</p>
<p>Python内置丰富的数据类型。与Java、C++相比，这些数据类型有效地减少代码的长度。下面这个列表简要地描述了Python内置数据类型(适用于Python 3.x)：</p>
<table style="width:753px;height:356px" border="1" cellspacing="0" cellpadding="2">
<tbody>
<tr><th bgcolor="#cccccc"><strong>类型</strong></th><th bgcolor="#cccccc"><strong>描述</strong></th><th bgcolor="#cccccc"><strong>例子</strong></th></tr>
<tr>
<td bgcolor="#eeeeee" align="middle">str</td>
<td bgcolor="#eeeeee">一个由字符组成的不可更改的有串行。在Python 3.x里，字符串由Unicode字符组成。</td>
<td bgcolor="#eeeeee">'Wikipedia'<br>"Wikipedia"<br>"""Spanning<br>multiple<br>lines"""</td>
</tr>
<tr>
<td bgcolor="#eeeeee" align="middle">bytes</td>
<td bgcolor="#eeeeee">一个由字节组成的不可更改的有串行。</td>
<td bgcolor="#eeeeee">b'Some ASCII'<br>b"Some ASCII"</td>
</tr>
<tr>
<td bgcolor="#eeeeee" align="middle">list</td>
<td bgcolor="#eeeeee">可以包含多种类型的可改变的有串行</td>
<td bgcolor="#eeeeee">[4.0, 'string', True]</td>
</tr>
<tr>
<td bgcolor="#eeeeee" align="middle">tuple</td>
<td bgcolor="#eeeeee">可以包含多种类型的不可改变的有串行</td>
<td bgcolor="#eeeeee">(4.0, 'string', True)</td>
</tr>
<tr>
<td bgcolor="#eeeeee" align="middle">set, frozenset</td>
<td bgcolor="#eeeeee">与数学中集合的概念类似。无序的、每个元素唯一。</td>
<td bgcolor="#eeeeee">{4.0, 'string', True}<br>frozenset([4.0, 'string', True])</td>
</tr>
<tr>
<td bgcolor="#eeeeee" align="middle">dict</td>
<td bgcolor="#eeeeee">一个可改变的由键值对组成的无串行。</td>
<td bgcolor="#eeeeee">{'key1': 1.0, 3: False}</td>
</tr>
<tr>
<td bgcolor="#eeeeee" align="middle">int</td>
<td bgcolor="#eeeeee">精度不限的整数</td>
<td bgcolor="#eeeeee">42</td>
</tr>
<tr>
<td bgcolor="#eeeeee" align="middle">float</td>
<td bgcolor="#eeeeee">浮点数。精度与系统相关。</td>
<td bgcolor="#eeeeee">3.1415927</td>
</tr>
<tr>
<td bgcolor="#eeeeee" align="middle">complex</td>
<td bgcolor="#eeeeee">复数</td>
<td bgcolor="#eeeeee">3+2.7j</td>
</tr>
<tr>
<td bgcolor="#eeeeee" align="middle">bool</td>
<td bgcolor="#eeeeee">逻辑值。只有两个值：真、假</td>
<td bgcolor="#eeeeee">True<br>False</td>
</tr>
</tbody>
</table>
<p>除了各种数据类型，Python语言还用类型来表示函数、模块、类型本身、对象的方法、编译后的Python代码、运行时信息等等。因此，Python具备很强的动态性。</p>
<p><span style="font-size:14pt"><strong><span>数学运算</span></strong></span></p>
<p>Python使用与C、Java类似的运算符，支持整数与浮点数的数学运算。同时还支持复数运算与无穷位数（实际受限于计算机的能力）的整数运算。除了求绝对值函数<code>abs()</code>外，大多数数学函数处于<code>math</code>和<code>cmath</code>模块内。前者用于实数运算，而后者用于复数运算。使用时需要先导入它们，比如：</p>
<div>
<pre><span style="color:#000000">&gt;&gt;&gt;</span><span style="color:#000000"> </span><span style="color:#0000ff">import</span><span style="color:#000000"> math<br></span><span style="color:#000000">&gt;&gt;&gt;</span><span style="color:#000000"> </span><span style="color:#0000ff">print</span><span style="color:#000000">(math.sin(math.pi</span><span style="color:#000000">/</span><span style="color:#000000">2</span><span style="color:#000000">))<br></span><span style="color:#000000">1.0</span></pre>
</div>
<p><code>fractions</code>模块用于支持分数运算；<code>decimal</code>模块用于支持高精度的浮点数运算。</p>
<p>Python定义求余运行<code>a % b</code>的值处于开区间<code>[0, b)</code>内，如果<code>b</code>是负数，开区间变为<code>(b, 0]</code>。这是一个很常见的定义方式。不过其实它依赖于整除的定义。为了让方程式：<code>b * (a // b) + a % b = a</code>恒真，整除运行需要向负无穷小方向取值。比如<code>7 // 3</code>的结果是<code>2</code>，而<code>(-7) // 3</code>的结果却是<code>-3</code>。这个算法与其它很多编程语言不一样，需要注意，它们的整除运算会向0的方向取值。</p>
<p>Python允许像数学的常用写法那样连着写两个比较运行符。比如<code>a &lt; b &lt; c</code>与<code>a &lt; b and b &lt; c</code>等价。C++的结果与Python不一样，首先它会先计算<code>a &lt; b</code>，根据两者的大小获得0或者1两个值之一，然后再与c进行比较。</p><img src="http://www.cnblogs.com/mcdou/aggbug/2125016.html?type=1" width="1" height="1" alt=""><p>作者: <a href="http://www.cnblogs.com/mcdou/">麦豆同学</a> 发表于 2011-08-02 14:38 <a href="http://www.cnblogs.com/mcdou/archive/2011/08/02/2125016.html">原文链接</a></p><p>评论: 3　<a href="http://www.cnblogs.com/mcdou/archive/2011/08/02/2125016.html#pagedcomment">查看评论</a>　<a href="http://www.cnblogs.com/mcdou/archive/2011/08/02/2125016.html#commentform">发表评论</a></p><hr><p>最新新闻：<br>· <a href="http://news.cnblogs.com/n/110710/">个性化团购网站ChoozOn获320万美元天使投资</a><span style="color:gray">(2011-08-03 08:42)</span><br>· <a href="http://news.cnblogs.com/n/110709/">黑客大会在即 美国安全部门猎才</a><span style="color:gray">(2011-08-03 08:41)</span><br>· <a href="http://news.cnblogs.com/n/110708/">为什么老妈放弃了 Android 手机，买了一个 iPhone</a><span style="color:gray">(2011-08-03 08:30)</span><br>· <a href="http://news.cnblogs.com/n/110707/">Google 如何盈利？</a><span style="color:gray">(2011-08-03 08:26)</span><br>· <a href="http://news.cnblogs.com/n/110706/">Chrome 13 稳定版发布</a><span style="color:gray">(2011-08-03 08:21)</span><br></p><p>编辑推荐：<a href="http://news.cnblogs.com/n/110397/">谷歌是如何做代码审查的</a><br></p><p>网站导航：<a href="http://www.cnblogs.com">博客园首页</a>  <a href="http://home.cnblogs.com/">我的园子</a>  <a href="http://news.cnblogs.com">新闻</a>  <a href="http://home.cnblogs.com/ing/">闪存</a>  <a href="http://home.cnblogs.com/group/">小组</a>  <a href="http://space.cnblogs.com/q/">博问</a>  <a href="http://kb.cnblogs.com">知识库</a></p></p>