---
layout: post
title:  "git多人协作开发流程(以blog为例)"
date:   2011-02-25 16:00:00
author: 
categories: program
---

## git多人协作开发流程(以blog为例)
### by 
### at 2011-02-25 16:00:00
### original <http://blog.leezhong.com/tech/2011/02/25/git-workflow-with-blog-demo.html>

<p>时间仓促，能力有限，错误难免(代码没有经过实际验证，所以可能会有问题)，欢迎指正 :)</p>
<p>这个开发流程就是基于<a href="http://nvie.com/posts/a-successful-git-branching-model/">a successful git model</a>这篇文章而来的，如果对英文不感冒的话，我这有<a href="http://blog.leezhong.com/translate/2010/10/30/a-successful-git-branch.html">翻译版</a></p>
<p><b>项目背景：</b></p>
<div><pre><code><span>张三 / 李四 / 王五 打算共同协作，开发一套博客系统</span>
</code></pre>
</div>
<p><b>项目分工：</b></p>
<div><pre><code><span>张三 / 李四 负责文章系统</span>
<span>王五负责评论系统</span>
</code></pre>
</div>
<h3>建立服务端仓库</h3>
<p>git虽然是分布式版本管理工具，但为了方便管理，我们需要建立一个中心仓库，先在服务端建立两条分支</p>
<div><pre><code><span>master</span>
<span>develop</span>
</code></pre>
</div>
<p>master保存稳定版(production ready)，开发人员平时的代码都提交到develop分支上</p>
<h3>开发者的Git分支</h3>
<h4>张三的Git分支</h4>
<p>因为张三和李四同时开发文章系统，所以就有了下面的分支</p>
<div><pre><code><span>#</span> 张三的Git分支
<span>article (local)</span>
<span>lisi/article (via git remote add lisi http://lisi-server/lisi.git)</span>
<span>origin/master (via git remote add origin http://remote-server/blog.git)</span>
<span>origin/develop</span>
</code></pre>
</div>
<h4>李四的Git分支</h4>
<p>跟张三类似，不过article server变成了张三的</p>
<div><pre><code><span>#</span> 李四的Git分支
<span>article (local)</span>
<span>zhangsan/article (via git remote add zhangsan http://zhangsan-server/zhangsan.git)</span>
<span>origin/master (via git remote add origin http://remote-server/blog.git)</span>
<span>origin/develop</span>
</code></pre>
</div>
<h4>王五的Git分支</h4>
<p>因为只有王五一个人开发评论系统，所以只要一条远程分支就行了</p>
<div><pre><code><span>#</span> 王五的Git分支
<span>comment (local)</span>
<span>origin/master (via git remote add origin http://remote-server/blog.git)</span>
<span>origin/develop</span>
</code></pre>
</div>
<h3>开发过程</h3>
<h4>张三和李四</h4>
<p>假设张三负责文章的管理，及前端显示。李四负责文章的分类和标签系统。</p>
<p>张三开发完一部分后(n次本地commit)，提交到本地的git server(也就是李四添加的http://zhangsan-server/zhangsan.git)。</p>
<p>李四开发完一部分后，因为要与张三开发的部分合并，所以需要执行一下rebase或merge</p>
<div><pre><code><span>#</span> 当前在article分支中
<span>git rebase zhangsan/article</span>
<span>#</span> 提交到本地的git server <span>(</span>也就是张三添加的http://lisi-server/lisi.git<span>)</span>。
<span>git push local/article master</span>
</code></pre>
</div>
<p>这时张三又开发完了一部分，他也会走跟李四一样的流程，rebase &amp; push (如果有冲突，解决之)。</p>
<p>假设由张三统一负责将每日的开发进度提交到remote develop分支上，张三在执行了上面所说的流程后，提交到服务端的develop分支。但这时很可能王五已经把他写的代码提交了，所以要先执行一下rebase</p>
<div><pre><code><span>git rebase origin/develop</span>
<span>git push origin develop</span>
</code></pre>
</div>
<p>这样张三和李四的代码就都提交到了服务端的develop分支上。王五那边的流程也一样，只是少了本地同步的过程。</p>
<h3>开发完毕，进入测试阶段</h3>
<p>经过几天的开发，各个功能都已基本完成，下面就要进入测试阶段。具体做法是在服务端新添加一个分支，命名为release，所以这时服务端就有3个分支了</p>
<div><pre><code><span>master</span>
<span>develop</span>
<span>release</span>
</code></pre>
</div>
<p>三位同学都在本地新建一个branch，对应服务端的release分支</p>
<div><pre><code><span>git checkout -b release origin/release</span>
</code></pre>
</div>
<p>分别进行测试，如果发现问题，则执行pull &amp; push</p>
<div><pre><code><span>#</span> 当前在release分支下
<span>git pull origin release</span>
<span>git push origin develop</span>
</code></pre>
</div>
<p>经过几天的测试后，发现没什么问题了，就可以发布稳定版了，假设为0.1</p>
<div><pre><code><span>git checkout master</span>
<span>git rebase origin/release</span>
<span>git tag 0.1</span>
<span>git push origin master --tags</span>
</code></pre>
</div>
<p>同时别忘了把release分支上的代码与develop分支合并，保证develop分支上不会有遗留的bug。(没有找到如何直接merge两个服务端branch的方法)</p>
<div><pre><code><span>git checkout develop</span>
<span>git rebase origin/release</span>
<span>git push origin develop</span>
<span>#</span> 删除服务端的release分支
<span>git push origin :release</span>
</code></pre>
</div>
<p>接下来就可以继续在develop分支上进行开发了。</p>
<h3>添加新特性</h3>
<p>博客系统需要添加archives功能，这个功能的开发就交给了新来的赵六。此时，在服务端新开一个分支，命名为feature，这时服务端的分支就变成了这样</p>
<div><pre><code><span>master</span>
<span>develop</span>
<span>feature/archive</span>
</code></pre>
</div>
<p>赵六也在本地建立一个archive分支，每天提交到服务端的feature/archive，赵六的Git分支是这样的(不相关的服务端Git已省去)</p>
<div><pre><code><span>master</span>
<span>archive</span>
<span>origin/feature/archive</span>
</code></pre>
</div>
<p>等到这个feature开发完了，与服务端的develop分支执行一下rebase，然后再提交到服务端的develop，这样博客的archive功能就有了</p>
<div><pre><code><span>git checkout archive</span>
<span>git rebase origin/feature/archive</span>
<span>git push origin feature/archive</span>
<span>#</span> 如果要删除服务端的feature/archive分支的话
<span>git push origin :feature/archive</span>
</code></pre>
</div>
<p>接下来的流程跟上面的一样：开发完毕后，新建release分支，在那上面进行bug修复，修复完毕后，merge到服务端的master和develop</p>
<h3>紧急修复漏洞</h3>
<p>博客出现了一个xss漏洞，需要尽快修复，这时新建一个hotfix分支(现在本地建，然后提交到服务端)，然后对漏洞进行修复，修复完后，提交到服务端的master和develop</p>
<div><pre><code><span>git checkout master</span>
<span>git pull origin master</span>
<span>git checkout -b hotfix</span>
<span>#</span> 漏洞修复...
<span>#</span> 修复完后
<span>git push origin hotfix</span>
<span>git checkout master</span>
<span>git rebase hotfix</span>
<span>git push origin master</span>
<span>git push origin develop</span>
</code></pre>
</div>