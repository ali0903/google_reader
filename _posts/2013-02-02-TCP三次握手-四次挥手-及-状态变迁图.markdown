---
layout: post
title:  "TCP三次握手/四次挥手 及 状态变迁图"
date:   2013-02-02 12:51:56
author: xsky
categories: program
---

## TCP三次握手/四次挥手 及 状态变迁图
### by xsky
### at 2013-02-02 12:51:56
### original <http://www.udpwork.com/item/9205.html>

<div><h3><strong>【建立TCP连接】</strong>
（三次握手）</h3>
</div>
<div><div>   由于TCP协议提供可靠的连接服务，于是采用有保障的三次握手方式来创建一个TCP连接。三次握手的具体过程如下：</div>
<div><ol><li>客户端发送一个带SYN标志的TCP报文（报文1）到服务器端，表示希望建立一个TCP连接。</li>
<li>服务器发送一个带ACK标志和SYN标志的TCP报文（报文2）给客户端，ACK用于对报文1的回应，SYN用于询问客户端是否准备好进行数据传输。</li>
<li>客户端发送一个带ACK标志的TCP报文（报文3），作为报文2的回应。</li>
</ol>
</div>
<div>   至此，一个TCP连接就建立起来了。（详见下图）</div>
<div></div>
<div></div>
<div><strong>【终止TCP连接】</strong>
（四次挥手）</div>
<div>   由于TCP连接是全双工的，因此每个方向都必须单独进行关闭。原则是主动关闭的一方（如已传输完所有数据等原因）发送一个FIN报文来表示终止这个方向的连接，收到一个FIN意味着这个方向不再有数据流动，但另一个方向仍能继续发送数据，直到另一个方向也发送FIN报文。四次挥手的具体过程如下：</div>
<div><ol><li>客户端发送一个FIN报文（报文4）给服务器，表示我将关闭客户端到服务器端这个方向的连接。</li>
<li>服务器收到报文4后，发送一个ACK报文（报文5）给客户端，序号为报文4的序号加1。</li>
<li>服务器发送一个FIN报文（报文6）给客户端，表示自己也将关闭服务器端到客户端这个方向的连接。</li>
<li>客户端收到报文6后，发回一个ACK报文（报文7）给服务器，序号为报文6的序号加1。</li>
</ol>
</div>
<div>   至此，一个TCP连接就关闭了。（4次挥手不是关闭TCP连接的唯一办法，见下文Q3疑问）</div>
<div></div>
<div></div>
<div><strong>【TCP连接状态】</strong>
</div>
<div>下面是每一个TCP连接在任意时刻可能处于的状态，在Linux下可以在<strong>netstat</strong>
命令的最后一列（State列）里看到。</div>
<div>各个状态的含义如下：</div>
<div><ul><li><strong>CLOSED</strong>
：初始状态，表示TCP连接是“关闭着的”或“未打开的”。</li>
<li><strong>LISTEN</strong>
 ：表示服务器端的某个SOCKET处于监听状态，可以接受客户端的连接。</li>
<li><strong>SYN_RCVD </strong>
：表示接收到了SYN报文。在正常情况下，这个状态是服务器端的SOCKET在建立TCP连接时的三次握手会话过程中的一个中间状态，很短暂，基本上用netstat很难看到这种状态，除非故意写一个监测程序，将三次TCP握手过程中最后一个ACK报文不予发送。当TCP连接处于此状态时，再收到客户端的ACK报文，它就会进入到ESTABLISHED 状态。</li>
<li><strong>SYN_SENT</strong>
 ：这个状态与SYN_RCVD 状态相呼应，当客户端SOCKET执行connect()进行连接时，它首先发送SYN报文，然后随即进入到SYN_SENT 状态，并等待服务端的发送三次握手中的第2个报文。SYN_SENT 状态表示客户端已发送SYN报文。</li>
<li><strong>ESTABLISHED</strong>
 ：表示TCP连接已经成功建立。</li>
<li><strong>FIN_WAIT_1</strong>
 ：这个状态得好好解释一下，其实FIN_WAIT_1 和FIN_WAIT_2 两种状态的真正含义都是表示等待对方的FIN报文。而这两种状态的区别是：FIN_WAIT_1状态实际上是当SOCKET在ESTABLISHED状态时，它想主动关闭连接，向对方发送了FIN报文，此时该SOCKET进入到FIN_WAIT_1 状态。而当对方回应ACK报文后，则进入到FIN_WAIT_2 状态。当然在实际的正常情况下，无论对方处于任何种情况下，都应该马上回应ACK报文，所以FIN_WAIT_1 状态一般是比较难见到的，而FIN_WAIT_2 状态有时仍可以用netstat看到。</li>
<li><strong>FIN_WAIT_2</strong>
 ：上面已经解释了这种状态的由来，实际上FIN_WAIT_2状态下的SOCKET表示半连接，即有一方调用close()主动要求关闭连接。注意：FIN_WAIT_2 是没有超时的（不像TIME_WAIT 状态），这种状态下如果对方不关闭（不配合完成4次挥手过程），那这个 FIN_WAIT_2 状态将一直保持到系统重启，越来越多的FIN_WAIT_2 状态会导致内核crash。</li>
<li><strong>TIME_WAIT</strong>
 ：表示收到了对方的FIN报文，并发送出了ACK报文。 TIME_WAIT状态下的TCP连接会等待2*MSL（Max Segment Lifetime，最大分段生存期，指一个TCP报文在Internet上的最长生存时间。每个具体的TCP协议实现都必须选择一个确定的MSL值，RFC 1122建议是2分钟，但BSD传统实现采用了30秒，Linux可以cat /proc/sys/net/ipv4/tcp_fin_timeout看到本机的这个值），然后即可回到CLOSED 可用状态了。如果FIN_WAIT_1状态下，收到了对方同时带FIN标志和ACK标志的报文时，可以直接进入到TIME_WAIT状态，而无须经过FIN_WAIT_2状态。</li>
<li><strong>CLOSING</strong>
 ：这种状态在实际情况中应该很少见，属于一种比较罕见的例外状态。正常情况下，当一方发送FIN报文后，按理来说是应该先收到（或同时收到）对方的ACK报文，再收到对方的FIN报文。但是CLOSING 状态表示一方发送FIN报文后，并没有收到对方的ACK报文，反而却也收到了对方的FIN报文。什么情况下会出现此种情况呢？那就是当双方几乎在同时close()一个SOCKET的话，就出现了双方同时发送FIN报文的情况，这是就会出现CLOSING 状态，表示双方都正在关闭SOCKET连接。</li>
<li><strong>CLOSE_WAIT</strong>
 ：表示正在等待关闭。怎么理解呢？当对方close()一个SOCKET后发送FIN报文给自己，你的系统毫无疑问地将会回应一个ACK报文给对方，此时TCP连接则进入到CLOSE_WAIT状态。接下来呢，你需要检查自己是否还有数据要发送给对方，如果没有的话，那你也就可以close()这个SOCKET并发送FIN报文给对方，即关闭自己到对方这个方向的连接。有数据的话则看程序的策略，继续发送或丢弃。简单地说，当你处于CLOSE_WAIT 状态下，需要完成的事情是等待你去关闭连接。</li>
<li><strong>LAST_ACK</strong>
 ：当被动关闭的一方在发送FIN报文后，等待对方的ACK报文的时候，就处于LAST_ACK 状态。当收到对方的ACK报文后，也就可以进入到CLOSED 可用状态了。</li>
</ul>
</div>
<div></div>
<div></div>
<div><strong>【TCP状态变迁图】</strong>
</div>
<div>   下面是收集自网上的几张图片，展示TCP连接的各种状态的变迁可能：</div>
<div><div><img src="http://img0.ph.126.net/MAwPCmDy9GBJbk90FqN4ng==/2612087783892192400.jpg" alt="TCP三次握手/四次挥手 及 状态变迁图 - panda - pandalove@126.com的博客"></div>
</div>
<div><div><img src="http://img5.ph.126.net/4OfU6tYHzDZHhORRFZ6RuA==/2808557317636224975.jpg" alt="TCP三次握手/四次挥手 及 状态变迁图 - panda - pandalove@126.com的博客"></div>
<div></div>
<div><div><img src="http://img3.ph.126.net/zzz4qL4JS9nGfS5a-q28dw==/65020719637473583.jpg" alt="TCP三次握手/四次挥手 及 状态变迁图 - panda - pandalove@126.com的博客"></div>
</div>
<div><div><img src="http://img0.ph.126.net/mqkWdOYBSyzCUx0CryfBLQ==/1135188581091395990.jpg" alt="TCP三次握手/四次挥手 及 状态变迁图 - panda - pandalove@126.com的博客"></div>
</div>
<div></div>
</div>
<div></div>
<div><strong>【TCP相关疑问】</strong>
</div>
<div>   最后整理几个常见的TCP相关的疑问：</div>
<div><ul><li><strong>Q1</strong>
  为什么在TCP协议里，建立连接是三次握手，而关闭连接却是四次握手呢？</li>
<li><strong>A1</strong>
  因为当处于LISTEN 状态的服务器端SOCKET当收到SYN报文（客户端希望新建一个TCP连接）后，它可以把ACK（应答作用）和SYN（同步作用）放在同一个报文里来发送给客户端。但在关闭TCP连接时，当收到对方的FIN报文时，对方仅仅表示对方没有数据发送给你了，但未必你的所有数据都已经全部发送给了对方，所以你大可不必马上关闭SOCKET（发送一个FIN报文），等你发送完剩余的数据给对方之后，再发送FIN报文给对方来表示你同意现在关闭连接了，所以通常情况下，这里的ACK报文和FIN报文都是分开发送的。</li>
<li><strong>Q2</strong>
为什么TIME_WAIT 状态还需要等2*MSL秒之后才能返回到CLOSED 状态呢？</li>
<li><strong>A2</strong>
因为虽然双方都同意关闭连接了，而且握手的4个报文也都发送完毕，按理可以直接回到CLOSED 状态（就好比从SYN_SENT 状态到ESTABLISH 状态那样），但是我们必须假想网络是不可靠的，你无法保证你最后发送的ACK报文一定会被对方收到，就是说对方处于LAST_ACK 状态下的SOCKET可能会因为超时未收到ACK报文，而重发FIN报文，所以这个TIME_WAIT 状态的作用就是用来重发可能丢失的ACK报文。</li>
<li><strong>Q3</strong>
关闭TCP连接一定需要4次挥手吗？</li>
<li><strong>A3</strong>
不一定，4次挥手关闭TCP连接是最安全的做法。但在有些时候，我们不喜欢TIME_WAIT 状态（如当MSL数值设置过大导致服务器端有太多TIME_WAIT状态的TCP连接，减少这些条目数可以更快地关闭连接，为新连接释放更多资源），这时我们可以通过设置SOCKET变量的SO_LINGER标志来避免SOCKET在close()之后进入TIME_WAIT状态，这时将通过发送RST强制终止TCP连接（取代正常的TCP四次握手的终止方式）。但这并不是一个很好的主意，TIME_WAIT 对于我们来说往往是有利的。</li>
</ul>
</div>
</div>

			<div style="margin-top:8px;padding:6px 0;border-top:1px solid #3cf">
				<div style="text-align:center;margin:16px 0;padding:6px;border:0px dashed #999;font-family:arial;font-size:26px;font-weight:bold">
	<a href="http://www.udpwork.com/item/9205.html#review_form" title="不喜欢" style="text-decoration:none">
		<img src="http://www.udpwork.com//images/thumb_down24.gif" alt="">
		<span style="color:#f33">0</span>
	</a>
	   
	<a href="http://www.udpwork.com/item/9205.html#review_form" title="喜欢" style="text-decoration:none">
		<img src="http://www.udpwork.com//images/thumb_up24.gif" alt="">
		<span style="color:#3c3">0</span>
	</a>
</div>				<p>
					由 <a href="http://www.udpwork.com/">udpwork.com</a> 聚合
					|
					<a href="http://www.udpwork.com/item/9205.html#reviews">评论: 0</a>
					|
					<a href="http://www.jikenow.com/">要! 要! 即刻! Now!</a>
				</p>
			</div>