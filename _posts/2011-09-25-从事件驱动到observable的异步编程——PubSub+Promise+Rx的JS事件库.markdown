---
layout: post
title:  "从事件驱动到observable的异步编程——PubSub+Promise+Rx的JS事件库"
date:   2011-09-25 23:35:39
author: Dexter.Yy
categories: program
---

## 从事件驱动到observable的异步编程——PubSub+Promise+Rx的JS事件库
### by Dexter.Yy
### at 2011-09-25 23:35:39
### original <http://www.limboy.com/2011/09/25/pubsub-plus-promise-plus-rx/>

<p><a href="http://promotejs.com/"><img src="http://www.limboy.com/wp-content/uploads/2011/09/event_18289736.jpeg" style="float:left;margin:0 10px 10px 0"></a>你上当叻，虽然从外面看标题很有气势，传达出一种宏大叙事的赶脚，其实我只是刚刚把一个<a href="http://alphatown.com">阿尔法城</a>的JS模块提交到github，想顺便介绍一下，但我连API文档都懒得写，就别指望能深入浅出的讲一遍来龙去脉了⋯⋯<br>
<span></span></p>
<div style="clear:left"></div>
<p>所以就直接帖几个前置阅读的链接罢！</p>
<p>这些潮流的外部起源：（技术也有外源论/exogenesis⋯⋯）<br>
<a href="http://twistedmatrix.com/documents/current/core/howto/defer.html">Twisted（Python的事件驱动异步引擎）里的Deferred模式</a><br>
<a href="http://msdn.microsoft.com/en-us/data/gg577609">微软推崇的Reactive Extensions (Rx)</a></p>
<p>虽然我是微软黑但微软网站上的这两篇推介文章不错：<br>
<a href="http://msdn.microsoft.com/en-us/scriptjunkie/hh201955">Understanding the Publish/Subscribe Pattern for Greater JavaScript Scalability</a><br>
<a href="http://blogs.msdn.com/b/ie/archive/2011/09/11/asynchronous-programming-in-javascript-with-promises.aspx">Asynchronous Programming in JavaScript with “Promises”</a><br>
应该都有人翻译了，比如这个：<a href="http://www.infoq.com/cn/news/2011/09/js-promise">infoQ: JavaScript异步编程的Promise模式</a></p>
<p>jQuery早就跟微软一个鼻孔出气了：<br>
<a href="http://api.jquery.com/category/deferred-object/">http://api.jquery.com/category/deferred-object/</a></p>
<p>CommonJS的Promises提案，照例又分了好多种ABCD神马的：<br>
<a href="http://wiki.commonjs.org/wiki/Promises">http://wiki.commonjs.org/wiki/Promises</a></p>
<p><a href="http://www.cs.brown.edu/%7Esk/Publications/Papers/Published/mgbcgbk-flapjax/">假如你愿意这里还有一篇paper</a>⋯⋯<br>
<br></p>
<p>阿尔法城的<a href="http://www.limboy.com/2011/07/10/mvc-behind-alphatown/">客户端程序</a>里有一个叫作<a href="https://github.com/dexteryy/OzJS/blob/master/mod/event.js">event</a>的模块提供了以上提到的PubSub模式、Promise模式和部分Rx模式，可以算是<a href="https://github.com/dexteryy/OzJS">OzJS</a>的核心module。</p>
<p>就像名字一样，它的初衷是一个最基础最简洁的消息事件库，类似nodejs的EventEmitter。在项目实践中，我很早就注意到可以用统一的事件机制实现Twisted风格的API，为此需要能随时提取事件主题（本质上就是promise对象），后来又根据实际需求加入了能表示状态转移的触发器（enable/resolve）和“一次性”的侦听器（wait/then），最后实现了同时依赖多个异步事件（或promise）的语法工具，包括并发事件（when）和有先后顺序的事件流（follow和end）。所以这个模块不是基于自顶向下的设计，而是在逐步的实践、hack和验证中发展出来的，上面提到的各种模式词汇都是“事后美化”，我觉得大多数“设计模式”也是这样——是对实践方法的归纳和描述，而不是在实践中套用的“新技术”。<br>
<br><br>
开始帖使用范例～<br>
<br></p>
<p>把Event实例单独定义为模块，承担应用各模块之间的消息传递：</p>
<div><ol title="Double click to hide line number."><li><span style="color:Blue">oz</span><span style="color:Gray">.</span><span style="color:Blue">def</span><span style="color:Olive">(</span><span style="color:#8b0000">&quot;</span><span style="color:Red">notify</span><span style="color:#8b0000">&quot;</span><span style="color:Gray">, </span><span style="color:Olive">[</span><span style="color:#8b0000">&quot;</span><span style="color:Red">event</span><span style="color:#8b0000">&quot;</span><span style="color:Olive">]</span><span style="color:Gray">, </span><span style="color:Green">function</span><span style="color:Olive">(</span><span style="color:Blue">Event</span><span style="color:Olive">){</span></li>
<li><span style="color:Gray">    </span><span style="color:Green">return</span><span style="color:Gray"> </span><span style="color:Blue">Event</span><span style="color:Olive">()</span><span style="color:Gray">; </span><span style="color:#ffa500">// 以下例子里省略def/require声明，继续沿用notify和Event这两个局部变量名</span></li>
<li><span style="color:Olive">})</span><span style="color:Gray">;</span></li></ol></div>
<p>为基础类生成独立的事件命名空间，不依赖应用级的全局事件：</p>
<div><ol title="Double click to hide line number."><li><span style="color:Blue">Dialog</span><span style="color:Gray">.</span><span style="color:Blue">prototype</span><span style="color:Gray"> = </span><span style="color:Olive">{</span></li>
<li><span style="color:Gray">    </span><span style="color:Blue">init</span><span style="color:Gray">: </span><span style="color:Green">function</span><span style="color:Olive">(</span><span style="color:Blue">opt</span><span style="color:Olive">){</span></li>
<li><span style="color:Gray">        </span><span style="color:Green">this</span><span style="color:Gray">.</span><span style="color:Blue">event</span><span style="color:Gray"> = </span><span style="color:Blue">Event</span><span style="color:Olive">()</span><span style="color:Gray">;</span></li>
<li><span style="color:Gray">    </span><span style="color:Olive">}</span><span style="color:Gray">,</span></li>
<li><span style="color:Gray">    </span><span style="color:Blue">update</span><span style="color:Gray">: </span><span style="color:Green">function</span><span style="color:Olive">()</span><span style="color:Gray"> </span><span style="color:Olive">{</span></li>
<li><span style="color:Gray">        </span><span style="color:Green">this</span><span style="color:Gray">.</span><span style="color:Blue">updateSize</span><span style="color:Olive">()</span><span style="color:Gray">;</span></li>
<li><span style="color:Gray">        </span><span style="color:Green">this</span><span style="color:Gray">.</span><span style="color:Blue">updatePosition</span><span style="color:Olive">()</span><span style="color:Gray">;</span></li>
<li><span style="color:Gray">        </span><span style="color:Green">this</span><span style="color:Gray">.</span><span style="color:Blue">event</span><span style="color:Gray">.</span><span style="color:Blue">fire</span><span style="color:Olive">(</span><span style="color:#8b0000">&quot;</span><span style="color:Red">update</span><span style="color:#8b0000">&quot;</span><span style="color:Gray">, </span><span style="color:Olive">[</span><span style="color:Green">this</span><span style="color:Olive">])</span><span style="color:Gray">;</span></li>
<li><span style="color:Gray">        </span><span style="color:Green">return</span><span style="color:Gray"> </span><span style="color:Green">this</span><span style="color:Gray">;</span></li>
<li><span style="color:Gray">    </span><span style="color:Olive">}</span><span style="color:Gray">,</span></li></ol></div>
<p>监听消息和解除监听：</p>
<div><ol title="Double click to hide line number."><li><span style="color:Blue">notify</span><span style="color:Gray">.</span><span style="color:Blue">bind</span><span style="color:Olive">(</span><span style="color:#8b0000">&quot;</span><span style="color:Red">msg:A</span><span style="color:#8b0000">&quot;</span><span style="color:Gray">, </span><span style="color:Green">function</span><span style="color:Olive">(</span><span style="color:Blue">msg</span><span style="color:Olive">){</span></li>
<li><span style="color:Gray">    </span><span style="color:Blue">a</span><span style="color:Gray"> = </span><span style="color:Blue">msg</span><span style="color:Gray">;</span></li>
<li><span style="color:Gray">    </span><span style="color:Blue">notify</span><span style="color:Gray">.</span><span style="color:Blue">unbind</span><span style="color:Olive">(</span><span style="color:#8b0000">&quot;</span><span style="color:Red">msg:A</span><span style="color:#8b0000">&quot;</span><span style="color:Gray">, </span><span style="color:Blue">arguments</span><span style="color:Gray">.</span><span style="color:Blue">callee</span><span style="color:Olive">)</span><span style="color:Gray">;</span></li>
<li><span style="color:Olive">})</span><span style="color:Gray">;</span></li></ol></div>
<p>发送消息：</p>
<div><ol title="Double click to hide line number."><li><span style="color:Blue">setTimeout</span><span style="color:Olive">(</span><span style="color:Green">function</span><span style="color:Olive">(){</span></li>
<li><span style="color:Gray">    </span><span style="color:Blue">notify</span><span style="color:Gray">.</span><span style="color:Blue">fire</span><span style="color:Olive">(</span><span style="color:#8b0000">&quot;</span><span style="color:Red">msg:A</span><span style="color:#8b0000">&quot;</span><span style="color:Gray">, </span><span style="color:Olive">[</span><span style="color:#8b0000">&quot;</span><span style="color:Red">hey jude</span><span style="color:#8b0000">&quot;</span><span style="color:Olive">])</span><span style="color:Gray">;</span></li>
<li><span style="color:Olive">}</span><span style="color:Gray">, </span><span style="color:Maroon">1000</span><span style="color:Olive">)</span><span style="color:Gray">;</span></li></ol></div>
<p>状态转移：</p>
<div><ol title="Double click to hide line number."><li><span style="color:Gray">$</span><span style="color:Olive">(</span><span style="color:#8b0000">&quot;</span><span style="color:Red">#button1</span><span style="color:#8b0000">&quot;</span><span style="color:Olive">)</span><span style="color:Gray">.</span><span style="color:Blue">click</span><span style="color:Olive">(</span><span style="color:Green">function</span><span style="color:Olive">(</span><span style="color:Blue">e</span><span style="color:Olive">){</span></li>
<li><span style="color:Gray">    </span><span style="color:Blue">notify</span><span style="color:Gray">.</span><span style="color:Blue">resolve</span><span style="color:Olive">(</span><span style="color:#8b0000">&quot;</span><span style="color:Red">button1:clicked</span><span style="color:#8b0000">&quot;</span><span style="color:Gray">, </span><span style="color:Olive">[</span><span style="color:Green">this</span><span style="color:Olive">])</span><span style="color:Gray">;</span></li>
<li><span style="color:Gray">    </span><span style="color:Blue">notify</span><span style="color:Gray">.</span><span style="color:Blue">bind</span><span style="color:Olive">(</span><span style="color:#8b0000">&quot;</span><span style="color:Red">button1:clicked</span><span style="color:#8b0000">&quot;</span><span style="color:Gray">, </span><span style="color:Green">function</span><span style="color:Olive">(</span><span style="color:Blue">button</span><span style="color:Olive">){</span></li>
<li><span style="color:Gray">        </span><span style="color:#ffa500">// 按钮1已经点击过，所以立刻执行</span></li>
<li><span style="color:Gray">        </span><span style="color:Blue">button</span><span style="color:Gray">.</span><span style="color:Blue">style</span><span style="color:Gray">.</span><span style="color:Blue">color</span><span style="color:Gray"> = </span><span style="color:#8b0000">'</span><span style="color:Red">black</span><span style="color:#8b0000">'</span><span style="color:Gray">;</span></li>
<li><span style="color:Gray">    </span><span style="color:Olive">})</span><span style="color:Gray">;</span></li>
<li><span style="color:Olive">})</span><span style="color:Gray">;</span></li>
<li><span style="color:Blue">notify</span><span style="color:Gray">.</span><span style="color:Blue">bind</span><span style="color:Olive">(</span><span style="color:#8b0000">&quot;</span><span style="color:Red">button1:clicked</span><span style="color:#8b0000">&quot;</span><span style="color:Gray">, </span><span style="color:Green">function</span><span style="color:Olive">(</span><span style="color:Blue">button</span><span style="color:Olive">){</span></li>
<li><span style="color:Gray">    </span><span style="color:#ffa500">// 等待按钮1点击之后再执行</span></li>
<li><span style="color:Gray">    </span><span style="color:Blue">button</span><span style="color:Gray">.</span><span style="color:Blue">style</span><span style="color:Gray">.</span><span style="color:Blue">color</span><span style="color:Gray"> = </span><span style="color:#8b0000">'</span><span style="color:Red">red</span><span style="color:#8b0000">'</span><span style="color:Gray">;</span></li>
<li><span style="color:Olive">})</span><span style="color:Gray">;</span></li></ol></div>
<p>异步回调：</p>
<div><ol title="Double click to hide line number."><li><span style="color:Green">var</span><span style="color:Gray"> </span><span style="color:Blue">data</span><span style="color:Gray"> = </span><span style="color:Olive">{</span></li>
<li><span style="color:Gray">    </span><span style="color:Blue">load</span><span style="color:Gray">: </span><span style="color:Green">function</span><span style="color:Olive">(</span><span style="color:Blue">url</span><span style="color:Olive">){</span></li>
<li><span style="color:Gray">        $.</span><span style="color:Blue">getJSON</span><span style="color:Olive">(</span><span style="color:Blue">url</span><span style="color:Gray">, </span><span style="color:Green">function</span><span style="color:Olive">(</span><span style="color:Blue">json</span><span style="color:Olive">){</span></li>
<li><span style="color:Gray">            </span><span style="color:Green">if</span><span style="color:Gray"> </span><span style="color:Olive">(</span><span style="color:Blue">json</span><span style="color:Olive">)</span></li>
<li><span style="color:Gray">                </span><span style="color:Blue">notify</span><span style="color:Gray">.</span><span style="color:Blue">resolve</span><span style="color:Olive">(</span><span style="color:#8b0000">&quot;</span><span style="color:Red">data:</span><span style="color:#8b0000">&quot;</span><span style="color:Gray"> + </span><span style="color:Blue">url</span><span style="color:Gray">, </span><span style="color:Olive">[</span><span style="color:Blue">json</span><span style="color:Olive">])</span><span style="color:Gray">;</span></li>
<li><span style="color:Gray">            </span><span style="color:Green">else</span></li>
<li><span style="color:Gray">                </span><span style="color:Blue">notify</span><span style="color:Gray">.</span><span style="color:Blue">reject</span><span style="color:Olive">(</span><span style="color:#8b0000">&quot;</span><span style="color:Red">data:</span><span style="color:#8b0000">&quot;</span><span style="color:Gray"> + </span><span style="color:Blue">url</span><span style="color:Olive">)</span><span style="color:Gray">;</span></li>
<li><span style="color:Gray">        </span><span style="color:Olive">})</span><span style="color:Gray">;</span></li>
<li><span style="color:Gray">        </span><span style="color:Green">return</span><span style="color:Gray"> </span><span style="color:Blue">notify</span><span style="color:Gray">.</span><span style="color:Blue">promise</span><span style="color:Olive">(</span><span style="color:#8b0000">&quot;</span><span style="color:Red">data:</span><span style="color:#8b0000">&quot;</span><span style="color:Gray"> + </span><span style="color:Blue">url</span><span style="color:Olive">)</span><span style="color:Gray">;</span></li>
<li><span style="color:Gray">    </span><span style="color:Olive">}</span></li>
<li><span style="color:Olive">}</span><span style="color:Gray">;</span></li>
<li><span style="color:Blue">data</span><span style="color:Gray">.</span><span style="color:Blue">load</span><span style="color:Olive">(</span><span style="color:#8b0000">&quot;</span><span style="color:Red">jsonp_data_1.js</span><span style="color:#8b0000">&quot;</span><span style="color:Olive">)</span><span style="color:Gray">.</span><span style="color:Blue">then</span><span style="color:Olive">(</span><span style="color:Green">function</span><span style="color:Olive">(</span><span style="color:Blue">json</span><span style="color:Olive">){</span></li>
<li><span style="color:Gray">    </span><span style="color:#ffa500">// json callback</span></li>
<li><span style="color:Olive">}</span><span style="color:Gray">, </span><span style="color:Green">function</span><span style="color:Olive">(){</span></li>
<li><span style="color:Gray">    </span><span style="color:#ffa500">// json error </span></li>
<li><span style="color:Olive">})</span><span style="color:Gray">;</span></li></ol></div>
<p>也可以用自己的promise对象：</p>
<div><ol title="Double click to hide line number."><li><span style="color:Green">var</span><span style="color:Gray"> </span><span style="color:Blue">promise</span><span style="color:Gray"> = </span><span style="color:Blue">Event</span><span style="color:Gray">.</span><span style="color:Blue">Promise</span><span style="color:Olive">()</span><span style="color:Gray">;</span></li>
<li><span style="color:Gray">$.</span><span style="color:Blue">ajax</span><span style="color:Olive">({</span></li>
<li><span style="color:Gray">    </span><span style="color:Blue">url</span><span style="color:Gray">: </span><span style="color:#8b0000">&quot;</span><span style="color:Red">jsonp_data_1.js</span><span style="color:#8b0000">&quot;</span><span style="color:Gray">,</span></li>
<li><span style="color:Gray">    </span><span style="color:Blue">success</span><span style="color:Gray">: </span><span style="color:Green">function</span><span style="color:Olive">(</span><span style="color:Blue">json</span><span style="color:Olive">){</span></li>
<li><span style="color:Gray">        </span><span style="color:Blue">promise</span><span style="color:Gray">.</span><span style="color:Blue">resolve</span><span style="color:Olive">(</span><span style="color:Blue">json</span><span style="color:Olive">)</span><span style="color:Gray">;</span></li>
<li><span style="color:Gray">        </span><span style="color:Blue">promise</span><span style="color:Gray">.</span><span style="color:Blue">fire</span><span style="color:Olive">(</span><span style="color:#8b0000">&quot;</span><span style="color:Red">json loaded</span><span style="color:#8b0000">&quot;</span><span style="color:Olive">)</span><span style="color:Gray">;</span></li>
<li><span style="color:Gray">    </span><span style="color:Olive">}</span><span style="color:Gray">,</span></li>
<li><span style="color:Gray">    </span><span style="color:Blue">error</span><span style="color:Gray">: </span><span style="color:Green">function</span><span style="color:Olive">(){</span></li>
<li><span style="color:Gray">        </span><span style="color:Blue">promise</span><span style="color:Gray">.</span><span style="color:Blue">reject</span><span style="color:Olive">()</span><span style="color:Gray">;</span></li>
<li><span style="color:Gray">        </span><span style="color:Blue">promise</span><span style="color:Gray">.</span><span style="color:Blue">error</span><span style="color:Olive">(</span><span style="color:#8b0000">&quot;</span><span style="color:Red">json error</span><span style="color:#8b0000">&quot;</span><span style="color:Olive">)</span><span style="color:Gray">;</span></li>
<li><span style="color:Gray">    </span><span style="color:Olive">}</span></li>
<li><span style="color:Olive">})</span><span style="color:Gray">;</span></li>
<li><span style="color:#ffa500">// fire和error都会执行bind的参数，resolve执行then和bind，所以bind的参数会被执行2次</span></li>
<li><span style="color:#ffa500">// 如果ajax请求在之前已经返回，则只有then或fail的参数会被执行（因为他们监听的是“状态改变”）</span></li>
<li><span style="color:Blue">promise</span><span style="color:Gray">.</span><span style="color:Blue">bind</span><span style="color:Olive">(</span><span style="color:Green">function</span><span style="color:Olive">(){})</span><span style="color:Gray">.</span><span style="color:Blue">then</span><span style="color:Olive">(</span><span style="color:Green">function</span><span style="color:Olive">(){})</span><span style="color:Gray">.</span><span style="color:Blue">fail</span><span style="color:Olive">(</span><span style="color:Green">function</span><span style="color:Olive">(){})</span><span style="color:Gray">;</span></li></ol></div>
<p>事件流：</p>
<div><ol title="Double click to hide line number."><li><span style="color:Blue">notify</span><span style="color:Gray">.</span><span style="color:Blue">promise</span><span style="color:Olive">(</span><span style="color:#8b0000">&quot;</span><span style="color:Red">data:jsonp_data_1.js</span><span style="color:#8b0000">&quot;</span><span style="color:Olive">)</span><span style="color:Gray">.</span><span style="color:Blue">then</span><span style="color:Olive">(</span><span style="color:Green">function</span><span style="color:Olive">(</span><span style="color:Blue">json</span><span style="color:Olive">){</span></li>
<li><span style="color:Gray">    </span><span style="color:Blue">setTimeout</span><span style="color:Olive">(</span><span style="color:Green">function</span><span style="color:Olive">(){</span></li>
<li><span style="color:Gray">        </span><span style="color:Blue">notify</span><span style="color:Gray">.</span><span style="color:Blue">resolve</span><span style="color:Olive">(</span><span style="color:#8b0000">&quot;</span><span style="color:Red">delay:1000</span><span style="color:#8b0000">&quot;</span><span style="color:Gray">, </span><span style="color:Olive">[</span><span style="color:Gray">+</span><span style="color:Green">new</span><span style="color:Gray"> </span><span style="color:Teal">Date</span><span style="color:Olive">()</span><span style="color:Gray">, </span><span style="color:Blue">json</span><span style="color:Olive">])</span><span style="color:Gray">;</span></li>
<li><span style="color:Gray">    </span><span style="color:Olive">}</span><span style="color:Gray">, </span><span style="color:Maroon">1000</span><span style="color:Olive">)</span><span style="color:Gray">;</span></li>
<li><span style="color:Gray">    </span><span style="color:Green">return</span><span style="color:Gray"> </span><span style="color:Blue">notify</span><span style="color:Gray">.</span><span style="color:Blue">promise</span><span style="color:Olive">(</span><span style="color:#8b0000">&quot;</span><span style="color:Red">delay:1000</span><span style="color:#8b0000">&quot;</span><span style="color:Olive">)</span><span style="color:Gray">;</span></li>
<li><span style="color:Olive">})</span><span style="color:Gray">.</span><span style="color:Blue">follow</span><span style="color:Olive">()</span><span style="color:Gray">.</span><span style="color:Blue">then</span><span style="color:Olive">(</span><span style="color:Green">function</span><span style="color:Olive">(</span><span style="color:Blue">time</span><span style="color:Gray">, </span><span style="color:Blue">json</span><span style="color:Olive">){</span></li>
<li><span style="color:Gray">    </span><span style="color:Blue">setTimeout</span><span style="color:Olive">(</span><span style="color:Green">function</span><span style="color:Olive">(){</span></li>
<li><span style="color:Gray">        </span><span style="color:Blue">console</span><span style="color:Gray">.</span><span style="color:Blue">log</span><span style="color:Olive">(</span><span style="color:#8b0000">&quot;</span><span style="color:Red">[数据在3秒前加载成功]</span><span style="color:#8b0000">&quot;</span><span style="color:Gray">, </span><span style="color:Blue">json</span><span style="color:Olive">)</span><span style="color:Gray">;</span></li>
<li><span style="color:Gray">    </span><span style="color:Olive">}</span><span style="color:Gray">, </span><span style="color:Maroon">2000</span><span style="color:Olive">)</span><span style="color:Gray">;</span></li>
<li><span style="color:Olive">})</span><span style="color:Gray">.</span><span style="color:Blue">end</span><span style="color:Olive">()</span><span style="color:Gray">.</span><span style="color:Blue">fail</span><span style="color:Olive">(</span><span style="color:Green">function</span><span style="color:Olive">(</span><span style="color:Blue">msg</span><span style="color:Olive">){</span></li>
<li><span style="color:Gray">    </span><span style="color:Green">return</span><span style="color:Gray"> </span><span style="color:Blue">notify</span><span style="color:Gray">.</span><span style="color:Blue">promise</span><span style="color:Olive">(</span><span style="color:#8b0000">&quot;</span><span style="color:Red">data:error</span><span style="color:#8b0000">&quot;</span><span style="color:Olive">)</span><span style="color:Gray">.</span><span style="color:Blue">resolve</span><span style="color:Olive">([</span><span style="color:Blue">msg</span><span style="color:Olive">])</span><span style="color:Gray">;</span></li>
<li><span style="color:Olive">})</span><span style="color:Gray">.</span><span style="color:Blue">follow</span><span style="color:Olive">()</span><span style="color:Gray">.</span><span style="color:Blue">then</span><span style="color:Olive">(</span><span style="color:Green">function</span><span style="color:Olive">(){</span></li>
<li><span style="color:Gray">    </span><span style="color:Blue">console</span><span style="color:Gray">.</span><span style="color:Blue">log</span><span style="color:Olive">(</span><span style="color:#8b0000">&quot;</span><span style="color:Red">[数据加载失败]</span><span style="color:#8b0000">&quot;</span><span style="color:Gray">, </span><span style="color:Blue">msg</span><span style="color:Olive">)</span><span style="color:Gray">;</span></li>
<li><span style="color:Olive">})</span><span style="color:Gray">;</span></li></ol></div>
<p>避免多层的回调嵌套（“callback hell”）：</p>
<div><ol title="Double click to hide line number."><li><span style="color:Green">var</span><span style="color:Gray"> </span><span style="color:Blue">fs</span><span style="color:Gray"> = </span><span style="color:Blue">require</span><span style="color:Olive">(</span><span style="color:#8b0000">&quot;</span><span style="color:Red">fs</span><span style="color:#8b0000">&quot;</span><span style="color:Olive">)</span><span style="color:Gray">;</span></li>
<li><span style="color:Blue">fs</span><span style="color:Gray">.</span><span style="color:Blue">readFile</span><span style="color:Olive">(</span><span style="color:Blue">input</span><span style="color:Gray">, </span><span style="color:#8b0000">'</span><span style="color:Red">utf-8</span><span style="color:#8b0000">'</span><span style="color:Olive">)</span><span style="color:Gray">.</span><span style="color:Blue">then</span><span style="color:Olive">(</span><span style="color:Green">function</span><span style="color:Olive">(</span><span style="color:Blue">err</span><span style="color:Gray">, </span><span style="color:Blue">data</span><span style="color:Olive">){</span></li>
<li><span style="color:Gray">    </span><span style="color:Green">var</span><span style="color:Gray"> </span><span style="color:Blue">beautifuldata</span><span style="color:Gray"> = </span><span style="color:Blue">js_beautify</span><span style="color:Olive">(</span><span style="color:Blue">data</span><span style="color:Gray">, </span><span style="color:Blue">options</span><span style="color:Olive">)</span><span style="color:Gray">;</span></li>
<li><span style="color:Gray">    </span><span style="color:#ffa500">// 需要修改readFile和writeFile传出promise对象</span></li>
<li><span style="color:Gray">    </span><span style="color:Green">return</span><span style="color:Gray"> </span><span style="color:Blue">fs</span><span style="color:Gray">.</span><span style="color:Blue">writeFile</span><span style="color:Olive">(</span><span style="color:Blue">output</span><span style="color:Gray">, </span><span style="color:Blue">beautifuldata</span><span style="color:Olive">)</span><span style="color:Gray">;</span></li>
<li><span style="color:Olive">})</span><span style="color:Gray">.</span><span style="color:Blue">follow</span><span style="color:Olive">()</span><span style="color:Gray">.</span><span style="color:Blue">then</span><span style="color:Olive">(</span><span style="color:Green">function</span><span style="color:Olive">(</span><span style="color:Blue">err</span><span style="color:Olive">){</span></li>
<li><span style="color:Gray">    </span><span style="color:Green">if</span><span style="color:Gray"> </span><span style="color:Olive">(</span><span style="color:Blue">err</span><span style="color:Olive">)</span></li>
<li><span style="color:Gray">        </span><span style="color:Green">throw</span><span style="color:Gray"> </span><span style="color:Blue">err</span><span style="color:Gray">;</span></li>
<li><span style="color:Gray">    </span><span style="color:Blue">console</span><span style="color:Gray">.</span><span style="color:Blue">log</span><span style="color:Olive">(</span><span style="color:#8b0000">'</span><span style="color:Red">Success!</span><span style="color:#8b0000">'</span><span style="color:Olive">)</span><span style="color:Gray">;</span></li>
<li><span style="color:Olive">})</span><span style="color:Gray">;</span></li></ol></div>
<p>依赖多个并发事件：</p>
<div><ol title="Double click to hide line number."><li><span style="color:Blue">notify</span><span style="color:Gray">.</span><span style="color:Blue">when</span><span style="color:Olive">(</span><span style="color:#8b0000">&quot;</span><span style="color:Red">msg:A</span><span style="color:#8b0000">&quot;</span><span style="color:Gray">, </span><span style="color:#8b0000">&quot;</span><span style="color:Red">msg:B</span><span style="color:#8b0000">&quot;</span><span style="color:Gray">, </span><span style="color:#8b0000">&quot;</span><span style="color:Red">jsonp:A</span><span style="color:#8b0000">&quot;</span><span style="color:Gray">, </span><span style="color:#8b0000">&quot;</span><span style="color:Red">jsonp:B</span><span style="color:#8b0000">&quot;</span><span style="color:Olive">)</span><span style="color:Gray"> </span><span style="color:#ffa500">// when传出新的promise对象</span></li>
<li><span style="color:Gray">    .</span><span style="color:Blue">some</span><span style="color:Olive">(</span><span style="color:Maroon">3</span><span style="color:Olive">)</span><span style="color:Gray"> </span><span style="color:#ffa500">// 如果不调用some或any，默认为全部事件完成后再触发resolve </span></li>
<li><span style="color:Gray">    .</span><span style="color:Blue">then</span><span style="color:Olive">(</span><span style="color:Green">function</span><span style="color:Olive">(){</span><span style="color:Gray"> </span><span style="color:#ffa500">// 已经取到3/4的数据，参数顺序跟when的参数顺序一样</span></li>
<li><span style="color:Gray">        </span><span style="color:Blue">console</span><span style="color:Gray">.</span><span style="color:Blue">warn</span><span style="color:Olive">(</span><span style="color:#8b0000">&quot;</span><span style="color:Red">recieve 3/4</span><span style="color:#8b0000">&quot;</span><span style="color:Gray">, </span><span style="color:Blue">arguments</span><span style="color:Olive">)</span><span style="color:Gray">;</span></li>
<li><span style="color:Gray">    </span><span style="color:Olive">})</span><span style="color:Gray">;</span></li></ol></div>
<p>静态方法Event.when接受promise参数，可以写出更复杂的依赖关系：</p>
<div><ol title="Double click to hide line number."><li><span style="color:Blue">Event</span><span style="color:Gray">.</span><span style="color:Blue">when</span><span style="color:Olive">(</span></li>
<li><span style="color:Gray">    </span><span style="color:Blue">notify</span><span style="color:Gray">.</span><span style="color:Blue">when</span><span style="color:Olive">(</span><span style="color:#8b0000">&quot;</span><span style="color:Red">msg:A</span><span style="color:#8b0000">&quot;</span><span style="color:Gray">, </span><span style="color:#8b0000">&quot;</span><span style="color:Red">msg:B</span><span style="color:#8b0000">&quot;</span><span style="color:Olive">)</span><span style="color:Gray">, </span></li>
<li><span style="color:Gray">    </span><span style="color:Blue">notify</span><span style="color:Gray">.</span><span style="color:Blue">when</span><span style="color:Olive">(</span><span style="color:#8b0000">&quot;</span><span style="color:Red">click:btn1</span><span style="color:#8b0000">&quot;</span><span style="color:Gray">, </span><span style="color:#8b0000">&quot;</span><span style="color:Red">clicked:btn2</span><span style="color:#8b0000">&quot;</span><span style="color:Olive">)</span><span style="color:Gray">.</span><span style="color:Blue">any</span><span style="color:Olive">()</span></li>
<li><span style="color:Olive">)</span><span style="color:Gray">.</span><span style="color:Blue">then</span><span style="color:Olive">(</span><span style="color:Green">function</span><span style="color:Olive">(</span><span style="color:Blue">args1</span><span style="color:Gray">, </span><span style="color:Blue">args2</span><span style="color:Olive">){</span></li>
<li><span style="color:Gray">    </span><span style="color:#ffa500">// 相当于：&quot;msg:A&quot; &amp;&amp; &quot;msg:B&quot; &amp;&amp; ( &quot;click:btn1&quot; || &quot;clicked:btn2&quot; )</span></li>
<li><span style="color:Gray">    </span><span style="color:Blue">console</span><span style="color:Gray">.</span><span style="color:Blue">warn</span><span style="color:Olive">(</span><span style="color:#8b0000">&quot;</span><span style="color:Red">recieve all messages, click one button</span><span style="color:#8b0000">&quot;</span><span style="color:Gray">, </span><span style="color:Blue">arguments</span><span style="color:Olive">)</span><span style="color:Gray">;</span></li>
<li><span style="color:Olive">})</span><span style="color:Gray">;</span></li></ol></div>
<p><br><br>
测试demo：<a href="https://github.com/dexteryy/OzJS/blob/master/tests/test_event.html">https://github.com/dexteryy/OzJS/blob/master/tests/test_event.html</a><br>
可以在console里观察执行顺序⋯⋯</p>
<p>从这个测试页可以看出我连单元测试都懒得写⋯⋯<br>
<br></p>