---
layout: post
title:  "Javascript的10个设计缺陷"
date:   2011-06-30 12:43:56
author: 
categories: program
---

## Javascript的10个设计缺陷
### by 
### at 2011-06-30 12:43:56
### original <http://www.ruanyifeng.com/blog/2011/06/10_design_defects_in_javascript.html>

<p>前几篇文章，我经常说Javascript的设计不够严谨，有很多失误。</p><p>今天的这一篇，前半部分就谈为什么会这样，后半部分将列举Javascript的10个设计缺陷。</p>

<p>我参考的文献主要是Douglas Crockford的专著<a href="http://oreilly.com/catalog/9780596517748">《Javascript语言精粹》</a>（<em>JavaScript: The Good Parts</em>）和Fredrik Holmström的文章<a href="http://ironjs.wordpress.com/2011/06/22/my-gripes-with-javascript/">《我对Javascript的抱怨》</a>（<em>My gripes with Javascript</em>）。</p>

<p><img src="http://image.beekka.com/blog/201106/bg2011063003.jpg"></p>

<p><strong>一、为什么Javascript有设计缺陷？</strong></p>

<p>这里有三个客观原因，导致Javascript的设计不够完善。</p>

<p><img src="http://image.beekka.com/blog/201106/bg2011063002.jpg"></p>

<p><strong>1. 设计阶段过于仓促</strong></p>

<p>Javascript的设计，其实只用了十天。而且，设计师是为了向公司交差，本人并不愿意这样设计（参见<a href="http://www.ruanyifeng.com/blog/2011/06/birth_of_javascript.html">《Javascript诞生记》</a>）。</p>

<p>另一方面，这种语言的设计初衷，是为了解决一些简单的网页互动（比如，检查"用户名"是否填写），并没有考虑复杂应用的需要。设计者做梦也想不到，Javascript将来可以写出像Gmail这种极其庞大复杂的网页。</p>

<p><strong>2. 没有先例</strong></p>

<p>Javascript同时结合了函数式编程和面向对象编程的特点，这很可能是历史上的第一例。而且直到今天为止，Javascript仍然是世界上唯一使用<a href="http://www.ruanyifeng.com/blog/2011/06/designing_ideas_of_inheritance_mechanism_in_javascript.html">Prototype继承模型</a>的主要语言。这使得它没有设计先例可以参考。</p>

<p><strong>3. 过早的标准化</strong></p>

<p>Javascript的发展非常快，根本没有时间调整设计。</p>

<p>1995年5月，设计方案定稿；10月，解释器开发成功；12月，向市场推出，立刻被广泛接受，全世界的用户大量使用。Javascript缺乏一个从小到大、慢慢积累用户的过程，而是连续的爆炸式扩散增长。大量的既成网页和业余网页设计者的参与，使得调整语言规格困难重重。</p>

<p>更糟的是，Javascript的规格还没来及调整，就固化了。</p>

<p>1996年8月，微软公司强势介入，宣布推出自己的脚本语言Jscript；11月，为了压制微软，网景公司决定申请Javascript的国际标准；1997年6月，第一个国际标准ECMA-262正式颁布。</p>

<p>也就是说，Javascript推出一年半之后，国际标准就问世了。设计缺陷还没有充分暴露就成了标准。相比之下，C语言问世将近20年之后，国际标准才颁布。</p>

<p><strong>二、Javascript的10个设计缺陷</strong></p>

<p><img src="http://image.beekka.com/blog/201106/bg2011063004.jpg"></p>

<p><strong>1. 不适合开发大型程序</strong></p>

<p>Javascript没有名称空间（namespace），很难模块化；没有如何将代码分布在多个文件的规范；允许同名函数的重复定义，后面的定义可以覆盖前面的定义，很不利于模块化加载。</p>

<p><strong>2. 非常小的标准库</strong></p>

<p>Javascript提供的标准函数库非常小，只能完成一些基本操作，很多功能都不具备。</p>

<p><strong>3. null和undefined</strong></p>

<p>null属于对象（object）的一种，意思是该对象为空；undefined则是一种数据类型，表示未定义。</p>

<blockquote>

<p>　　typeof null; // object</p>

<p>　　typeof undefined; // undefined</p>

</blockquote>

<p>两者非常容易混淆，但是含义完全不同。</p>

<blockquote>

<p>　　var foo;</p>

<p>　　alert(foo == null); // true</p>

<p>　　alert(foo == undefined); // true</p>

<p>　　alert(foo === null); // false </p>

<p>　　alert(foo === undefined); // true</p>

</blockquote>

<p>在编程实践中，null几乎没用，根本不应该设计它。</p>

<p><strong>4. 全局变量难以控制</strong></p>

<p>Javascript的全局变量，在所有模块中都是可见的；任何一个函数内部都可以生成全局变量，这大大加剧了程序的复杂性。</p>

<blockquote>

<p>　　a = 1;</p>

<p>　　(function(){</p>

<p>　　　　b=2; </p>

<p>　　　　alert(a);</p>

<p>　　})(); // 1</p>

<p>　　alert(b); //2</p>

</blockquote>

<p><strong>5. 自动插入行尾分号</strong></p>

<p>Javascript的所有语句，都必须以分号结尾。但是，如果你忘记加分号，解释器并不报错，而是为你自动加上分号。有时候，这会导致一些难以发现的错误。</p>

<p>比如，下面这个函数根本无法达到预期的结果，返回值不是一个对象，而是undefined。</p>

<blockquote>

<p>　　function(){</p>

<p>　　　　return<br>
　　　　　　{<br>
　　　　　　　　i=1<br>
　　　　　　};</p>

<p>　　}</p>

</blockquote>

<p>原因是解释器自动在return语句后面加上了分号。</p>

<blockquote>

<p>　　function(){</p>

<p>　　　　<strong>return;</strong><br>
　　　　　　{<br>
　　　　　　　　i=1<br>
　　　　　　};</p>

<p>　　}</p>

</blockquote>

<p><strong>6. 加号运算符</strong></p>

<p>+号作为运算符，有两个含义，可以表示数字与数字的和，也可以表示字符与字符的连接。</p>

<blockquote>

<p>　　alert(1+10); // 11</p>

<p>　　alert("1"+"10"); // 110</p>

</blockquote>

<p>如果一个操作项是字符，另一个操作项是数字，则数字自动转化为字符。</p>

<blockquote>

<p>　　alert(1+"10"); // 110</p>

<p>　　alert("10"+1); // 101</p>

</blockquote>

<p>这样的设计，不必要地加剧了运算的复杂性，完全可以另行设置一个字符连接的运算符。</p>

<p><strong>7. NaN</strong></p>

<p>NaN是一种数字，表示超出了解释器的极限。它有一些很奇怪的特性：</p>

<blockquote>

<p>　　NaN === NaN; //false</p>

<p>　　NaN !== NaN;  //true</p>

<p>　　alert( 1 + NaN ); // NaN</p>

</blockquote>

<p>与其设计NaN，不如解释器直接报错，反而有利于简化程序。</p>

<p><strong>8. 数组和对象的区分</strong></p>

<p>由于Javascript的数组也属于对象（object），所以要区分一个对象到底是不是数组，相当麻烦。<a href="http://javascript.crockford.com/remedial.html">Douglas Crockford</a>的代码是这样的：</p>

<blockquote>

<p>　　if ( arr &amp;&amp; <br>
　　　　typeof arr === &#39;object&#39; &amp;&amp;<br>
　　　　typeof arr.length === &#39;number&#39; &amp;&amp;<br>
　　　　!arr.propertyIsEnumerable('length')){</p>

<p>　　　　alert("arr is an array");</p>

<p>　　}</p>

</blockquote>

<p><strong>9. == 和 ===</strong></p>

<p>==用来判断两个值是否相等。当两个值类型不同时，会发生自动转换，得到的结果非常不符合直觉。</p>

<blockquote>

<p>　　""           ==   "0"           // false</p>

<p>　　0            ==   ""            // true</p>

<p>　　0            ==   "0"           // true</p>

<p>　　false        ==   "false"       // false</p>

<p>　　false        ==   "0"           // true</p>

<p>　　false        ==   undefined     // false</p>

<p>　　false        ==   null          // false</p>

<p>　　null         ==   undefined     // true</p>

<p>　　" \t\r\n"    ==   0             // true</p>

</blockquote>

<p>因此，推荐任何时候都使用"==="（精确判断）比较符。</p>

<p><strong>10. 基本类型的包装对象</strong></p>

<p>Javascript有三种基本数据类型：字符串、数字和布尔值。它们都有相应的建构函数，可以生成字符串对象、数字对象和布尔值对象。</p>

<blockquote>

<p>　　new Boolean(false);</p>

<p>　　new Number(1234);</p>

<p>　　new String("Hello World");</p>

</blockquote>

<p>与基本数据类型对应的对象类型，作用很小，造成的混淆却很大。</p>

<blockquote>

<p>　　alert( typeof 1234); // number</p>

<p>　　alert( typeof new Number(1234)); // object</p>

</blockquote>

<p>关于Javascript的更多怪异行为，请参见<a href="http://bonsaiden.github.com/JavaScript-Garden/zh/">Javascript Garden</a>和<a href="http://wtfjs.com/">wtfjs.com</a>。</p>

<p><strong>三、如何看待Javascript的设计缺陷？</strong></p>

<p><img src="http://image.beekka.com/blog/201106/bg2011063001.jpg"></p>

<p>既然Javascript有缺陷，数量还不少，那么它是不是一种很糟糕的语言？有没有前途？</p>

<p>回答是Javascript并不算糟糕，相反它的编程能力很强大，前途很光明。</p>

<p>首先，如果遵守良好的编程规范，加上第三方函数库的帮助，Javascript的这些缺陷大部分可以回避。</p>

<p>其次，Javascript目前是网页编程的唯一语言，只要互联网继续发展，它就必然一起发展。目前，许多新项目大大扩展了它的用途，<a href="http://nodejs.org/">node.js</a>使得Javascript可以用于后端的服务器编程，<a href="http://jashkenas.github.com/coffee-script/">coffeeScript</a>使你可以用python和ruby的语法，撰写Javascript。</p>

<p>最后，只要发布新版本的语言标准（比如 <a href="http://www.ecma-international.org/publications/standards/Ecma-262.htm">ECMAscript 5</a>），就可以弥补这些设计缺陷。当然，标准的发布和标准的实现是两回事，上述的很多缺陷也许会一直伴随到Javascript存在的最后一天。</p>

<p>（完）<br>
</p><div style="color:#556677;line-height:160%;padding:0.3em 0.5em;border:1px solid #d3d3d3;margin:1em;background-color:#aad2f0;border-radius:10px"><h3>文档信息</h3>
<ul>
<li>版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh">Creative Commons BY-NC-ND 3.0</a></li>
<li>原文网址：<a href="http://www.ruanyifeng.com/blog/2011/06/10_design_defects_in_javascript.html">http://www.ruanyifeng.com/blog/2011/06/10_design_defects_in_javascript.html</a></li>
<li>最后修改时间：2011年7月21日 09:08</li>
<li>付费支持（<a href="http://www.ruanyifeng.com/blog/2011/05/my_google_adsense_is_disabled.html" style="text-decoration:underline">说明</a>）：<a href="https://lab.alipay.com/p.htm?id=2011051700196144"><img src="http://www.ruanyifeng.com/blog/images/rmb_32.png" alt="支付宝担保交易" style="border:none;vertical-align:middle"></a> | <a href="https://www.paypal.com/cgi-bin/webscr?cmd=_xclick&amp;business=yifeng.ruan@gmail.com&amp;currency_code=USD&amp;amount=0.3&amp;return=http://www.ruanyifeng.com/thank.html&amp;item_name=Ruan%20YiFeng&#39;s%20Blog&amp;undefined_quantity=1&amp;no_note=0"><img src="http://www.ruanyifeng.com/blog/images/dollar_32.png" alt="paypal" style="border:none;vertical-align:middle"></a> </li>
</ul></div>