---
layout: post
title:  "Node.js modules you should know about: jsonstream"
date:   2012-01-04 02:42:47
author: Peteris Krumins
categories: program
---

## Node.js modules you should know about: jsonstream
### by Peteris Krumins
### at 2012-01-04 02:42:47
### original <http://feedproxy.google.com/~r/catonmat/~3/X7r_RjoOs6M/nodejs-modules-jsonstream>

<p><iframe src="http://feedads.g.doubleclick.net/~ah/f/d2n91nq9qmj6vqrru8boa895t4/300/250?ca=1&amp;fh=280#http%3A%2F%2Fwww.catonmat.net%2Fblog%2Fnodejs-modules-jsonstream" width="100%" height="280" frameborder="0" scrolling="no" marginwidth="0" marginheight="0"></iframe></p><p><img src="http://www.catonmat.net/images/nodejs-modules/nodejs-logo.png" alt="node logo" align="left">Hello everyone! This is the thirteenth post in the <a href="http://www.catonmat.net/blog/nodejs-modules-dnode/">node.js modules you should know about</a> article series.</p>
<p>The first post was about <a href="http://www.catonmat.net/blog/nodejs-modules-dnode/">dnode</a> - the freestyle rpc library for node, the second was about <a href="http://www.catonmat.net/blog/nodejs-modules-optimist/">optimist</a> - the lightweight options parser for node, the third was about <a href="http://www.catonmat.net/blog/nodejs-modules-lazy/">lazy</a> - lazy lists for node, the fourth was about <a href="http://www.catonmat.net/blog/nodejs-modules-request/">request</a> - the swiss army knife of HTTP streaming, the fifth was about <a href="http://www.catonmat.net/blog/nodejs-modules-hashish/">hashish</a> - hash combinators library, the sixth was about <a href="http://www.catonmat.net/blog/nodejs-modules-read/">read</a> - easy reading from stdin, the seventh was about <a href="http://www.catonmat.net/blog/nodejs-modules-ntwitter/">ntwitter</a> - twitter api for node, the eighth was about <a href="http://www.catonmat.net/blog/nodejs-modules-socketio/">socket.io</a> that makes websockets and realtime possible in all browsers, the ninth was about <a href="http://www.catonmat.net/blog/nodejs-modules-redis/">redis</a> - the best redis client API library for node, the tenth was on <a href="http://www.catonmat.net/blog/nodejs-modules-express/">express</a> - an insanely small and fast web framework for node, the eleventh was <a href="http://www.catonmat.net/blog/nodejs-modules-semver/">semver</a> - a node module that takes care of versioning, the twelfth was <a href="http://www.catonmat.net/blog/nodejs-modules-cradle/">cradle</a> - a high-level, caching, CouchDB client for node.</p>
<p>This time I'll introduce you to a very awesome module called <a href="https://github.com/dominictarr/JSONStream">JSONStream</a>. JSONStream is written by <a href="https://github.com/dominictarr">Dominic Tarr</a> and it parses streaming JSON.</p>
<p>Here is an example. Suppose you have couchdb view like this:</p>
<div><pre><span>{</span><span>&quot;total_rows&quot;</span><span>:</span><span>129</span><span>,</span><span>&quot;offset&quot;</span><span>:</span><span>0</span><span>,</span><span>&quot;rows&quot;</span><span>:</span><span>[</span>
  <span>{</span> <span>&quot;id&quot;</span><span>:</span><span>&quot;change1_0.6995461115147918&quot;</span>
  <span>,</span> <span>&quot;key&quot;</span><span>:</span><span>&quot;change1_0.6995461115147918&quot;</span>
  <span>,</span> <span>&quot;value&quot;</span><span>:</span><span>{</span><span>&quot;rev&quot;</span><span>:</span><span>&quot;1-e240bae28c7bb3667f02760f6398d508&quot;</span><span>}</span>
  <span>,</span> <span>&quot;doc&quot;</span><span>:</span><span>{</span>
      <span>&quot;_id&quot;</span><span>:</span>  <span>&quot;change1_0.6995461115147918&quot;</span>
    <span>,</span> <span>&quot;_rev&quot;</span><span>:</span> <span>&quot;1-e240bae28c7bb3667f02760f6398d508&quot;</span><span>,</span><span>&quot;hello&quot;</span><span>:</span><span>1</span><span>}</span>
  <span>},</span>
  <span>{</span> <span>&quot;id&quot;</span><span>:</span><span>&quot;change2_0.6995461115147918&quot;</span>
  <span>,</span> <span>&quot;key&quot;</span><span>:</span><span>&quot;change2_0.6995461115147918&quot;</span>
  <span>,</span> <span>&quot;value&quot;</span><span>:</span><span>{</span><span>&quot;rev&quot;</span><span>:</span><span>&quot;1-13677d36b98c0c075145bb8975105153&quot;</span><span>}</span>
  <span>,</span> <span>&quot;doc&quot;</span><span>:</span><span>{</span>
      <span>&quot;_id&quot;</span><span>:</span><span>&quot;change2_0.6995461115147918&quot;</span>
    <span>,</span> <span>&quot;_rev&quot;</span><span>:</span><span>&quot;1-13677d36b98c0c075145bb8975105153&quot;</span>
    <span>,</span> <span>&quot;hello&quot;</span><span>:</span><span>2</span>
    <span>}</span>
  <span>},</span>
  <span>...</span>
<span>]}</span>
</pre>
</div>
<p>And you wish to only filter out <code>doc</code> values from the <code>rows</code>. You can do it easily with JSONStream this way:</p>
<div><pre><span>var</span> <span>parser</span> <span>=</span> <span>JSONStream</span><span>.</span><span>parse</span><span>([</span><span>&#39;rows&#39;</span><span>,</span> <span>/./</span><span>,</span> <span>&#39;doc&#39;</span><span>]);</span>
</pre>
</div>
<p>This creates a <a href="http://nodejs.org/docs/latest/api/all.html#streams">stream</a> that parses out <code>rows.*.doc</code>.</p>
<p>Since it's a stream you have to feed it data and then have it output the data somewhere. You can do it very nicely and idiomatically in node this way:</p>
<div><pre><span>req</span><span>.</span><span>pipe</span><span>(</span><span>parser</span><span>).</span><span>pipe</span><span>(</span><span>process</span><span>.</span><span>stdout</span><span>);</span>
</pre>
</div>
<p>Here is the output:</p>
<pre>
{
  _id: 'change1_0.6995461115147918',
  _rev: '1-e240bae28c7bb3667f02760f6398d508',
  hello: 1
}
{
  _id: 'change2_0.6995461115147918',
  _rev: '1-13677d36b98c0c075145bb8975105153',
  hello: 2
}
</pre>
<p>Where <code>req</code> is request to couchdb view and <code>parser</code> is the JSONStream parser, and it all gets piped to process.stdout. The output, as you can see, is only the <code>rows.*.doc</code>. That was a really easy way to parse a JSON stream without reading the whole JSON into memory.</p>
<p>You can install <code>JSONStream</code> through npm as always:</p>
<pre>
npm install JSONStream
</pre>
<p>JSONStream on GitHub: <a href="https://github.com/dominictarr/JSONStream">https://github.com/dominictarr/JSONStream</a>.</p>
<h2>Sponsor this blog series!</h2>
<p>Doing a node.js company and want your ad to appear in the series? The ad will go out to 14,000 rss subscribers, 7,000 email subscribers, and it will get viewed by thousands of my blog visitors! <a href="http://www.catonmat.net/feedback/">Email me</a> and we'll set it up! </p>
<h2>Enjoy!</h2>
<p>If you love these articles, <a href="http://www.catonmat.net/feed/" title="Subscribe to catonmat.net RSS feed">subscribe to my blog</a> for more, <a href="http://twitter.com/pkrumins" title="Peteris Krumins on Twitter">follow me on Twitter</a> to find about my adventures, and <a href="http://github.com/pkrumins" title="Peteris Krumins on GitHub">watch me produce code on GitHub</a>!</p>
<div>
<a href="http://feeds.feedburner.com/~ff/catonmat?a=X7r_RjoOs6M:6dgXlmfj3Lg:yIl2AUoC8zA"><img src="http://feeds.feedburner.com/~ff/catonmat?d=yIl2AUoC8zA" border="0"></a> <a href="http://feeds.feedburner.com/~ff/catonmat?a=X7r_RjoOs6M:6dgXlmfj3Lg:F7zBnMyn0Lo"><img src="http://feeds.feedburner.com/~ff/catonmat?i=X7r_RjoOs6M:6dgXlmfj3Lg:F7zBnMyn0Lo" border="0"></a> <a href="http://feeds.feedburner.com/~ff/catonmat?a=X7r_RjoOs6M:6dgXlmfj3Lg:gIN9vFwOqvQ"><img src="http://feeds.feedburner.com/~ff/catonmat?i=X7r_RjoOs6M:6dgXlmfj3Lg:gIN9vFwOqvQ" border="0"></a> <a href="http://feeds.feedburner.com/~ff/catonmat?a=X7r_RjoOs6M:6dgXlmfj3Lg:XiUCZPyL81w"><img src="http://feeds.feedburner.com/~ff/catonmat?d=XiUCZPyL81w" border="0"></a> <a href="http://feeds.feedburner.com/~ff/catonmat?a=X7r_RjoOs6M:6dgXlmfj3Lg:DhrJZwOgkxs"><img src="http://feeds.feedburner.com/~ff/catonmat?d=DhrJZwOgkxs" border="0"></a>
</div><img src="http://feeds.feedburner.com/~r/catonmat/~4/X7r_RjoOs6M" height="1" width="1">