---
layout: post
title:  "jscex 原理探析"
date:   2010-12-27 21:37:13
author: Belleve Invis
categories: program
---

## jscex 原理探析
### by Belleve Invis
### at 2010-12-27 21:37:13
### original <http://typeof.net/2010/12/a-simple-study-on-jscex-mechanism/>

<p>这是我第一次给别人的类库写文章，说实话，用 Lofn 中的阻塞原语生成的代码可不是很容易看懂（虽然代码很好写……），相比之下，<a href="http://blog.zhaojie.me">老赵</a> 的 <a href="https://github.com/JeffreyZhao/jscex">jscex</a> 要好用得多。虽然 jscex 还没有完成（很多语法都处理不了），不过呢，第一，他已经大致能投入使用；第二，说说总比没有好，而且这个很有潜力的东西还是需要来推荐的。</p>

<p>相信无数的 JSER 都有过这样的经历，动画，然后用 while 循环来做，结果在浏览器卡了一小会有，要运动的元素直接蹦到目标位置上去了。于是，不解，论坛提问，然后查 <code>setTimeout</code> 和 <code>setInterval</code> 的案例，无数挫折后终于成功。jscex 给他们带来了曙光：只需要写个循环，循环里放个定时器回调，接下来一切事情由 jscex 解决。然后——哇，动起来了耶！</p>
<span></span>
<p>嘛，先看案例：</p>

<pre><span>var</span> <span>moveAsync</span> <span>=</span> <span>eval</span><span>(</span><span>Jscex</span><span>.</span><span>compile</span><span>(</span><span>"$async"</span><span>,</span> <span>function</span><span>(</span><span>e</span><span>,</span> <span>startPos</span><span>,</span> <span>endPos</span><span>,</span> <span>duration</span><span>)</span> <span>{</span>
    <span>for</span> <span>(</span><span>var</span> <span>t</span> <span>=</span> <span>0</span><span>;</span> <span>t</span> <span>&lt;</span> <span>duration</span><span>;</span> <span>t</span> <span>+</span><span>=</span> <span>50</span><span>)</span> <span>{</span>
        <span>e</span><span>.</span><span>style</span><span>.</span><span>left</span> <span>=</span> <span>startPos</span><span>.</span><span>x</span> <span>+</span> <span>(</span><span>endPos</span><span>.</span><span>x</span> <span>-</span> <span>startPos</span><span>.</span><span>x</span><span>)</span> <span>*</span> <span>(</span><span>t</span> <span>/</span> <span>duration</span><span>)</span><span>;</span>
        <span>e</span><span>.</span><span>style</span><span>.</span><span>top</span> <span>=</span> <span>startPos</span><span>.</span><span>y</span> <span>+</span> <span>(</span><span>endPos</span><span>.</span><span>y</span> <span>-</span> <span>startPos</span><span>.</span><span>y</span><span>)</span> <span>*</span> <span>(</span><span>t</span> <span>/</span> <span>duration</span><span>)</span><span>;</span>
        <span>$await</span><span>(</span><span>Jscex</span><span>.</span><span>Async</span><span>.</span><span>sleep</span><span>(</span><span>50</span><span>)</span><span>)</span><span>;</span>
    <span>}</span>

    <span>e</span><span>.</span><span>style</span><span>.</span><span>left</span> <span>=</span> <span>endPos</span><span>.</span><span>x</span><span>;</span>
    <span>e</span><span>.</span><span>style</span><span>.</span><span>top</span> <span>=</span> <span>endPos</span><span>.</span><span>y</span><span>;</span>
<span>}</span><span>)</span><span>)</span><span>;</span></pre>

<div>
ps.
等价的 lofn 阻塞原语代码


<pre><span>using</span> <span>async</span><span>,</span> <span>sleep</span> <span>in</span> <span>library</span> <span>"async"</span><span>;</span>
<span>using</span> <span>asynchronous</span> <span>as</span> <span>async</span><span>;</span>
<span>var</span> <span>moveAsync</span> <span>=</span> <span>asynchronous</span> <span>function</span><span>(</span><span>e</span><span>,</span> <span>startPos</span><span>,</span> <span>endPos</span><span>,</span> <span>duration</span><span>)</span><span>:</span>
    <span>for</span><span>(</span><span>var</span> <span>t</span> <span>=</span> <span>0</span><span>;</span> <span>t</span> <span>&lt;</span> <span>duration</span><span>;</span> <span>t</span> <span>+=</span> <span>50</span><span>)</span><span>:</span>
        <span>e</span><span>.</span><span>style</span><span>.</span><span>left</span> <span>=</span> <span>..</span><span>.</span><span>;</span>
        <span>e</span><span>.</span><span>style</span><span>.</span><span>top</span> <span>=</span> <span>..</span><span>.</span><span>;</span>
        <span>await</span><span>..</span> <span>sleep</span> <span>50</span><span>;</span>
    <span>end</span><span>;</span>

    <span>e</span><span>.</span><span>style</span><span>.</span><span>left</span> <span>=</span> <span>endPos</span><span>.</span><span>x</span><span>;</span>
    <span>e</span><span>.</span><span>style</span><span>.</span><span>top</span> <span>=</span> <span>endPos</span><span>.</span><span>y</span><span>;</span>
<span>end</span></pre>

</div>

<p>和 lofn 的阻塞原语不同，jscex 生成的代码采用所谓“Monad”的技术，或者说是基于任务的异步模型。整个异步函数会被拆解成若干个任务，回调嵌入回调。只是，原来写 N 层回调的工作现在由编译器完成，不用人肉折磨。看看上面那段代码经过 jscex 倒腾过的结果：</p>

<pre><span>function</span><span>(</span><span>e</span><span>,</span> <span>startPos</span><span>,</span> <span>endPos</span><span>,</span> <span>duration</span><span>)</span> <span>{</span>
    <span>return</span> <span>$async</span><span>.</span><span>Start</span><span>(</span><span>this</span><span>,</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
        <span>return</span> <span>$async</span><span>.</span><span>Combine</span><span>(</span>
            <span>$async</span><span>.</span><span>Delay</span><span>(</span><span>function</span><span>(</span><span>)</span> <span>{</span>
                <span>var</span> <span>t</span> <span>=</span> <span>0</span><span>;</span>
                <span>return</span> <span>$async</span><span>.</span><span>Loop</span><span>(</span>
                    <span>function</span><span>(</span><span>)</span> <span>{</span> <span>return</span> <span>t</span> <span>&lt;</span> <span>duration</span><span>;</span> <span>}</span><span>,</span>
                    <span>function</span><span>(</span><span>)</span> <span>{</span> <span>t</span> <span>+</span><span>=</span> <span>50</span><span>;</span> <span>}</span><span>,</span>
                    <span>$async</span><span>.</span><span>Delay</span><span>(</span><span>function</span><span>(</span><span>)</span> <span>{</span>
                        <span>e</span><span>.</span><span>style</span><span>.</span><span>left</span> <span>=</span> <span>startPos</span><span>.</span><span>x</span> <span>+</span> <span>(</span><span>endPos</span><span>.</span><span>x</span> <span>-</span> <span>startPos</span><span>.</span><span>x</span><span>)</span> <span>*</span> <span>t</span> <span>/</span> <span>duration</span><span>;</span>
                        <span>e</span><span>.</span><span>style</span><span>.</span><span>top</span> <span>=</span> <span>startPos</span><span>.</span><span>y</span> <span>+</span> <span>(</span><span>endPos</span><span>.</span><span>y</span> <span>-</span> <span>startPos</span><span>.</span><span>y</span><span>)</span> <span>*</span> <span>t</span> <span>/</span> <span>duration</span><span>;</span>
                        <span>return</span> <span>$async</span><span>.</span><span>Bind</span><span>(</span><span>Jscex</span><span>.</span><span>Async</span><span>.</span><span>sleep</span><span>(</span><span>50</span><span>)</span><span>,</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
                            <span>return</span> <span>$async</span><span>.</span><span>Normal</span><span>(</span><span>)</span><span>;</span>
                        <span>}</span><span>)</span><span>;</span>
                    <span>}</span><span>)</span>
                <span>)</span><span>;</span>
            <span>}</span><span>)</span><span>,</span>
            <span>$async</span><span>.</span><span>Delay</span><span>(</span><span>function</span><span>(</span><span>)</span> <span>{</span>
                <span>e</span><span>.</span><span>style</span><span>.</span><span>left</span> <span>=</span> <span>endPos</span><span>.</span><span>x</span><span>;</span>
                <span>e</span><span>.</span><span>style</span><span>.</span><span>top</span> <span>=</span> <span>endPos</span><span>.</span><span>y</span><span>;</span>
                <span>return</span> <span>$async</span><span>.</span><span>Normal</span><span>(</span><span>)</span><span>;</span>
            <span>}</span><span>)</span>
        <span>)</span><span>;</span>
    <span>}</span><span>)</span><span>;</span>
<span>}</span><span>;</span></pre>

<p>这是那个 <code>MoveAsync</code> 函数应该有的样子，谢天谢地，我们有 jscex，否则肯定会被这一对 <code>function</code> 给搞晕死！</p>

<p>异步编程向来很难，这是真话，在几乎所有的语言/平台上，我们都必须面对成堆的回调，把原本清晰的流程拆的七零八落，因为异步程序通常是：先通知某个对象“我要点东西，你给我搞来”，然后——总不能就这样挂着吧！哦，于是，回调：在用 AJAX 的时候，我们是注册 <code>onreadystatechange</code>；在等用户反应的时候，我们用 <code>onclick</code>。用上这些事件的代码大致是这样：</p>

<pre><span>// ......</span>
<span>someobj</span><span>.</span><span>onsuccess</span> <span>=</span> <span>function</span><span>(</span><span>data</span><span>)</span><span>{</span>
    <span>process</span><span>(</span><span>data</span><span>)</span>
<span>}</span><span>;</span>
<span>someobj</span><span>.</span><span>getData</span><span>(</span><span>)</span></pre>

<p>嗯，世界可没有那么美好，于是乎加上失败处理的代码：</p>

<pre><span>// ......</span>
<span>someobj</span><span>.</span><span>onsuccess</span> <span>=</span> <span>function</span><span>(</span><span>data</span><span>)</span><span>{</span>
    <span>process</span><span>(</span><span>data</span><span>)</span>
<span>}</span><span>;</span>
<span>someobj</span><span>.</span><span>onfail</span> <span>=</span> <span>function</span><span>(</span><span>)</span><span>{</span>
    <span>alert</span><span>(</span><span>"Fail!"</span><span>)</span>
<span>}</span>
<span>someobj</span><span>.</span><span>getData</span><span>(</span><span>{</span><span>timeout</span><span>:</span> <span>3000</span><span>}</span><span>)</span></pre>

<p>不过我们想要的是这样的代码：</p>

<pre><span>var</span> <span>data</span> <span>=</span> <span>someobj</span><span>.</span><span>getData</span><span>(</span><span>{</span><span>timeout</span><span>:</span> <span>3000</span><span>}</span><span>)</span><span>;</span>
<span>if</span><span>(</span><span>data</span><span>)</span><span>{</span>
    <span>process</span><span>(</span><span>data</span><span>)</span>
<span>}</span></pre>

<p>问题的核心在于，<code>someobj.getData</code> 不能在当前的流程中形成阻塞，因为只是通知了 <code>someobj</code> “要个东西”，就忽闪而过了。上面的代码只是个很简单的案例，想一下，如果你要在一个循环中放上这样的 <code>someobj.getData</code>，逐个获取数据然后处理，那个复杂度，呵呵……</p>

<p>我们希望的是，能够用某种方法来让一个流程从中间暂停（至少要长得像是暂停），然后在某个时候继续。在一些语言（比如 lua）里面叫做协同例程。协同例程里面用 <code>coroutine.yield()</code> 就可以把它自己挂起，然后等外界消息。C# 提供的迭代器（<code>yield</code>）也有相同的功效，虽然要弱一点。</p>

<p>可惜，JavaScript 没有这种东西，我们不能在函数执行到半截的时候把它挂起，然后等到某个合适的时候继续。</p>

<p>遇到异步问题的可不是只有我和老赵，一个叫 Jasmine 的测试框架也遇到了异步的问题，他们的方法是用 DSL（源码来自官网）：</p>

<pre><span>describe</span><span>(</span><span>'Spreadsheet'</span><span>,</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
    <span>it</span><span>(</span><span>'should calculate the total asynchronously'</span><span>,</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>
        <span>var</span> <span>spreadsheet</span> <span>=</span> <span>new</span> <span>Spreadsheet</span><span>(</span><span>)</span><span>;</span>
        <span>spreadsheet</span><span>.</span><span>fillWith</span><span>(</span><span>lotsOfFixureDataValues</span><span>(</span><span>)</span><span>)</span><span>;</span>
        <span>spreadsheet</span><span>.</span><span>asynchronouslyCalculateTotal</span><span>(</span><span>)</span><span>;</span>

        <span>waitsFor</span><span>(</span><span>function</span><span>(</span><span>)</span> <span>{</span>
            <span>return</span> <span>spreadsheet</span><span>.</span><span>calculationIsComplete</span><span>(</span><span>)</span><span>;</span>
        <span>}</span><span>,</span> <span>"Spreadsheet calculation never completed"</span><span>,</span> <span>10000</span><span>)</span><span>;</span>

        <span>runs</span><span>(</span><span>function</span> <span>(</span><span>)</span> <span>{</span>
            <span>expect</span><span>(</span><span>spreadsheet</span><span>.</span><span>total</span><span>)</span><span>.</span><span>toEqual</span><span>(</span><span>123456</span><span>)</span><span>;</span>
        <span>}</span><span>)</span><span>;</span>
    <span>}</span><span>)</span><span>;</span>
<span>}</span><span>)</span><span>;</span></pre>

<p>这样的处理方法不错，事实上，在我还没有给 lofn 做阻塞原语的时候，我也想过这样的代码：（我使用了 lofn 的惯用法：柯里化而非多参数）</p>

<pre><span>describe</span><span>(</span><span>"Spradsheet"</span><span>)</span> <span>{</span>
    <span>it</span><span>(</span><span>"should aclculate the total asynchronously"</span><span>)</span> <span>asynchronous</span> <span>{</span>
        <span>var</span> <span>speadsheet</span><span>;</span>
        <span>@</span><span>run</span> <span>{</span>
            <span>spradsheet</span> <span>=</span> <span>new</span> <span>Spradsheet</span><span>;</span>
            <span>spradsheet</span><span>.</span><span>fillWith</span> <span>lotsOfFixureDataValues</span><span>(</span><span>)</span><span>;</span>
            <span>spradsheet</span><span>.</span><span>asynchronouslyCalculateTotal</span><span>(</span><span>)</span><span>;</span>
        <span>}</span>

        <span>@</span><span>waits</span> <span>spradSheet</span><span>.</span><span>calculationIsComplete</span><span>,</span> 
            <span>timeout</span><span>:</span> <span>10000</span><span>,</span> 
            <span>onTimeout</span><span>:</span> <span>"Spradsheet calculation never completed"</span>

        <span>@</span><span>run</span> <span>{</span>
            <span>expect</span><span>(</span><span>wpradSheet</span><span>.</span><span>total</span><span>)</span><span>.</span><span>toEqual</span> <span>123456</span>
        <span>}</span>
    <span>}</span>
<span>}</span></pre>

<p>首先，DSL 设计的自由度很大，不同人可能有不同的“DSL 接口”，相互之间难以互通（“倒腾”）；其次，这代码还是被无数的 <code>function</code> 拆的七零八落，感觉还是不爽。</p>

<p>这时候，老赵横空出世，带着他高超的编译器技术来拯救人类！他的想法是：因为 JavaScript 本身动态性极强，语义分析可以说是天方夜谭，那痛苦自然难以避免。但是让人的痛苦减少到最低，总没坏处吧！于是他的 jscex 有这样的约定：</p>

<ul>
<li>用一个特殊的“关键字”（在异步调用中，是 <code>$await</code>）表示可能“有事情”（在异步调用中就是阻塞）的操作</li>
<li>用编译器把普通函数转换为类似 DSL 的形式</li>
</ul>

<p>jscex 的基本部分称为任务（虽然源码中没有显式出现这个词），一个任务的范式如下：</p>

<pre><span>aTask</span> <span>=</span> <span>{</span>
    <span>start</span><span>:</span> <span>function</span><span>(</span><span>callback</span><span>)</span><span>{</span>
        <span>.</span><span>.</span><span>.</span><span>.</span><span>.</span><span>.</span>
        <span>callback</span><span>(</span><span>result</span><span>)</span>
    <span>}</span><span>)</span>
<span>}</span></pre>

<p><code>start</code> 方法接受一个函数作为回调，在捣腾一番之后调用这个回调。注意，回调只会调用一次，而且调用完，就称任务 <strong>完成</strong> 了，这个任务接下来的命运就是析构。下面是一个简单的任务实现：延迟调用回调 n 毫秒：</p>

<pre><span>var</span> <span>sleep</span> <span>=</span> <span>function</span><span>(</span><span>dur</span><span>)</span><span>{</span>
    <span>return</span> <span>{</span>
        <span>start</span><span>:</span> <span>function</span><span>(</span><span>callback</span><span>)</span><span>{</span>
            <span>setTimeout</span><span>(</span><span>function</span><span>(</span><span>)</span><span>{</span>
                <span>callback</span><span>(</span><span>)</span>
            <span>}</span><span>,</span> <span>dur</span><span>)</span>
        <span>}</span>
    <span>}</span>
<span>}</span>

<span>// 使用</span>
<span>sleep</span><span>(</span><span>1000</span><span>)</span><span>.</span><span>start</span><span>(</span><span>function</span><span>(</span><span>)</span><span>{</span>
    <span>.</span><span>.</span><span>.</span><span>.</span><span>.</span><span>.</span>
<span>}</span><span>)</span><span>;</span></pre>

<p>既然有了这个简单的范式，自然可以想到，连续执行两个任务可以这样写（我实在是看不惯 continuus，所以 mizpell 回）：</p>

<pre><span>var</span> <span>continus</span> <span>=</span> <span>function</span><span>(</span><span>a</span><span>,</span> <span>b</span><span>)</span><span>{</span>
    <span>return</span> <span>{</span>
        <span>start</span><span>:</span> <span>function</span><span>(</span><span>callback</span><span>)</span><span>{</span>
            <span>a</span><span>.</span><span>start</span><span>(</span><span>function</span><span>(</span><span>)</span><span>{</span>
                <span>b</span><span>.</span><span>start</span><span>(</span><span>callback</span><span>)</span>
            <span>}</span><span>)</span>
        <span>}</span>
    <span>}</span>
<span>}</span></pre>

<p>Hmmmm，不难理解吧。类似的还可以做循环，用递归实现：</p>

<pre><span>var</span> <span>loopWhile</span> <span>=</span> <span>function</span><span>(</span><span>conditionF</span><span>,</span> <span>t</span><span>)</span><span>{</span>
    <span>var</span> <span>loop</span> <span>=</span> <span>{</span>
        <span>start</span><span>:</span> <span>function</span><span>(</span><span>callback</span><span>)</span><span>{</span>
            <span>if</span><span>(</span><span>!</span><span>conditionF</span><span>(</span><span>)</span><span>)</span>
                <span>callback</span><span>(</span><span>)</span>
            <span>else</span>
                <span>t</span><span>.</span><span>start</span><span>(</span><span>function</span><span>(</span><span>)</span><span>{</span>
                    <span>loop</span><span>.</span><span>start</span><span>(</span><span>)</span>
                <span>}</span><span>)</span>
        <span>}</span>
    <span>}</span><span>;</span>
    <span>return</span> <span>loop</span><span>;</span>
<span>}</span></pre>

<p>这里假定 <code>conditionF</code> 是个简单的函数，不是任务。好吧，其实要是任务也很好做，这里利用了任务回调的回传：</p>

<pre><span>var</span> <span>loopWhile</span> <span>=</span> <span>function</span><span>(</span><span>condition</span><span>,</span> <span>body</span><span>)</span><span>{</span>
    <span>var</span> <span>loop</span> <span>=</span> <span>{</span>
        <span>start</span><span>:</span> <span>function</span><span>(</span><span>callback</span><span>)</span><span>{</span>
            <span>condition</span><span>.</span><span>start</span><span>(</span><span>function</span><span>(</span><span>continueQ</span><span>)</span><span>{</span>
                <span>if</span><span>(</span><span>conditionQ</span><span>)</span>
                    <span>body</span><span>.</span><span>start</span><span>(</span><span>function</span><span>(</span><span>)</span><span>{</span>
                        <span>loop</span><span>.</span><span>start</span><span>(</span><span>callback</span><span>)</span>
                    <span>}</span><span>)</span>
                <span>else</span>
                    <span>callback</span><span>(</span><span>)</span>
            <span>}</span><span>)</span>
        <span>}</span>
    <span>}</span><span>;</span>
    <span>return</span> <span>loop</span><span>;</span>
<span>}</span></pre>

<p>为了增加任务的种类，这里做一个不像任务的任务：<code>immediate</code>，他的作用是“执行函数；然后执行回调，没有任何延迟”：</p>

<pre><span>var</span> <span>immediate</span> <span>=</span> <span>function</span><span>(</span><span>f</span><span>)</span><span>{</span>
    <span>return</span> <span>{</span>
        <span>start</span><span>:</span> <span>function</span><span>(</span><span>callback</span><span>)</span><span>{</span>
            <span>callback</span><span>(</span><span>f</span><span>(</span><span>)</span><span>)</span>
        <span>}</span>
    <span>}</span>
<span>}</span></pre>

<p>现在我们可以去对付最开始的案例了，不过呢，先考虑下最简单的状况吧：显示 <code>1</code>、<code>2</code> 和 <code>3</code>，间隔一秒。假定显示用 <code>display</code> 函数完成，在平常，用裸的 <code>setTimeout</code> 怎么做呢？嗯：</p>

<pre><span>var</span> <span>play</span> <span>=</span> <span>function</span><span>(</span><span>)</span><span>{</span>
    <span>display</span><span>(</span><span>1</span><span>)</span><span>;</span>
    <span>setTimeout</span><span>(</span><span>function</span><span>(</span><span>)</span><span>{</span>
        <span>display</span><span>(</span><span>2</span><span>)</span><span>;</span>
        <span>setTimeout</span><span>(</span><span>function</span><span>(</span><span>)</span><span>{</span>
            <span>display</span><span>(</span><span>3</span><span>)</span><span>;</span>
        <span>}</span><span>,</span> <span>1000</span><span>)</span>
    <span>}</span><span>,</span> <span>1000</span><span>)</span>
<span>}</span></pre>

<p>在使用了上面的任务范式后，代码是这样：</p>

<pre><span>var</span> <span>play</span> <span>=</span> <span>function</span><span>(</span><span>)</span><span>{</span>
    <span>continus</span><span>(</span><span>immediate</span><span>(</span><span>function</span><span>(</span><span>)</span><span>{</span><span>display</span><span>(</span><span>1</span><span>)</span><span>}</span><span>)</span><span>,</span>
        <span>continus</span><span>(</span><span>sleep</span><span>(</span><span>1000</span><span>)</span><span>,</span>
            <span>continus</span><span>(</span><span>immediate</span><span>(</span><span>function</span><span>(</span><span>)</span><span>{</span><span>display</span><span>(</span><span>2</span><span>)</span><span>}</span><span>)</span><span>,</span>
                <span>continus</span><span>(</span><span>sleep</span><span>(</span><span>1000</span><span>)</span><span>,</span>
                    <span>immediate</span><span>(</span><span>function</span><span>(</span><span>)</span><span>{</span><span>display</span><span>(</span><span>3</span><span>)</span><span>}</span><span>)</span> <span>)</span> <span>)</span> <span>)</span> <span>)</span><span>.</span><span>start</span><span>(</span><span>function</span><span>(</span><span>)</span><span>{</span><span>}</span><span>)</span><span>;</span>
<span>}</span></pre>

<div>
ps.
现在是看到 lofn 好处的时候了


<pre><span>var</span> <span>play</span> <span>=</span> <span>function</span><span>:</span>
    <span>continus</span><span>(</span><span>immediate</span> <span>{</span><span>display</span> <span>1</span><span>}</span><span>,</span>
        <span>continus</span><span>(</span><span>sleep</span> <span>1000</span><span>,</span> 
            <span>continus</span><span>(</span><span>immediate</span> <span>{</span><span>display</span> <span>2</span><span>}</span><span>,</span>
                <span>continus</span><span>(</span> <span>sleep</span> <span>1000</span><span>,</span>
                    <span>immediate</span> <span>{</span><span>display</span> <span>3</span><span>}</span> <span>)</span> <span>)</span> <span>)</span> <span>)</span><span>.</span><span>start</span><span>(</span><span>function</span><span>{</span><span>}</span><span>)</span>
<span>end</span></pre>

</div>

<p>我了个去，这代码还复杂了呢，但是别看嵌套层数变大了，代码的“熵”（混乱度）实际上下降了。这种代码更适合用机器生成：jscex 就是生成这种代码（虽然具体细节不同）。而且这种长得很 lisp 的代码没有所谓的“数学的美感”吗？</p>

<p>好，上面的案例是一个异步方法“最应该有”的样子，不过显然可以优化。有没有感觉到最后那个小尾巴（<code>.start(function(){})</code>）很难看？确实，这个小尾巴很难看，而且怎么说也应该放在外面吧。然后，众多的 <code>immediate</code> 仍然很别扭。此外，我们真实写的代码肯定有复杂的控制流程——至少说得实现 <code>return</code> 吧，就是随时停止整个流程。</p>

<p>所以，前面任务的 <code>callback</code> 就要重构，参数从一个改成两个，第一个是流程状态：</p>

<pre><span>var</span> <span>NORMAL</span> <span>=</span> <span>0</span><span>;</span>
<span>var</span> <span>RETURN</span> <span>=</span> <span>1</span><span>;</span></pre>

<p>然后对应修改 <code>continus</code> 和 <code>immediate</code>：</p>

<pre><span>var</span> <span>continus</span> <span>=</span> <span>function</span><span>(</span><span>a</span><span>,</span> <span>b</span><span>)</span><span>{</span>
    <span>return</span> <span>{</span>
        <span>start</span><span>:</span> <span>function</span><span>(</span><span>callback</span><span>)</span><span>{</span>
            <span>a</span><span>.</span><span>start</span><span>(</span><span>function</span><span>(</span><span>phase</span><span>)</span><span>{</span>
                <span>if</span><span>(</span><span>phase</span> <span>==</span> <span>NORMAL</span><span>)</span>
                    <span>b</span><span>.</span><span>start</span><span>(</span><span>callback</span><span>)</span>
                <span>else</span>
                    <span>callback</span><span>.</span><span>apply</span><span>(</span><span>this</span><span>,</span> <span>arguments</span><span>)</span>
            <span>}</span><span>)</span>
        <span>}</span>
    <span>}</span>
<span>}</span>

<span>var</span> <span>immediate</span> <span>=</span> <span>function</span><span>(</span><span>f</span><span>)</span><span>{</span>
    <span>return</span> <span>{</span>
        <span>start</span><span>:</span> <span>function</span><span>(</span><span>callback</span><span>)</span><span>{</span>
            <span>callback</span><span>(</span><span>NORMAL</span><span>,</span> <span>f</span><span>(</span><span>)</span><span>)</span>
        <span>}</span>
    <span>}</span>
<span>}</span></pre>

<p><code>loopWhile</code> 也可以同样修改：</p>

<pre><span>var</span> <span>loopWhile</span> <span>=</span> <span>function</span><span>(</span><span>condition</span><span>,</span> <span>body</span><span>)</span><span>{</span>
    <span>var</span> <span>loop</span> <span>=</span> <span>{</span>
        <span>start</span><span>:</span> <span>function</span><span>(</span><span>callback</span><span>)</span><span>{</span>
            <span>condition</span><span>.</span><span>start</span><span>(</span><span>function</span><span>(</span><span>phase</span><span>,</span> <span>continueQ</span><span>)</span><span>{</span>
                <span>if</span><span>(</span><span>phaseQ</span> <span>===</span> <span>NORMAL</span> <span>&amp;&amp;</span> <span>conditionQ</span><span>)</span>
                    <span>body</span><span>.</span><span>start</span><span>(</span><span>function</span><span>(</span><span>phase</span><span>)</span><span>{</span>
                        <span>if</span><span>(</span><span>phase</span> <span>===</span> <span>NORMAL</span><span>)</span>
                            <span>loop</span><span>.</span><span>start</span><span>(</span><span>callback</span><span>)</span>
                        <span>else</span>
                            <span>callback</span><span>.</span><span>apply</span><span>(</span><span>this</span><span>,</span> <span>arguments</span><span>)</span>
                    <span>}</span><span>)</span>
                <span>else</span>
                    <span>callback</span><span>.</span><span>apply</span><span>(</span><span>this</span><span>,</span> <span>arguments</span><span>)</span>
            <span>}</span><span>)</span>
        <span>}</span>
    <span>}</span><span>;</span>
    <span>return</span> <span>loop</span><span>;</span>
<span>}</span></pre>

<p>解决问题要紧，就先不考虑什么异常、<code>break</code> 的问题了。为了消除 <code>immediate</code>，接下来是一个叫 <code>bind</code> 的函数，他是 <code>continus</code> 的变体，但是比 <code>continus</code> 有用得多：</p>

<pre><span>// 定义</span>
<span>var</span> <span>bind</span> <span>=</span> <span>function</span><span>(</span><span>t</span><span>,</span> <span>g</span><span>)</span><span>{</span>
    <span>return</span> <span>continus</span><span>(</span><span>t</span><span>,</span> <span>g</span><span>(</span><span>)</span><span>)</span>
<span>}</span></pre>

<p>做一个辅助函数 <code>Normal</code>：</p>

<pre><span>var</span> <span>Normal</span> <span>=</span> <span>function</span><span>(</span><span>)</span><span>{</span>
    <span>return</span> <span>{</span>
        <span>start</span><span>:</span> <span>function</span><span>(</span><span>callback</span><span>)</span><span>{</span>
            <span>callback</span><span>(</span><span>NORMAL</span><span>)</span>
        <span>}</span>
    <span>}</span>
<span>}</span></pre>

<p>可以推导：</p>

<pre>immediate(f) === continus(immediate(f), Normal())
continus(t1, continus(immediate(f), t2) === bind(t1, function(){f(); return t2})
</pre>

<p>哈，这回里层的 <code>immediate</code> 彻底消失了！最外层的 <code>immediate</code> 也可以类似处理：</p>

<pre><span>var</span> <span>flow</span> <span>=</span> <span>function</span><span>(</span><span>g</span><span>)</span><span>{</span>
    <span>var</span> <span>t</span> <span>=</span> <span>g</span><span>(</span><span>)</span><span>;</span>
    <span>return</span> <span>{</span>
        <span>start</span><span>:</span> <span>function</span><span>(</span><span>callback</span><span>)</span><span>{</span>
            <span>t</span><span>.</span><span>start</span><span>(</span><span>callback</span><span>)</span>
        <span>}</span>
    <span>}</span>
<span>}</span>
<span>// 众人回应：直接 return g() 不就行了吗！</span></pre>

<p>因此，前面的案例 <code>play</code> 就可以写成：</p>

<pre><span>var</span> <span>play</span> <span>=</span> <span>flow</span><span>(</span><span>function</span><span>(</span><span>)</span><span>{</span>
    <span>display</span><span>(</span><span>1</span><span>)</span><span>;</span>
    <span>return</span> <span>bind</span><span>(</span><span>sleep</span><span>(</span><span>1000</span><span>)</span><span>,</span> <span>function</span><span>(</span><span>)</span><span>{</span>
        <span>display</span><span>(</span><span>2</span><span>)</span><span>;</span>
        <span>return</span> <span>bind</span><span>(</span><span>sleep</span><span>(</span><span>1000</span><span>)</span><span>,</span> <span>function</span><span>(</span><span>)</span><span>{</span>
            <span>display</span><span>(</span><span>3</span><span>)</span>
            <span>return</span> <span>Normal</span><span>(</span><span>)</span>
        <span>}</span><span>)</span>
    <span>}</span><span>)</span>
<span>}</span><span>)</span>

<span>play</span><span>(</span><span>)</span><span>.</span><span>start</span><span>(</span><span>)</span></pre>

<p>呼，代码清爽多了。</p>

<p>以上所写的这一些就是 jscex 的内核。下面比较下两者：</p>

<table><tr><th>案例        </th><th>  jscex</th></tr><tr><td><code>bind</code>      </td><td>  <code>Binder.bind</code></td></tr><tr><td><code>continus</code>  </td><td>  <code>Binder.Combine</code></td></tr><tr><td><code>flow</code>      </td><td>  <code>Binder.Delay</code>、<code>Binder.Start</code> （后者处理 <code>this</code> 指针的问题）</td></tr><tr><td><code>loopWhile</code> </td><td>  <code>Binder.Loop</code></td></tr><tr><td></td></tr></table>

<p>可以看出，jscex 的 <code>Binder</code> 是一个更加灵活的方案。我所写的案例只是对 jscex 模型一个很粗略的模仿。jscex 通过 Narcissus 来解析已有的 js 代码，然后编译成使用了 <code>Binder</code> 的形式。jscex 源码中还包括了对 <code>this</code> 指针的处理、<code>break</code> 语句（在 <code>Binder.Loop</code>/<code>loopWhile</code> 里面加几个分支判断）、简单的异常，等等。</p>

<p>在最后，即使 jscex 现在还没有完成，但他仍然是很有潜力的。听说 <a href="http://lifesinger.org:">lifesinger</a> 也在做 async，还要用所谓的“新方法”，等时候到了写横评吧。</p>