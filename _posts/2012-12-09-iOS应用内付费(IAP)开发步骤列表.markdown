---
layout: post
title:  "iOS应用内付费(IAP)开发步骤列表"
date:   2012-12-09 12:55:00
author: 
categories: program
---

## iOS应用内付费(IAP)开发步骤列表
### by 
### at 2012-12-09 12:55:00
### original <http://blog.devtang.com/blog/2012/12/09/in-app-purchase-check-list/>

<p>前两天和服务端同事一起，完成了应用内付费（以下简称IAP, In app purchase）的开发工作。步骤繁多，在此把开发步骤列表整理如下。因为只是步骤列表，所以并不含详细的说明教程，需要看教程的新手，可以看我附在最后的一些参考链接。</p>




<h3>配置Developer.apple.com</h3>

<p>登录到<a href="https://developer.apple.com/">Developer.apple.com</a>，然后进行以下步骤：</p>

<ol>
<li>为应用建立建立一个不带通配符的App ID</li>
<li>用该App ID生成和安装相应的Provisioning Profile文件。</li>
</ol>


<h3>配置iTunes Connect</h3>

<p>登录到<a href="https://itunesconnect.apple.com/">iTunes Connet</a>，然后进行以下步骤：</p>

<ol>
<li>用该App ID创建一个新的应用。</li>
<li><p>在该应用中，创建应用内付费项目，选择付费类型，通常可选的是可重复消费(Consumable)的或是永久有效(Non-Consumable)的2种，然后设置好价格和Product ID以及购买介绍和截图即可，这里的Product ID是需要记住的，后面开发的时候需要。如下图所示：
<img src="http://blog.devtang.com/images/iap-add-product-id.png"></p></li>
<li><p>添加一个用于在sandbox付费的测试用户，如下图所示。注意苹果对该测试用户的密码要求
和正式账号一样，必须是至少8位，并且同时包含数字和大小写字母：
<img src="http://blog.devtang.com/images/iap-adduser-1.png">
<img src="http://blog.devtang.com/images/iap-adduser-2.png"></p></li>
<li><p>填写相关的税务，银行，联系人信息。如下图所示：
<img src="http://blog.devtang.com/images/iap-tax-info.png"></p></li>
</ol>


<h3>开发工作(ios端)</h3>

<p>1、 在工程中引入 storekit.framework 和 #import &lt;StoreKit/StoreKit.h&gt;</p>

<p>2、 获得所有的付费Product ID列表。这个可以用常量存储在本地，也可以由自己的服务器返回。</p>

<p>3、 制作一个界面，展示所有的应用内付费项目。这些应用内付费项目的价格和介绍信息可以是自己的服务器返回。但如果是不带服务器的单机游戏应用或工具类应用，则可以通过向App Store查询获得。我在测试时发现，向App Store查询速度非常慢，通常需要2-3秒钟，所以不建议这么做，最好还是搞个自己的服务器吧。</p>

<p>4、当用户点击了一个IAP项目，我们先查询用户是否允许应用内付费，如果不允许则不用进行以下步骤了。代码如下：</p>

<span></span><div><table><tr><td><pre><span>1</span>
<span>2</span>
<span>3</span>
<span>4</span>
<span>5</span>
<span>6</span>
</pre></td><td><pre><code><span><span>if</span> <span>([</span><span>SKPaymentQueue</span> <span>canMakePayments</span><span>])</span> <span>{</span>
</span><span>    <span>// 执行下面提到的第5步：</span>
</span><span>    <span>[</span><span>self</span> <span>getProductInfo</span><span>];</span>
</span><span><span>}</span> <span>else</span> <span>{</span>
</span><span>    <span>NSLog</span><span>(</span><span>@&quot;失败，用户禁止应用内付费购买.&quot;</span><span>);</span>
</span><span><span>}</span>
</span></code></pre></td></tr></table></div>


<p>5、 我们先通过该IAP的ProductID向AppStore查询，获得SKPayment实例，然后通过SKPaymentQueue的 addPayment方法发起一个购买的操作。</p>

<span></span><div><table><tr><td><pre><span>1</span>
<span>2</span>
<span>3</span>
<span>4</span>
<span>5</span>
<span>6</span>
<span>7</span>
<span>8</span>
<span>9</span>
<span>10</span>
<span>11</span>
<span>12</span>
<span>13</span>
<span>14</span>
<span>15</span>
<span>16</span>
<span>17</span>
<span>18</span>
</pre></td><td><pre><code><span><span>// 下面的ProductId应该是事先在itunesConnect中添加好的，已存在的付费项目。否则查询会失败。</span>
</span><span><span>-</span> <span>(</span><span>void</span><span>)</span><span>getProductInfo</span> <span>{</span>
</span><span>  <span>NSSet</span> <span>*</span> <span>set</span> <span>=</span> <span>[</span><span>NSSet</span> <span>setWithArray:</span><span>@</span><span>[</span><span>@&quot;ProductId&quot;</span><span>]];</span>
</span><span>  <span>SKProductsRequest</span> <span>*</span> <span>request</span> <span>=</span> <span>[[</span><span>SKProductsRequest</span> <span>alloc</span><span>]</span> <span>initWithProductIdentifiers:</span><span>set</span><span>];</span>
</span><span>  <span>request</span><span>.</span><span>delegate</span> <span>=</span> <span>self</span><span>;</span>
</span><span>  <span>[</span><span>request</span> <span>start</span><span>];</span>
</span><span><span>}</span>
</span><span>
</span><span><span>// 以上查询的回调函数</span>
</span><span><span>-</span> <span>(</span><span>void</span><span>)</span><span>productsRequest:</span><span>(</span><span>SKProductsRequest</span> <span>*</span><span>)</span><span>request</span> <span>didReceiveResponse:</span><span>(</span><span>SKProductsResponse</span> <span>*</span><span>)</span><span>response</span> <span>{</span>
</span><span>    <span>NSArray</span> <span>*</span><span>myProduct</span> <span>=</span> <span>response</span><span>.</span><span>products</span><span>;</span>
</span><span>    <span>if</span> <span>(</span><span>myProduct</span><span>.</span><span>count</span> <span>==</span> <span>0</span><span>)</span> <span>{</span>
</span><span>        <span>NSLog</span><span>(</span><span>@&quot;无法获取产品信息，购买失败。&quot;</span><span>);</span>
</span><span>        <span>return</span><span>;</span>
</span><span>    <span>}</span>
</span><span>    <span>SKPayment</span> <span>*</span> <span>payment</span> <span>=</span> <span>[</span><span>SKPayment</span> <span>paymentWithProduct:</span><span>myProduct</span><span>[</span><span>0</span><span>]];</span>
</span><span>    <span>[[</span><span>SKPaymentQueue</span> <span>defaultQueue</span><span>]</span> <span>addPayment:</span><span>payment</span><span>];</span>
</span><span><span>}</span>
</span></code></pre></td></tr></table></div>


<p>6、 在viewDidLoad方法中，将购买页面设置成购买的Observer。</p>

<span></span><div><table><tr><td><pre><span>1</span>
<span>2</span>
<span>3</span>
<span>4</span>
<span>5</span>
<span>6</span>
<span>7</span>
<span>8</span>
<span>9</span>
<span>10</span>
</pre></td><td><pre><code><span><span>-</span> <span>(</span><span>void</span><span>)</span><span>viewDidLoad</span> <span>{</span>
</span><span>    <span>[</span><span>super</span> <span>viewDidLoad</span><span>];</span>
</span><span>    <span>// 监听购买结果</span>
</span><span>    <span>[[</span><span>SKPaymentQueue</span> <span>defaultQueue</span><span>]</span> <span>addTransactionObserver:</span><span>self</span><span>];</span>
</span><span><span>}</span>
</span><span>
</span><span><span>-</span> <span>(</span><span>void</span><span>)</span><span>viewDidUnload</span> <span>{</span>
</span><span>    <span>[</span><span>super</span> <span>viewDidUnload</span><span>];</span>
</span><span>    <span>[[</span><span>SKPaymentQueue</span> <span>defaultQueue</span><span>]</span> <span>removeTransactionObserver:</span><span>self</span><span>];</span>
</span><span><span>}</span>
</span></code></pre></td></tr></table></div>


<p>7、 当用户购买的操作有结果时，就会触发下面的回调函数，相应进行处理即可。</p>

<span></span><div><table><tr><td><pre><span>1</span>
<span>2</span>
<span>3</span>
<span>4</span>
<span>5</span>
<span>6</span>
<span>7</span>
<span>8</span>
<span>9</span>
<span>10</span>
<span>11</span>
<span>12</span>
<span>13</span>
<span>14</span>
<span>15</span>
<span>16</span>
<span>17</span>
<span>18</span>
<span>19</span>
<span>20</span>
<span>21</span>
<span>22</span>
<span>23</span>
<span>24</span>
<span>25</span>
<span>26</span>
<span>27</span>
<span>28</span>
<span>29</span>
<span>30</span>
<span>31</span>
<span>32</span>
<span>33</span>
<span>34</span>
<span>35</span>
<span>36</span>
<span>37</span>
<span>38</span>
<span>39</span>
<span>40</span>
<span>41</span>
<span>42</span>
<span>43</span>
<span>44</span>
<span>45</span>
<span>46</span>
<span>47</span>
<span>48</span>
<span>49</span>
<span>50</span>
<span>51</span>
</pre></td><td><pre><code><span><span>-</span> <span>(</span><span>void</span><span>)</span><span>paymentQueue:</span><span>(</span><span>SKPaymentQueue</span> <span>*</span><span>)</span><span>queue</span> <span>updatedTransactions:</span><span>(</span><span>NSArray</span> <span>*</span><span>)</span><span>transactions</span> <span>{</span>
</span><span>    <span>for</span> <span>(</span><span>SKPaymentTransaction</span> <span>*</span><span>transaction</span> <span>in</span> <span>transactions</span><span>)</span>
</span><span>    <span>{</span>
</span><span>        <span>switch</span> <span>(</span><span>transaction</span><span>.</span><span>transactionState</span><span>)</span>
</span><span>        <span>{</span>
</span><span>            <span>case</span> <span>SKPaymentTransactionStatePurchased:</span><span>//交易完成</span>
</span><span>                <span>NSLog</span><span>(</span><span>@&quot;transactionIdentifier = %@&quot;</span><span>,</span> <span>transaction</span><span>.</span><span>transactionIdentifier</span><span>);</span>
</span><span>                <span>[</span><span>self</span> <span>completeTransaction:</span><span>transaction</span><span>];</span>
</span><span>                <span>break</span><span>;</span>
</span><span>            <span>case</span> <span>SKPaymentTransactionStateFailed:</span><span>//交易失败</span>
</span><span>                <span>[</span><span>self</span> <span>failedTransaction:</span><span>transaction</span><span>];</span>
</span><span>                <span>break</span><span>;</span>
</span><span>            <span>case</span> <span>SKPaymentTransactionStateRestored:</span><span>//已经购买过该商品</span>
</span><span>                <span>[</span><span>self</span> <span>restoreTransaction:</span><span>transaction</span><span>];</span>
</span><span>                <span>break</span><span>;</span>
</span><span>            <span>case</span> <span>SKPaymentTransactionStatePurchasing:</span>      <span>//商品添加进列表</span>
</span><span>                <span>NSLog</span><span>(</span><span>@&quot;商品添加进列表&quot;</span><span>);</span>
</span><span>                <span>break</span><span>;</span>
</span><span>            <span>default</span><span>:</span>
</span><span>                <span>break</span><span>;</span>
</span><span>        <span>}</span>
</span><span>    <span>}</span>
</span><span>
</span><span><span>}</span>
</span><span>
</span><span><span>-</span> <span>(</span><span>void</span><span>)</span><span>completeTransaction:</span><span>(</span><span>SKPaymentTransaction</span> <span>*</span><span>)</span><span>transaction</span> <span>{</span>
</span><span>    <span>// Your application should implement these two methods.</span>
</span><span>    <span>NSString</span> <span>*</span> <span>productIdentifier</span> <span>=</span> <span>transaction</span><span>.</span><span>payment</span><span>.</span><span>productIdentifier</span><span>;</span>
</span><span>    <span>NSString</span> <span>*</span> <span>receipt</span> <span>=</span> <span>[</span><span>transaction</span><span>.</span><span>transactionReceipt</span> <span>base64EncodedString</span><span>];</span>
</span><span>    <span>if</span> <span>([</span><span>productIdentifier</span> <span>length</span><span>]</span> <span>&gt;</span> <span>0</span><span>)</span> <span>{</span>
</span><span>        <span>// 向自己的服务器验证购买凭证</span>
</span><span>    <span>}</span>
</span><span>
</span><span>    <span>// Remove the transaction from the payment queue.</span>
</span><span>    <span>[[</span><span>SKPaymentQueue</span> <span>defaultQueue</span><span>]</span> <span>finishTransaction:</span> <span>transaction</span><span>];</span>
</span><span>
</span><span><span>}</span>
</span><span>
</span><span><span>-</span> <span>(</span><span>void</span><span>)</span><span>failedTransaction:</span><span>(</span><span>SKPaymentTransaction</span> <span>*</span><span>)</span><span>transaction</span> <span>{</span>
</span><span>    <span>if</span><span>(</span><span>transaction</span><span>.</span><span>error</span><span>.</span><span>code</span> <span>!=</span> <span>SKErrorPaymentCancelled</span><span>)</span> <span>{</span>
</span><span>        <span>NSLog</span><span>(</span><span>@&quot;购买失败&quot;</span><span>);</span>
</span><span>    <span>}</span> <span>else</span> <span>{</span>
</span><span>        <span>NSLog</span><span>(</span><span>@&quot;用户取消交易&quot;</span><span>);</span>
</span><span>    <span>}</span>
</span><span>    <span>[[</span><span>SKPaymentQueue</span> <span>defaultQueue</span><span>]</span> <span>finishTransaction:</span> <span>transaction</span><span>];</span>
</span><span><span>}</span>
</span><span>
</span><span><span>-</span> <span>(</span><span>void</span><span>)</span><span>restoreTransaction:</span><span>(</span><span>SKPaymentTransaction</span> <span>*</span><span>)</span><span>transaction</span> <span>{</span>
</span><span>  <span>// 对于已购商品，处理恢复购买的逻辑</span>
</span><span>    <span>[[</span><span>SKPaymentQueue</span> <span>defaultQueue</span><span>]</span> <span>finishTransaction:</span> <span>transaction</span><span>];</span>
</span><span><span>}</span>
</span></code></pre></td></tr></table></div>


<p>8、服务器验证凭证(Optional)。如果购买成功，我们需要将凭证发送到服务器上进行验证。考虑到网络异常情况，iOS端的发送凭证操作应该进行持久化，如果程序退出，崩溃或网络异常，可以恢复重试。</p>

<h3>开发工作(服务端)</h3>

<p>服务端的工作比较简单，分4步：</p>

<ol>
<li>接收ios端发过来的购买凭证。</li>
<li>判断凭证是否已经存在或验证过，然后存储该凭证。</li>
<li>将该凭证发送到苹果的服务器验证，并将验证结果返回给客户端。</li>
<li>如果需要，修改用户相应的会员权限。</li>
</ol>


<p>考虑到网络异常情况，服务器的验证应该是一个可恢复的队列，如果网络失败了，应该进行重试。</p>

<p>与苹果的验证接口文档在<a href="https://developer.apple.com/library/ios/#documentation/NetworkingInternet/Conceptual/StoreKitGuide/VerifyingStoreReceipts/VerifyingStoreReceipts.html">这里</a>。简单来说就是将该购买凭证用Base64编码，然后POST给苹果的验证服务器，苹果将验证结果以JSON形式返回。</p>

<p>苹果AppStore线上的购买凭证验证地址是<a href="https://buy.itunes.apple.com/verifyReceipt">https://buy.itunes.apple.com/verifyReceipt</a> ，测试的验证地址是：<a href="https://sandbox.itunes.apple.com/verifyReceipt">https://sandbox.itunes.apple.com/verifyReceipt</a></p>

<h2>参考链接</h2>

<p>以下参考链接详细说明了完成应用内付费开发的步骤：</p>

<ol>
<li><a href="https://developer.apple.com/appstore/in-app-purchase/index.html">https://developer.apple.com/appstore/in-app-purchase/index.html</a></li>
<li><a href="http://www.himigame.com/iphone-cocos2d/550.html">http://www.himigame.com/iphone-cocos2d/550.html</a></li>
<li><a href="http://www.cocoachina.com/iphonedev/sdk/2011/1028/3435.html">http://www.cocoachina.com/iphonedev/sdk/2011/1028/3435.html</a></li>
<li><a href="http://www.cocoachina.com/newbie/basic/2012/0214/3976.html">http://www.cocoachina.com/newbie/basic/2012/0214/3976.html</a></li>
</ol>