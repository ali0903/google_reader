---
layout: post
title:  "每周优秀代码赏析—Jscex内核【一】"
date:   2011-11-24 08:49:00
author: 【当耐特砖家】
categories: program
---

## 每周优秀代码赏析—Jscex内核【一】
### by 【当耐特砖家】
### at 2011-11-24 08:49:00
### original <http://www.cnblogs.com/iamzhanglei/archive/2011/11/24/2261127.html>

<p><h1>一.简介</h1>  <p>Jscex is JavaScript implementation of F#'s Computation Expressions.</p>  <p><img style="background-image:none;border-right-width:0px;margin:0px auto;padding-left:0px;padding-right:0px;display:block;float:none;border-top-width:0px;border-bottom-width:0px;border-left-width:0px;padding-top:0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/iamzhanglei/201111/201111240848415227.png" width="492" height="142"></p>  <p>它的灵感的源于F#，它为JavaScript语言提供了一个monadic扩展。Jscex完全使用JavaScript编写，能够在任意支 持ECMAScript 3的引擎里使用（例如各浏览器或Node.js）。Jscex的JIT编译器能在运行时将JavaScript代码编译成Monad形式，无需额外编译步 骤，并内置异步编程类库，可以大大简化JavaScript下的异步编程体验。</p>  <p> </p>  <p> </p>  <h1>二.原理探析</h1>  <p>先揭开Jscex 内核之前我们先体验一下世界上最简单的一个 Jscex例子：</p>  <pre>       var i = 0;
       var countAsync = eval(Jscex.compile(&quot;async&quot;, function () {
           while (true) {
               i++;
               document.getElementById(&quot;show&quot;).innerHTML = i;
               $await(Jscex.Async.sleep(1000));
           }
       }))
       countAsync().start();</pre>

<p>一个计数器，从0开始每秒钟加1并显示出来。</p>

<p>然后我们把countAsync  alert出来，看看Jscex把它compile成什么个样子：</p>

<pre>function () {
    var $$_builder_$$_0 = Jscex.builders[&quot;async&quot;];
    return $$_builder_$$_0.Start(this,
        $$_builder_$$_0.Loop(
            function () {
                return true;
            },
            null,
            $$_builder_$$_0.Delay(function () {
                i++;
                (document.getElementById(&quot;show&quot;)).innerHTML = i;
                return $$_builder_$$_0.Bind(Jscex.Async.sleep(1000), function () {
                    return $$_builder_$$_0.Normal();
                });
            }),
            false
        )
    );
}</pre>

<p>一个匿名函数，然后用eval().start()执行该匿名函数。</p>

<p>那么上面还能拆开吗？如果作为一个纯粹的.NET或者JAVA程序员，看这段代码肯定很费劲，因为funciton里套funciton,return套return.</p>

<p>如果你知道javascript的执行顺序的话，上面的函数是还可以拆的：</p>

<pre>        var count = 0;
        function doCount() {
            count++;
            document.getElementById(&quot;clock&quot;).innerHTML = count;
        }

        var $$_builder_$$_0 = Jscex.builders[&quot;async&quot;];

        var delayCount = $$_builder_$$_0.Delay(function () {
            doCount();
            return $$_builder_$$_0.Bind(Jscex.Async.sleep(&quot;1000&quot;), function () {
                return $$_builder_$$_0.Normal();
            });
        });

        var loopCount = $$_builder_$$_0.Loop(
            function () {
                return true;
            },
            null,
           delayCount,
            false
        );

        var countAsync = $$_builder_$$_0.Start(this, loopCount);
        
        countAsync.start();</pre>

<p>这样视乎就很清楚它的执行顺序了~~~！</p>

<p>从上面的代码，我们可以看得出来：我们要做的事情就是：加1显示然后停一秒···加1显示然后停一秒····无限循环下去</p>

<p>我们发生的事情generator就是：</p>

<pre>        var delayCount = $$_builder_$$_0.Delay(function () {
            doCount();
            return $$_builder_$$_0.Bind(Jscex.Async.sleep(&quot;1000&quot;), function () {
                return $$_builder_$$_0.Normal();
            });
        });</pre>

<p>我们要循环的就是delayCount,所以我们把它放到一个loop当中去:</p>

<pre>        var loopCount = $$_builder_$$_0.Loop(
            function () {
                return true;
            },
            null,
           delayCount,
            false
        );</pre>

<p>其中，第一个参数就是while(true),他标志这函数什么时候退出循环。所以比如while(i&lt;3), 它就会编译成function(){return i&lt;3；}</p>

<p>然后：</p>

<pre>var countAsync = $$_builder_$$_0.Start(this, loopCount);</pre>

<p>这行代码的主要作用是 把这个loop作为一个task赋给Jscex.Async.Task的_delegate，</p>

<p>可想而知，在这种架构的基础上，可以轻松实现N个loop，就有了异步队列~~~~</p>

<p>比如：</p>

<pre>       var executeAsyncQueue = eval(Jscex.compile(&quot;async&quot;, function () {
           while (true) {
               $await(countAsync())
               $await(otherAsync())
               $await(Jscex.Async.sleep(1000));
           }

       }))
       executeAsyncQueue().start();</pre>

<p>最后，执行countAsync ().start().整个流程就是这样子的，但是到现在为止，我们还没有进入Jscex内核当中去看一看它是怎么实现这些循环和中转的······</p>

<p>或者你根据上面的思路写出一个伪Jscex出来？我想这个写的过程可以帮你更好的理解Jscex的模式。</p>

<p>请关注：</p>

<h2>每周优秀代码赏析—Jscex内核【二】</h2><img src="http://www.cnblogs.com/iamzhanglei/aggbug/2261127.html?type=1" width="1" height="1" alt=""><p>作者: <a href="http://www.cnblogs.com/iamzhanglei/">【当耐特砖家】</a> 发表于 2011-11-24 08:49 <a href="http://www.cnblogs.com/iamzhanglei/archive/2011/11/24/2261127.html">原文链接</a></p><p>评论: 11　<a href="http://www.cnblogs.com/iamzhanglei/archive/2011/11/24/2261127.html#pagedcomment">查看评论</a>　<a href="http://www.cnblogs.com/iamzhanglei/archive/2011/11/24/2261127.html#commentform">发表评论</a></p><hr><p>最新新闻：<br>· <a href="http://news.cnblogs.com/n/124044/">前Twitter工程副总裁迈克·阿博特加盟KPCB</a><span style="color:gray">(2011-12-04 18:08)</span><br>· <a href="http://news.cnblogs.com/n/124043/">社交游戏公司Zynga上市估值较今年2月缩水30%</a><span style="color:gray">(2011-12-04 17:58)</span><br>· <a href="http://news.cnblogs.com/n/124042/">凡客称完成2亿美金融资回击现金流为负数传闻</a><span style="color:gray">(2011-12-04 17:53)</span><br>· <a href="http://news.cnblogs.com/n/124041/">Mozilla与Google搜索的Firefox合同到期</a><span style="color:gray">(2011-12-04 17:38)</span><br>· <a href="http://news.cnblogs.com/n/124040/">理解inode</a><span style="color:gray">(2011-12-04 17:22)</span><br></p><p>编辑推荐：<a href="http://www.cnblogs.com/lifepoem/tag/LINQ/">LINQ之路</a><br></p><p>网站导航：<a href="http://www.cnblogs.com">博客园首页</a>  <a href="http://home.cnblogs.com/">我的园子</a>  <a href="http://news.cnblogs.com">新闻</a>  <a href="http://home.cnblogs.com/ing/">闪存</a>  <a href="http://q.cnblogs.com/">博问</a>  <a href="http://kb.cnblogs.com">知识库</a></p></p>